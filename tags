!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABSOLUTE	daemon/daemon/daemon.h	/^	enum Mode { DIFFERENCE, ABSOLUTE };$/;"	e	enum:PCMDaemon::Mode
ALIGN	daemon/daemon/common.h	39;"	d
ALIGNMENT	daemon/daemon/common.h	38;"	d
ALIGNMENT	daemon/daemon/test/main.cpp	7;"	d	file:
APOLLO_LAKE	cpucounters.h	/^        APOLLO_LAKE = 92,$/;"	e	enum:PCM::SupportedCPUModels
ARCH_LLC_MISS_EVTNR	types.h	123;"	d
ARCH_LLC_MISS_UMASK	types.h	124;"	d
ARCH_LLC_REFERENCE_EVTNR	types.h	120;"	d
ARCH_LLC_REFERENCE_UMASK	types.h	121;"	d
ASM_SRCS	daemon/client/Debug/sources.mk	/^ASM_SRCS := $/;"	m
ASM_SRCS	daemon/daemon/Debug/sources.mk	/^ASM_SRCS := $/;"	m
ATOM	cpucounters.h	/^        ATOM = 28,$/;"	e	enum:PCM::SupportedCPUModels
ATOM_2	cpucounters.h	/^        ATOM_2 = 53,$/;"	e	enum:PCM::SupportedCPUModels
ATOM_MEM_LOAD_RETIRED_L2_HIT_EVTNR	types.h	128;"	d
ATOM_MEM_LOAD_RETIRED_L2_HIT_EVTNR	types.h	134;"	d
ATOM_MEM_LOAD_RETIRED_L2_HIT_EVTNR	types.h	140;"	d
ATOM_MEM_LOAD_RETIRED_L2_HIT_UMASK	types.h	129;"	d
ATOM_MEM_LOAD_RETIRED_L2_HIT_UMASK	types.h	135;"	d
ATOM_MEM_LOAD_RETIRED_L2_HIT_UMASK	types.h	141;"	d
ATOM_MEM_LOAD_RETIRED_L2_MISS_EVTNR	types.h	131;"	d
ATOM_MEM_LOAD_RETIRED_L2_MISS_EVTNR	types.h	137;"	d
ATOM_MEM_LOAD_RETIRED_L2_MISS_EVTNR	types.h	143;"	d
ATOM_MEM_LOAD_RETIRED_L2_MISS_UMASK	types.h	132;"	d
ATOM_MEM_LOAD_RETIRED_L2_MISS_UMASK	types.h	138;"	d
ATOM_MEM_LOAD_RETIRED_L2_MISS_UMASK	types.h	144;"	d
AVOTON	cpucounters.h	/^        AVOTON = 77,$/;"	e	enum:PCM::SupportedCPUModels
AbstractRawCounter	width_extender.h	/^    struct AbstractRawCounter$/;"	s	class:CounterWidthExtender
AfterState	pcm-core.cpp	/^	std::vector<CoreCounterState> BeforeState, AfterState;$/;"	v
AfterState	pcm-latency.cpp	/^ServerUncorePowerState * AfterState;$/;"	v
AfterState_core	pcm-latency.cpp	/^std::vector<CoreCounterState> BeforeState_core, AfterState_core;$/;"	v
ArchLLCMiss	cpucounters.h	/^        uint64 ArchLLCMiss;$/;"	m	union:BasicCounterState::__anon15
ArchLLCRef	cpucounters.h	/^        uint64 ArchLLCRef;$/;"	m	union:BasicCounterState::__anon16
AsynchronCounterState	cpuasynchcounter.h	/^    AsynchronCounterState()$/;"	f	class:AsynchronCounterState
AsynchronCounterState	cpuasynchcounter.h	/^class AsynchronCounterState {$/;"	c
BAYTRAIL	cpucounters.h	/^        BAYTRAIL = 55,$/;"	e	enum:PCM::SupportedCPUModels
BB0_MSR_PERF_CNT_1	types.h	219;"	d
BB0_MSR_PERF_CNT_CTL_1	types.h	220;"	d
BB0_MSR_PERF_GLOBAL_CTL	types.h	218;"	d
BB1_MSR_PERF_CNT_1	types.h	223;"	d
BB1_MSR_PERF_CNT_CTL_1	types.h	224;"	d
BB1_MSR_PERF_GLOBAL_CTL	types.h	222;"	d
BDX	cpucounters.h	/^        BDX = 79,$/;"	e	enum:PCM::SupportedCPUModels
BDX_DE	cpucounters.h	/^        BDX_DE = 86,$/;"	e	enum:PCM::SupportedCPUModels
BROADWELL	cpucounters.h	/^        BROADWELL = 61,$/;"	e	enum:PCM::SupportedCPUModels
BROADWELL_XEON_E3	cpucounters.h	/^        BROADWELL_XEON_E3 = 71,$/;"	e	enum:PCM::SupportedCPUModels
BUILD_PATH	WinMSRDriver/Win7/mymake.bat	/^set BUILD_PATH=$/;"	v
BasicCounterState	cpucounters.h	/^    BasicCounterState() :$/;"	f	class:BasicCounterState
BasicCounterState	cpucounters.h	/^class BasicCounterState$/;"	c
BecktonUncorePMUCNTCTLRegister	types.h	/^struct BecktonUncorePMUCNTCTLRegister$/;"	s
BecktonUncorePMUZDPCTLFVCRegister	types.h	/^struct BecktonUncorePMUZDPCTLFVCRegister$/;"	s
BeforeState	pcm-core.cpp	/^	std::vector<CoreCounterState> BeforeState, AfterState;$/;"	v
BeforeState	pcm-latency.cpp	/^ServerUncorePowerState * BeforeState;$/;"	v
BeforeState_core	pcm-latency.cpp	/^std::vector<CoreCounterState> BeforeState_core, AfterState_core;$/;"	v
CBO_MSR_PMON_CTL_EDGE_DET	types.h	833;"	d
CBO_MSR_PMON_CTL_EN	types.h	835;"	d
CBO_MSR_PMON_CTL_EVENT	types.h	830;"	d
CBO_MSR_PMON_CTL_INVERT	types.h	836;"	d
CBO_MSR_PMON_CTL_RST	types.h	832;"	d
CBO_MSR_PMON_CTL_THRESH	types.h	837;"	d
CBO_MSR_PMON_CTL_TID_EN	types.h	834;"	d
CBO_MSR_PMON_CTL_UMASK	types.h	831;"	d
CBoEventTid	cpucounters.h	/^    enum CBoEventTid$/;"	g	class:PCM
CC	daemon/daemon/test/Makefile	/^CC=g++$/;"	m
CC_DEPS	daemon/client/Debug/sources.mk	/^CC_DEPS := $/;"	m
CC_DEPS	daemon/daemon/Debug/sources.mk	/^CC_DEPS := $/;"	m
CC_SRCS	daemon/client/Debug/sources.mk	/^CC_SRCS := $/;"	m
CC_SRCS	daemon/daemon/Debug/sources.mk	/^CC_SRCS := $/;"	m
CENTERTON	cpucounters.h	/^        CENTERTON = 54,$/;"	e	enum:PCM::SupportedCPUModels
CFLAGS	daemon/daemon/test/Makefile	/^CFLAGS=-c -Wall -std=c++11$/;"	m
CHERRYTRAIL	cpucounters.h	/^        CHERRYTRAIL = 76,$/;"	e	enum:PCM::SupportedCPUModels
CH_MASK	cpucounters.h	/^        CH_MASK,$/;"	e	enum:PCM::PerfmonField
CLARKDALE	cpucounters.h	/^        CLARKDALE = 37,$/;"	e	enum:PCM::SupportedCPUModels
CLIENT_H_	daemon/client/client.h	21;"	d
CLOCK_MONOTONIC_RAW	daemon/daemon/daemon.cpp	27;"	d	file:
COMMON_H_	daemon/daemon/common.h	16;"	d
COMMON_OBJS	Makefile	/^COMMON_OBJS = msr.o cpucounters.o pci.o mmio.o client_bw.o utils.o$/;"	m
COUNTER_INDEX	cpucounters.h	/^        COUNTER_INDEX$/;"	e	enum:PCM::PerfmonField
CPP_DEPS	daemon/client/Debug/sources.mk	/^CPP_DEPS := $/;"	m
CPP_DEPS	daemon/daemon/Debug/sources.mk	/^CPP_DEPS := $/;"	m
CPP_SRCS	daemon/client/Debug/sources.mk	/^CPP_SRCS := $/;"	m
CPP_SRCS	daemon/daemon/Debug/sources.mk	/^CPP_SRCS := $/;"	m
CPUASYNCHCOUNTER_HEADER	cpuasynchcounter.h	19;"	d
CPUCNT_INIT_THE_REST_OF_EVTCNT	cpucounters.cpp	2491;"	d	file:
CPUCNT_INIT_THE_REST_OF_EVTCNT	cpucounters.cpp	2560;"	d	file:
CPUCOUNTERS_HEADER	cpucounters.h	17;"	d
CPUCounters_CLIENTBW_H	client_bw.h	17;"	d
CPUCounters_LSPCI_H	lspci.h	2;"	d
CPUCounters_MSR_H	msr.h	17;"	d
CPUCounters_PCI_H	pci.h	19;"	d
CPUCounters_TYPES_H	types.h	17;"	d
CPU_CLK_UNHALTED_REF_ADDR	types.h	45;"	d
CPU_CLK_UNHALTED_THREAD_ADDR	types.h	44;"	d
CPU_intensive_task	realtime.cpp	/^void CPU_intensive_task()$/;"	f
CRd	cpucounters.h	/^        CRd = 0x181,       \/\/ Demand Code Read$/;"	e	enum:PCM::PCIeEventCode
CRd	pcm-pcie.cpp	/^    uint64 CRd;       \/\/ Demand Code Read$/;"	m	struct:__anon42	file:
CStateResidency	cpucounters.h	/^    uint64 CStateResidency[PCM::MAX_C_STATE + 1];$/;"	m	class:BasicCounterState
CStateResidency	cpucounters.h	/^    uint64 CStateResidency[PCM::MAX_C_STATE + 1];$/;"	m	class:UncoreCounterState
CUSTOM_CORE_EVENTS	cpucounters.h	/^        CUSTOM_CORE_EVENTS = 1,     \/*!< Custom set of core events specified in the parameter to the program method. The parameter must be a pointer to array of four \\c CustomCoreEventDescription values *\/$/;"	e	enum:PCM::ProgramMode
CXX	Makefile	/^CXX=c++$/;"	m
CXX_DEPS	daemon/client/Debug/sources.mk	/^CXX_DEPS := $/;"	m
CXX_DEPS	daemon/daemon/Debug/sources.mk	/^CXX_DEPS := $/;"	m
CXX_SRCS	daemon/client/Debug/sources.mk	/^CXX_SRCS := $/;"	m
CXX_SRCS	daemon/daemon/Debug/sources.mk	/^CXX_SRCS := $/;"	m
CX_MSR_PMON_BOX_CTL	cpucounters.cpp	/^uint64 PCM::CX_MSR_PMON_BOX_CTL(uint32 Cbo) const$/;"	f	class:PCM
CX_MSR_PMON_BOX_FILTER	cpucounters.cpp	/^uint64 PCM::CX_MSR_PMON_BOX_FILTER(uint32 Cbo) const$/;"	f	class:PCM
CX_MSR_PMON_BOX_FILTER1	cpucounters.cpp	/^uint64 PCM::CX_MSR_PMON_BOX_FILTER1(uint32 Cbo) const$/;"	f	class:PCM
CX_MSR_PMON_CTLY	cpucounters.cpp	/^uint64 PCM::CX_MSR_PMON_CTLY(uint32 Cbo, uint32 Ctl) const$/;"	f	class:PCM
CX_MSR_PMON_CTRY	cpucounters.cpp	/^uint64 PCM::CX_MSR_PMON_CTRY(uint32 Cbo, uint32 Ctr) const$/;"	f	class:PCM
C_DEPS	daemon/client/Debug/sources.mk	/^C_DEPS := $/;"	m
C_DEPS	daemon/daemon/Debug/sources.mk	/^C_DEPS := $/;"	m
C_SRCS	daemon/client/Debug/sources.mk	/^C_SRCS := $/;"	m
C_SRCS	daemon/daemon/Debug/sources.mk	/^C_SRCS := $/;"	m
C_UPPER_DEPS	daemon/client/Debug/sources.mk	/^C_UPPER_DEPS := $/;"	m
C_UPPER_DEPS	daemon/daemon/Debug/sources.mk	/^C_UPPER_DEPS := $/;"	m
C_UPPER_SRCS	daemon/client/Debug/sources.mk	/^C_UPPER_SRCS := $/;"	m
C_UPPER_SRCS	daemon/daemon/Debug/sources.mk	/^C_UPPER_SRCS := $/;"	m
ChaPipelineQueue	cpucounters.h	/^    enum ChaPipelineQueue$/;"	g	class:PCM
CheckAndForceRTMAbortMode	utils.cpp	/^bool CheckAndForceRTMAbortMode(const char * arg, PCM * m)$/;"	f
Client	daemon/client/client.cpp	/^	Client::Client()$/;"	f	class:PCMDaemon::Client
Client	daemon/client/client.h	/^	class Client {$/;"	c	namespace:PCMDaemon
ClientBW	client_bw.cpp	/^ClientBW::ClientBW()$/;"	f	class:ClientBW
ClientBW	client_bw.h	/^class ClientBW$/;"	c
ClientImcReadsCounter	width_extender.h	/^        ClientImcReadsCounter(std::shared_ptr<ClientBW> clientBW_) : clientBW(clientBW_) { }$/;"	f	struct:CounterWidthExtender::ClientImcReadsCounter
ClientImcReadsCounter	width_extender.h	/^    struct ClientImcReadsCounter : public AbstractRawCounter$/;"	s	class:CounterWidthExtender
ClientImcWritesCounter	width_extender.h	/^        ClientImcWritesCounter(std::shared_ptr<ClientBW> clientBW_) : clientBW(clientBW_) { }$/;"	f	struct:CounterWidthExtender::ClientImcWritesCounter
ClientImcWritesCounter	width_extender.h	/^    struct ClientImcWritesCounter : public AbstractRawCounter$/;"	s	class:CounterWidthExtender
ClientIoRequestsCounter	width_extender.h	/^        ClientIoRequestsCounter(std::shared_ptr<ClientBW> clientBW_) : clientBW(clientBW_) { }$/;"	f	struct:CounterWidthExtender::ClientIoRequestsCounter
ClientIoRequestsCounter	width_extender.h	/^    struct ClientIoRequestsCounter : public AbstractRawCounter$/;"	s	class:CounterWidthExtender
CollectionInformation	PCM-Service_Win/PCMService.h	/^        CollectionInformation()$/;"	f	struct:PCMServiceNS::CollectionInformation
CollectionInformation	PCM-Service_Win/PCMService.h	/^    ref struct CollectionInformation {$/;"	s	namespace:PCMServiceNS
CoreC0StateResidencyHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable CoreC0StateResidencyHash_;		$/;"	m	class:PCMServiceNS::MeasureThread
CoreC3StateResidencyHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable CoreC3StateResidencyHash_;$/;"	m	class:PCMServiceNS::MeasureThread
CoreC6StateResidencyHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable CoreC6StateResidencyHash_;$/;"	m	class:PCMServiceNS::MeasureThread
CoreC7StateResidencyHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable CoreC7StateResidencyHash_;$/;"	m	class:PCMServiceNS::MeasureThread
CoreCounterState	cpucounters.h	/^class CoreCounterState : public BasicCounterState$/;"	c
CoreEvent	pcm-core.cpp	/^struct CoreEvent$/;"	s	file:
CoreLocalMemoryBWMetricAvailable	cpucounters.cpp	/^bool PCM::CoreLocalMemoryBWMetricAvailable() const$/;"	f	class:PCM
CoreRemoteMemoryBWMetricAvailable	cpucounters.cpp	/^bool PCM::CoreRemoteMemoryBWMetricAvailable() const$/;"	f	class:PCM
CoreTaskQueue	cpucounters.cpp	/^    CoreTaskQueue(int32 core) :$/;"	f	class:CoreTaskQueue
CoreTaskQueue	cpucounters.cpp	/^class CoreTaskQueue$/;"	c	file:
CounterMutex	cpuasynchcounter.h	/^    pthread_mutex_t CounterMutex;$/;"	m	class:AsynchronCounterState
CounterMutex	width_extender.h	/^    PCM_Util::Mutex CounterMutex;$/;"	m	class:CounterWidthExtender
CounterWidthExtender	cpucounters.cpp	/^CounterWidthExtender::CounterWidthExtender(AbstractRawCounter * raw_counter_, uint64 counter_width_, uint32 watchdog_delay_ms_) : raw_counter(raw_counter_), counter_width(counter_width_), watchdog_delay_ms(watchdog_delay_ms_)$/;"	f	class:CounterWidthExtender
CounterWidthExtender	width_extender.h	/^class CounterWidthExtender$/;"	c
CounterWidthExtenderRegister	cpucounters.h	/^    CounterWidthExtenderRegister(const std::shared_ptr<CounterWidthExtender> & handle_) :$/;"	f	class:CounterWidthExtenderRegister
CounterWidthExtenderRegister	cpucounters.h	/^class CounterWidthExtenderRegister : public HWRegister$/;"	c
CountersCore	PCM-Service_Win/PCMService.h	/^        initonly String^ CountersCore = gcnew String(L"PCM Core Counters");$/;"	m	class:PCMServiceNS::MeasureThread
CountersQpi	PCM-Service_Win/PCMService.h	/^        initonly String^ CountersQpi = gcnew String(L"PCM QPI Counters");$/;"	m	class:PCMServiceNS::MeasureThread
CountersSocket	PCM-Service_Win/PCMService.h	/^        initonly String^ CountersSocket = gcnew String(L"PCM Socket Counters");$/;"	m	class:PCMServiceNS::MeasureThread
CpuClkUnhaltedRef	cpucounters.h	/^    uint64 CpuClkUnhaltedRef;$/;"	m	class:BasicCounterState
CpuClkUnhaltedThread	cpucounters.h	/^    uint64 CpuClkUnhaltedThread;$/;"	m	class:BasicCounterState
Cpuid	winring0/OlsApiInit.h	/^_Cpuid Cpuid = NULL;$/;"	v
CpuidPx	winring0/OlsApiInit.h	/^_CpuidPx CpuidPx = NULL;$/;"	v
CpuidTx	winring0/OlsApiInit.h	/^_CpuidTx CpuidTx = NULL;$/;"	v
CustomCoreEventDescription	cpucounters.h	/^    struct CustomCoreEventDescription$/;"	s	class:PCM
CustomIIOEventDescription	cpucounters.h	/^    struct CustomIIOEventDescription$/;"	s	class:PCM
CyclesLostDueL2CacheMissesAvailable	cpucounters.h	/^    bool CyclesLostDueL2CacheMissesAvailable;$/;"	m	class:PCM
CyclesLostDueL3CacheMissesAvailable	cpucounters.h	/^    bool CyclesLostDueL3CacheMissesAvailable;$/;"	m	class:PCM
DAEMON_H_	daemon/daemon/daemon.h	16;"	d
DDR	pcm-latency.cpp	39;"	d	file:
DEFAULT_DISPLAY_COLUMNS	pcm-memory.cpp	56;"	d	file:
DEFAULT_EVENTS	cpucounters.h	/^        DEFAULT_EVENTS = 0,         \/*!< Default choice of events, the additional parameter is not needed and ignored *\/$/;"	e	enum:PCM::ProgramMode
DEFAULT_SHM_ID_LOCATION	daemon/daemon/common.h	/^static const char DEFAULT_SHM_ID_LOCATION[] = "\/tmp\/opcm-daemon-shm-id";$/;"	v
DELAY	cpuasynchcounter.h	30;"	d
DENVERTON	cpucounters.h	/^        DENVERTON = 95,$/;"	e	enum:PCM::SupportedCPUModels
DIFFERENCE	daemon/daemon/daemon.h	/^	enum Mode { DIFFERENCE, ABSOLUTE };$/;"	e	enum:PCMDaemon::Mode
DIVIDER	cpucounters.h	/^        DIVIDER,$/;"	e	enum:PCM::PerfmonField
DOS_DEVICE_NAME	WinMSRDriver/Win7/msrmain.c	29;"	d	file:
DRAMClocks	cpucounters.h	/^    std::array<uint64, maxChannels> DRAMClocks;$/;"	m	class:ServerUncorePowerState
DRAMEnergyHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable DRAMEnergyHash_;$/;"	m	class:PCMServiceNS::MeasureThread
DRAMEnergyStatus	cpucounters.h	/^    uint64 DRAMEnergyStatus;$/;"	m	class:UncoreCounterState
DRAMSpeed	pcm-latency.cpp	/^double DRAMSpeed;$/;"	v
DRd	cpucounters.h	/^        DRd = 0x182,       \/\/ Demand Data Read$/;"	e	enum:PCM::PCIeEventCode
DRd	pcm-pcie.cpp	/^    uint64 DRd;       \/\/ Demand Data read$/;"	m	struct:__anon42	file:
Daemon	daemon/daemon/daemon.cpp	/^	Daemon::Daemon(int argc, char *argv[])$/;"	f	class:PCMDaemon::Daemon
Daemon	daemon/daemon/daemon.h	/^	class Daemon {$/;"	c	namespace:PCMDaemon
DeinitOpenLibSys	winring0/OlsApiInit.h	/^BOOL DeinitOpenLibSys(HMODULE *hModule)$/;"	f
DeinitializeOls	winring0/OlsApiInit.h	/^_DeinitializeOls DeinitializeOls = NULL;$/;"	v
DllMain	PCM-Lib_Win/dllmain.cpp	/^BOOL APIENTRY DllMain( HMODULE hModule,$/;"	f
Driver	PCM_Win/windriver.h	/^    Driver() :$/;"	f	class:Driver
Driver	PCM_Win/windriver.h	/^    Driver(const std::wstring& driverPath) :$/;"	f	class:Driver
Driver	PCM_Win/windriver.h	/^    Driver(const std::wstring& driverPath, const std::wstring& driverName, const std::wstring& driverDescription) :$/;"	f	class:Driver
Driver	PCM_Win/windriver.h	/^class Driver$/;"	c
DriverEntry	WinMSRDriver/Win7/msrmain.c	/^DRIVER_INITIALIZE DriverEntry;$/;"	v
DriverEntry	WinMSRDriver/Win7/msrmain.c	/^DriverEntry($/;"	f
DummySocketStates	pcm-core.cpp	/^	std::vector<SocketCounterState> DummySocketStates;$/;"	v
DummySocketStates	pcm-latency.cpp	/^std::vector<SocketCounterState> DummySocketStates;$/;"	v
EDCCounter	cpucounters.h	/^    std::array<std::array<uint64, maxCounters>, maxChannels> EDCCounter; \/\/ EDC controller X counter$/;"	m	class:ServerUncorePowerState
EDCRegisterLocation	cpucounters.h	/^    std::vector<std::pair<uint32, uint32> > EDCRegisterLocation; \/\/ EDCRegisterLocation: (device, function)$/;"	m	class:ServerPCICFGUncore
EDC_CH_PCI_PMON_FIXED_CTL_EN	types.h	744;"	d
EDC_Rd_socket	pcm-memory.cpp	/^    float EDC_Rd_socket[max_sockets];$/;"	m	struct:memdata	file:
EDC_Rd_socket_chan	pcm-memory.cpp	/^    float EDC_Rd_socket_chan[max_sockets][max_edc_channels];$/;"	m	struct:memdata	file:
EDC_Wr_socket	pcm-memory.cpp	/^    float EDC_Wr_socket[max_sockets];$/;"	m	struct:memdata	file:
EDC_Wr_socket_chan	pcm-memory.cpp	/^    float EDC_Wr_socket_chan[max_sockets][max_edc_channels];$/;"	m	struct:memdata	file:
EDGE_DET	cpucounters.h	/^        EDGE_DET,$/;"	e	enum:PCM::PerfmonField
ENABLE	cpucounters.h	/^        ENABLE,$/;"	e	enum:PCM::PerfmonField
END_OF_MODEL_LIST	cpucounters.h	/^        END_OF_MODEL_LIST = 0x0ffff$/;"	e	enum:PCM::SupportedCPUModels
EVENT_SELECT	cpucounters.h	/^        EVENT_SELECT,$/;"	e	enum:PCM::PerfmonField
EVENT_SIZE	pcm-core.cpp	196;"	d	file:
EXE	Makefile	/^EXE = pcm.x pcm-numa.x pcm-latency.x pcm-power.x pcm-sensor.x pcm-msr.x pcm-memory.x pcm-tsx.x pcm-pcie.x pcm-core.x pcm-iio.x pcm-lspci.x pcm-pcicfg.x$/;"	m
EXECUTABLE	daemon/daemon/test/Makefile	/^EXECUTABLE=test$/;"	m
EXECUTABLES	daemon/client/Debug/sources.mk	/^EXECUTABLES := $/;"	m
EXECUTABLES	daemon/daemon/Debug/sources.mk	/^EXECUTABLES := $/;"	m
EXE_OBJS	Makefile	/^EXE_OBJS = $(EXE:.x=.o)$/;"	m
EXT_CUSTOM_CORE_EVENTS	cpucounters.h	/^        EXT_CUSTOM_CORE_EVENTS = 2, \/*!< Custom set of core events specified in the parameter to the program method. The parameter must be a pointer to a \\c ExtendedCustomCoreEventDescription  data structure *\/$/;"	e	enum:PCM::ProgramMode
ErrorCode	cpucounters.h	/^    enum ErrorCode {$/;"	g	class:PCM
Event0	cpucounters.h	/^        uint64 Event0;$/;"	m	union:BasicCounterState::__anon15
Event1	cpucounters.h	/^        uint64 Event1;$/;"	m	union:BasicCounterState::__anon16
Event2	cpucounters.h	/^        uint64 Event2;$/;"	m	union:BasicCounterState::__anon17
Event3	cpucounters.h	/^        uint64 Event3;$/;"	m	union:BasicCounterState::__anon18
EventSelectRegister	types.h	/^    EventSelectRegister() : value(0) {}$/;"	f	struct:EventSelectRegister
EventSelectRegister	types.h	/^struct EventSelectRegister$/;"	s
ExtendedCustomCoreEventDescription	cpucounters.h	/^        ExtendedCustomCoreEventDescription() : fixedCfg(NULL), nGPCounters(0), gpCounterCfg(NULL)$/;"	f	struct:PCM::ExtendedCustomCoreEventDescription
ExtendedCustomCoreEventDescription	cpucounters.h	/^    struct ExtendedCustomCoreEventDescription$/;"	s	class:PCM
FB_INS_RD	pcm-latency.cpp	51;"	d	file:
FB_OCC_RD	pcm-latency.cpp	50;"	d	file:
FC_MASK	cpucounters.h	/^        FC_MASK,$/;"	e	enum:PCM::PerfmonField
FORM_PCI_ADDR	MacMSRDriver/PCIDriverInterface.h	24;"	d
FindPciDeviceByClass	winring0/OlsApiInit.h	/^_FindPciDeviceByClass FindPciDeviceByClass = NULL;$/;"	v
FindPciDeviceById	winring0/OlsApiInit.h	/^_FindPciDeviceById FindPciDeviceById = NULL;$/;"	v
FixedEventControlRegister	types.h	/^struct FixedEventControlRegister$/;"	s
GETOPT_H_	freegetopt/getopt.h	38;"	d
GetDllStatus	winring0/OlsApiInit.h	/^_GetDllStatus GetDllStatus = NULL;$/;"	v
GetDllVersion	winring0/OlsApiInit.h	/^_GetDllVersion GetDllVersion = NULL;$/;"	v
GetDriverStatus	winring0/OlsApiInit.h	/^_GetDriverStatus GetDriverStatus = NULL;$/;"	v
GetDriverType	winring0/OlsApiInit.h	/^_GetDriverType GetDriverType = NULL;$/;"	v
GetDriverVersion	winring0/OlsApiInit.h	/^_GetDriverVersion GetDriverVersion = NULL;$/;"	v
GetOlsString	winring0/OlsApiInit.h	114;"	d
GetOlsString	winring0/OlsApiInit.h	116;"	d
GetOlsStringA	winring0/OlsApiInit.h	/^_GetOlsStringA GetOlsStringA = NULL;$/;"	v
GetOlsStringW	winring0/OlsApiInit.h	/^_GetOlsStringW GetOlsStringW = NULL;$/;"	v
GetOlsValue	winring0/OlsApiInit.h	/^_GetOlsValue GetOlsValue = NULL;$/;"	v
Globals	PCM-Service_Win/PCMService.h	/^    ref struct Globals$/;"	s	namespace:PCMServiceNS
HACK_TO_REMOVE_DUPLICATE_ERROR	pcm-core.cpp	19;"	d	file:
HACK_TO_REMOVE_DUPLICATE_ERROR	pcm-iio.cpp	16;"	d	file:
HACK_TO_REMOVE_DUPLICATE_ERROR	pcm-latency.cpp	15;"	d	file:
HACK_TO_REMOVE_DUPLICATE_ERROR	pcm-lspci.cpp	15;"	d	file:
HACK_TO_REMOVE_DUPLICATE_ERROR	pcm-memory.cpp	21;"	d	file:
HACK_TO_REMOVE_DUPLICATE_ERROR	pcm-msr.cpp	15;"	d	file:
HACK_TO_REMOVE_DUPLICATE_ERROR	pcm-numa.cpp	19;"	d	file:
HACK_TO_REMOVE_DUPLICATE_ERROR	pcm-pcicfg.cpp	15;"	d	file:
HACK_TO_REMOVE_DUPLICATE_ERROR	pcm-pcie.cpp	19;"	d	file:
HACK_TO_REMOVE_DUPLICATE_ERROR	pcm-power.cpp	17;"	d	file:
HACK_TO_REMOVE_DUPLICATE_ERROR	pcm-sensor.cpp	25;"	d	file:
HACK_TO_REMOVE_DUPLICATE_ERROR	pcm-tsx.cpp	19;"	d	file:
HACK_TO_REMOVE_DUPLICATE_ERROR	pcm.cpp	21;"	d	file:
HACK_TO_REMOVE_DUPLICATE_ERROR	realtime.cpp	16;"	d	file:
HASWELL	cpucounters.h	/^        HASWELL = 60,$/;"	e	enum:PCM::SupportedCPUModels
HASWELLX	cpucounters.h	/^        HASWELLX = 63,$/;"	e	enum:PCM::SupportedCPUModels
HASWELL_2	cpucounters.h	/^        HASWELL_2 = 70,$/;"	e	enum:PCM::SupportedCPUModels
HASWELL_ULT	cpucounters.h	/^        HASWELL_ULT = 69,$/;"	e	enum:PCM::SupportedCPUModels
HSX_C0_MSR_PMON_BOX_CTL	types.h	809;"	d
HSX_C0_MSR_PMON_BOX_FILTER	types.h	801;"	d
HSX_C0_MSR_PMON_BOX_FILTER1	types.h	800;"	d
HSX_C0_MSR_PMON_BOX_STATUS	types.h	808;"	d
HSX_C0_MSR_PMON_CTL0	types.h	806;"	d
HSX_C0_MSR_PMON_CTL1	types.h	805;"	d
HSX_C0_MSR_PMON_CTL2	types.h	804;"	d
HSX_C0_MSR_PMON_CTL3	types.h	803;"	d
HSX_C0_MSR_PMON_CTR0	types.h	798;"	d
HSX_C0_MSR_PMON_CTR1	types.h	797;"	d
HSX_C0_MSR_PMON_CTR2	types.h	796;"	d
HSX_C0_MSR_PMON_CTR3	types.h	795;"	d
HSX_CBO_MSR_STEP	types.h	811;"	d
HSX_MC0_CH0_REGISTER_DEV_ADDR	types.h	509;"	d
HSX_MC0_CH0_REGISTER_FUNC_ADDR	types.h	513;"	d
HSX_MC0_CH1_REGISTER_DEV_ADDR	types.h	510;"	d
HSX_MC0_CH1_REGISTER_FUNC_ADDR	types.h	514;"	d
HSX_MC0_CH2_REGISTER_DEV_ADDR	types.h	511;"	d
HSX_MC0_CH2_REGISTER_FUNC_ADDR	types.h	515;"	d
HSX_MC0_CH3_REGISTER_DEV_ADDR	types.h	512;"	d
HSX_MC0_CH3_REGISTER_FUNC_ADDR	types.h	516;"	d
HSX_MC1_CH0_REGISTER_DEV_ADDR	types.h	518;"	d
HSX_MC1_CH0_REGISTER_FUNC_ADDR	types.h	522;"	d
HSX_MC1_CH1_REGISTER_DEV_ADDR	types.h	519;"	d
HSX_MC1_CH1_REGISTER_FUNC_ADDR	types.h	523;"	d
HSX_MC1_CH2_REGISTER_DEV_ADDR	types.h	520;"	d
HSX_MC1_CH2_REGISTER_FUNC_ADDR	types.h	524;"	d
HSX_MC1_CH3_REGISTER_DEV_ADDR	types.h	521;"	d
HSX_MC1_CH3_REGISTER_FUNC_ADDR	types.h	525;"	d
HSX_PCU_MSR_PMON_BOX_CTL_ADDR	types.h	732;"	d
HSX_PCU_MSR_PMON_BOX_FILTER_ADDR	types.h	725;"	d
HSX_PCU_MSR_PMON_CTL0_ADDR	types.h	730;"	d
HSX_PCU_MSR_PMON_CTL1_ADDR	types.h	729;"	d
HSX_PCU_MSR_PMON_CTL2_ADDR	types.h	728;"	d
HSX_PCU_MSR_PMON_CTL3_ADDR	types.h	727;"	d
HSX_PCU_MSR_PMON_CTR0_ADDR	types.h	723;"	d
HSX_PCU_MSR_PMON_CTR1_ADDR	types.h	722;"	d
HSX_PCU_MSR_PMON_CTR2_ADDR	types.h	721;"	d
HSX_PCU_MSR_PMON_CTR3_ADDR	types.h	720;"	d
HSX_QPI_PORT0_REGISTER_DEV_ADDR	types.h	635;"	d
HSX_QPI_PORT0_REGISTER_FUNC_ADDR	types.h	636;"	d
HSX_QPI_PORT1_REGISTER_DEV_ADDR	types.h	637;"	d
HSX_QPI_PORT1_REGISTER_FUNC_ADDR	types.h	638;"	d
HSX_QPI_PORT2_REGISTER_DEV_ADDR	types.h	639;"	d
HSX_QPI_PORT2_REGISTER_FUNC_ADDR	types.h	640;"	d
HWRegister	cpucounters.h	/^class HWRegister$/;"	c
HWRegisterPtr	cpucounters.h	/^    typedef std::shared_ptr<HWRegister> HWRegisterPtr;$/;"	t	class:UncorePMU
H_EVENT_NAME	cpucounters.h	/^        H_EVENT_NAME,$/;"	e	enum:PCM::PerfmonField
Hlt	winring0/OlsApiInit.h	/^_Hlt Hlt = NULL;$/;"	v
HltPx	winring0/OlsApiInit.h	/^_HltPx HltPx = NULL;$/;"	v
HltTx	winring0/OlsApiInit.h	/^_HltTx HltTx = NULL;$/;"	v
IA32_CR_FIXED_CTR_CTRL	types.h	47;"	d
IA32_CR_PERF_GLOBAL_CTRL	types.h	46;"	d
IA32_DEBUGCTL	types.h	57;"	d
IA32_PERFEVTSEL0_ADDR	types.h	48;"	d
IA32_PERFEVTSEL1_ADDR	types.h	49;"	d
IA32_PERFEVTSEL2_ADDR	types.h	50;"	d
IA32_PERFEVTSEL3_ADDR	types.h	51;"	d
IA32_PMC0	types.h	59;"	d
IA32_PMC1	types.h	60;"	d
IA32_PMC2	types.h	61;"	d
IA32_PMC3	types.h	62;"	d
IA32_PQR_ASSOC	types.h	288;"	d
IA32_QM_CTR	types.h	290;"	d
IA32_QM_EVTSEL	types.h	289;"	d
IA32_TIME_STAMP_COUNTER	types.h	70;"	d
IGNORED	cpucounters.h	/^        IGNORED,$/;"	e	enum:PCM::PerfmonField
IIOCounterState	cpucounters.h	/^typedef SimpleCounterState IIOCounterState;$/;"	t
IIOEventsAvailable	cpucounters.h	/^    bool IIOEventsAvailable() const$/;"	f	class:PCM
IIOPMUCNTCTLRegister	types.h	/^    IIOPMUCNTCTLRegister() : value(0) { }$/;"	f	struct:IIOPMUCNTCTLRegister
IIOPMUCNTCTLRegister	types.h	/^struct IIOPMUCNTCTLRegister$/;"	s
IIO_CBDMA	cpucounters.h	/^        IIO_CBDMA = 0, \/\/ shared with DMI$/;"	e	enum:PCM::__anon12
IIO_MCP0	cpucounters.h	/^        IIO_MCP0 = 4,$/;"	e	enum:PCM::__anon12
IIO_MCP1	cpucounters.h	/^        IIO_MCP1 = 5,$/;"	e	enum:PCM::__anon12
IIO_MSR_PMON_CTL_CH_MASK	types.h	870;"	d
IIO_MSR_PMON_CTL_EDGE_DET	types.h	865;"	d
IIO_MSR_PMON_CTL_EN	types.h	867;"	d
IIO_MSR_PMON_CTL_EVENT	types.h	862;"	d
IIO_MSR_PMON_CTL_FC_MASK	types.h	871;"	d
IIO_MSR_PMON_CTL_INVERT	types.h	868;"	d
IIO_MSR_PMON_CTL_OV_EN	types.h	866;"	d
IIO_MSR_PMON_CTL_RST	types.h	864;"	d
IIO_MSR_PMON_CTL_THRESH	types.h	869;"	d
IIO_MSR_PMON_CTL_UMASK	types.h	863;"	d
IIO_PCIe0	cpucounters.h	/^        IIO_PCIe0 = 1,$/;"	e	enum:PCM::__anon12
IIO_PCIe1	cpucounters.h	/^        IIO_PCIe1 = 2,$/;"	e	enum:PCM::__anon12
IIO_PCIe2	cpucounters.h	/^        IIO_PCIe2 = 3,$/;"	e	enum:PCM::__anon12
IIO_STACK_COUNT	cpucounters.h	/^        IIO_STACK_COUNT = 6$/;"	e	enum:PCM::__anon12
IMC_DEV_IDS	cpucounters.cpp	/^static const uint32 IMC_DEV_IDS[] = {$/;"	v	file:
INST_RETIRED_ANY_ADDR	types.h	43;"	d
INVALID	cpucounters.h	/^        INVALID, \/* Use to parse invalid field *\/$/;"	e	enum:PCM::PerfmonField
INVALID_MODE	cpucounters.h	/^        INVALID_MODE                \/*!< Non-programmed mode *\/$/;"	e	enum:PCM::ProgramMode
INVERT	cpucounters.h	/^        INVERT,$/;"	e	enum:PCM::PerfmonField
IO_CTL_MSR_READ	WinMSRDriver/Win7/msrstruct.h	28;"	d
IO_CTL_MSR_WRITE	WinMSRDriver/Win7/msrstruct.h	29;"	d
IO_CTL_PCICFG_READ	WinMSRDriver/Win7/msrstruct.h	30;"	d
IO_CTL_PCICFG_WRITE	WinMSRDriver/Win7/msrstruct.h	31;"	d
IRQ	cpucounters.h	/^        IRQ,$/;"	e	enum:PCM::ChaPipelineQueue
IVTHSX_CBO_MSR_PMON_BOX_FILTER1_OPC	types.h	840;"	d
IVT_C0_MSR_PMON_BOX_FILTER1	types.h	793;"	d
IVYTOWN	cpucounters.h	/^        IVYTOWN = 62,$/;"	e	enum:PCM::SupportedCPUModels
IVY_BRIDGE	cpucounters.h	/^        IVY_BRIDGE = 58,$/;"	e	enum:PCM::SupportedCPUModels
InitOpenLibSys	winring0/OlsApiInit.h	/^BOOL InitOpenLibSys(HMODULE *hModule)$/;"	f
InitializeComponent	PCM-Service_Win/PCMInstaller.h	/^		void InitializeComponent(void)$/;"	f	class:PMUService::ProjectInstaller
InitializeComponent	PCM-Service_Win/PCMService.h	/^        void InitializeComponent(void)$/;"	f	class:PCMServiceNS::PCMService
InitializeOls	winring0/OlsApiInit.h	/^_InitializeOls InitializeOls = NULL;$/;"	v
InstRetiredAny	cpucounters.h	/^    uint64 InstRetiredAny;$/;"	m	class:BasicCounterState
InstallOpenLibSys	winring0/OlsApiInit.h	/^_InstallOpenLibSys InstallOpenLibSys = NULL;$/;"	v
InstanceLock	cpucounters.cpp	/^    InstanceLock(const bool global)$/;"	f	class:InstanceLock
InstanceLock	cpucounters.cpp	/^    InstanceLock(const bool global_) : globalSemaphoreName(PCM_INSTANCE_LOCK_SEMAPHORE_NAME), globalSemaphore(NULL), global(global_)$/;"	f	class:InstanceLock
InstanceLock	cpucounters.cpp	/^class InstanceLock$/;"	c	file:
InvariantTSC	cpucounters.h	/^    uint64 InvariantTSC;    \/\/ invariant time stamp counter$/;"	m	class:ServerUncorePowerState
InvariantTSC	cpucounters.h	/^    uint64 InvariantTSC; \/\/ invariant time stamp counter$/;"	m	class:BasicCounterState
IsCpuid	winring0/OlsApiInit.h	/^_IsCpuid IsCpuid = NULL;$/;"	v
IsMsr	winring0/OlsApiInit.h	/^_IsMsr IsMsr = NULL;$/;"	v
IsTsc	winring0/OlsApiInit.h	/^_IsTsc IsTsc = NULL;$/;"	v
ItoM	cpucounters.h	/^        ItoM = 0x1C8,      \/\/ Request Invalidate Line; share the same code for CPU, use tid to filter PCIe only traffic$/;"	e	enum:PCM::PCIeEventCode
ItoM	pcm-pcie.cpp	/^    uint64 ItoM;      \/\/ Request Invalidate Line [PCIe write full cache line]$/;"	m	struct:__anon42	file:
ItoMtid	cpucounters.h	/^        ItoMtid = 0x3E,$/;"	e	enum:PCM::CBoEventTid
JAKETOWN	cpucounters.h	/^        JAKETOWN = 45,$/;"	e	enum:PCM::SupportedCPUModels
JKTIVT_CBO_MSR_STEP	types.h	791;"	d
JKTIVT_MC0_CH0_REGISTER_DEV_ADDR	types.h	491;"	d
JKTIVT_MC0_CH0_REGISTER_FUNC_ADDR	types.h	495;"	d
JKTIVT_MC0_CH1_REGISTER_DEV_ADDR	types.h	492;"	d
JKTIVT_MC0_CH1_REGISTER_FUNC_ADDR	types.h	496;"	d
JKTIVT_MC0_CH2_REGISTER_DEV_ADDR	types.h	493;"	d
JKTIVT_MC0_CH2_REGISTER_FUNC_ADDR	types.h	497;"	d
JKTIVT_MC0_CH3_REGISTER_DEV_ADDR	types.h	494;"	d
JKTIVT_MC0_CH3_REGISTER_FUNC_ADDR	types.h	498;"	d
JKTIVT_MC1_CH0_REGISTER_DEV_ADDR	types.h	500;"	d
JKTIVT_MC1_CH0_REGISTER_FUNC_ADDR	types.h	504;"	d
JKTIVT_MC1_CH1_REGISTER_DEV_ADDR	types.h	501;"	d
JKTIVT_MC1_CH1_REGISTER_FUNC_ADDR	types.h	505;"	d
JKTIVT_MC1_CH2_REGISTER_DEV_ADDR	types.h	502;"	d
JKTIVT_MC1_CH2_REGISTER_FUNC_ADDR	types.h	506;"	d
JKTIVT_MC1_CH3_REGISTER_DEV_ADDR	types.h	503;"	d
JKTIVT_MC1_CH3_REGISTER_FUNC_ADDR	types.h	507;"	d
JKTIVT_PCU_MSR_PMON_BOX_CTL_ADDR	types.h	718;"	d
JKTIVT_PCU_MSR_PMON_BOX_FILTER_ADDR	types.h	711;"	d
JKTIVT_PCU_MSR_PMON_CTL0_ADDR	types.h	716;"	d
JKTIVT_PCU_MSR_PMON_CTL1_ADDR	types.h	715;"	d
JKTIVT_PCU_MSR_PMON_CTL2_ADDR	types.h	714;"	d
JKTIVT_PCU_MSR_PMON_CTL3_ADDR	types.h	713;"	d
JKTIVT_PCU_MSR_PMON_CTR0_ADDR	types.h	709;"	d
JKTIVT_PCU_MSR_PMON_CTR1_ADDR	types.h	708;"	d
JKTIVT_PCU_MSR_PMON_CTR2_ADDR	types.h	707;"	d
JKTIVT_PCU_MSR_PMON_CTR3_ADDR	types.h	706;"	d
JKTIVT_QPI_PORT0_REGISTER_DEV_ADDR	types.h	628;"	d
JKTIVT_QPI_PORT0_REGISTER_FUNC_ADDR	types.h	629;"	d
JKTIVT_QPI_PORT1_REGISTER_DEV_ADDR	types.h	630;"	d
JKTIVT_QPI_PORT1_REGISTER_FUNC_ADDR	types.h	631;"	d
JKTIVT_QPI_PORT2_REGISTER_DEV_ADDR	types.h	632;"	d
JKTIVT_QPI_PORT2_REGISTER_FUNC_ADDR	types.h	633;"	d
JKT_C0_MSR_PMON_BOX_CTL	types.h	789;"	d
JKT_C0_MSR_PMON_BOX_FILTER	types.h	784;"	d
JKT_C0_MSR_PMON_CTL0	types.h	788;"	d
JKT_C0_MSR_PMON_CTL1	types.h	787;"	d
JKT_C0_MSR_PMON_CTL2	types.h	786;"	d
JKT_C0_MSR_PMON_CTL3	types.h	785;"	d
JKT_C0_MSR_PMON_CTR0	types.h	783;"	d
JKT_C0_MSR_PMON_CTR1	types.h	782;"	d
JKT_C0_MSR_PMON_CTR2	types.h	781;"	d
JKT_C0_MSR_PMON_CTR3	types.h	780;"	d
JKT_CBO_MSR_PMON_BOX_FILTER_OPC	types.h	839;"	d
KBL	cpucounters.h	/^        KBL = 158,$/;"	e	enum:PCM::SupportedCPUModels
KBL_1	cpucounters.h	/^        KBL_1 = 142,$/;"	e	enum:PCM::SupportedCPUModels
KNL	cpucounters.h	/^        KNL = 87,$/;"	e	enum:PCM::SupportedCPUModels
KNL_CHA0_MSR_PMON_BOX_CTL	types.h	821;"	d
KNL_CHA0_MSR_PMON_BOX_CTL1	types.h	822;"	d
KNL_CHA0_MSR_PMON_BOX_CTRL	types.h	814;"	d
KNL_CHA0_MSR_PMON_BOX_STATUS	types.h	823;"	d
KNL_CHA0_MSR_PMON_CTR0	types.h	825;"	d
KNL_CHA0_MSR_PMON_CTR1	types.h	826;"	d
KNL_CHA0_MSR_PMON_CTR2	types.h	827;"	d
KNL_CHA0_MSR_PMON_CTR3	types.h	828;"	d
KNL_CHA0_MSR_PMON_EVT_SEL0	types.h	816;"	d
KNL_CHA0_MSR_PMON_EVT_SEL1	types.h	817;"	d
KNL_CHA0_MSR_PMON_EVT_SEL2	types.h	818;"	d
KNL_CHA0_MSR_PMON_EVT_SEL3	types.h	819;"	d
KNL_CHA_MSR_STEP	types.h	813;"	d
KNL_EDC0_ECLK_REGISTER_DEV_ADDR	types.h	560;"	d
KNL_EDC0_ECLK_REGISTER_FUNC_ADDR	types.h	561;"	d
KNL_EDC1_ECLK_REGISTER_DEV_ADDR	types.h	562;"	d
KNL_EDC1_ECLK_REGISTER_FUNC_ADDR	types.h	563;"	d
KNL_EDC2_ECLK_REGISTER_DEV_ADDR	types.h	564;"	d
KNL_EDC2_ECLK_REGISTER_FUNC_ADDR	types.h	565;"	d
KNL_EDC3_ECLK_REGISTER_DEV_ADDR	types.h	566;"	d
KNL_EDC3_ECLK_REGISTER_FUNC_ADDR	types.h	567;"	d
KNL_EDC4_ECLK_REGISTER_DEV_ADDR	types.h	568;"	d
KNL_EDC4_ECLK_REGISTER_FUNC_ADDR	types.h	569;"	d
KNL_EDC5_ECLK_REGISTER_DEV_ADDR	types.h	570;"	d
KNL_EDC5_ECLK_REGISTER_FUNC_ADDR	types.h	571;"	d
KNL_EDC6_ECLK_REGISTER_DEV_ADDR	types.h	572;"	d
KNL_EDC6_ECLK_REGISTER_FUNC_ADDR	types.h	573;"	d
KNL_EDC7_ECLK_REGISTER_DEV_ADDR	types.h	574;"	d
KNL_EDC7_ECLK_REGISTER_FUNC_ADDR	types.h	575;"	d
KNL_MC0_CH0_REGISTER_DEV_ADDR	types.h	527;"	d
KNL_MC0_CH0_REGISTER_FUNC_ADDR	types.h	530;"	d
KNL_MC0_CH1_REGISTER_DEV_ADDR	types.h	528;"	d
KNL_MC0_CH1_REGISTER_FUNC_ADDR	types.h	531;"	d
KNL_MC0_CH2_REGISTER_DEV_ADDR	types.h	529;"	d
KNL_MC0_CH2_REGISTER_FUNC_ADDR	types.h	532;"	d
KNL_MC1_CH0_REGISTER_DEV_ADDR	types.h	553;"	d
KNL_MC1_CH0_REGISTER_FUNC_ADDR	types.h	556;"	d
KNL_MC1_CH1_REGISTER_DEV_ADDR	types.h	554;"	d
KNL_MC1_CH1_REGISTER_FUNC_ADDR	types.h	557;"	d
KNL_MC1_CH2_REGISTER_DEV_ADDR	types.h	555;"	d
KNL_MC1_CH2_REGISTER_FUNC_ADDR	types.h	558;"	d
KNX_EDC_CH_PCI_PMON_BOX_CTL_ADDR	types.h	583;"	d
KNX_EDC_CH_PCI_PMON_CTL0_ADDR	types.h	604;"	d
KNX_EDC_CH_PCI_PMON_CTL1_ADDR	types.h	603;"	d
KNX_EDC_CH_PCI_PMON_CTL2_ADDR	types.h	602;"	d
KNX_EDC_CH_PCI_PMON_CTL3_ADDR	types.h	601;"	d
KNX_EDC_CH_PCI_PMON_CTR0_ADDR	types.h	626;"	d
KNX_EDC_CH_PCI_PMON_CTR1_ADDR	types.h	625;"	d
KNX_EDC_CH_PCI_PMON_CTR2_ADDR	types.h	624;"	d
KNX_EDC_CH_PCI_PMON_CTR3_ADDR	types.h	623;"	d
KNX_EDC_CH_PCI_PMON_FIXED_CTL_ADDR	types.h	600;"	d
KNX_EDC_CH_PCI_PMON_FIXED_CTR_ADDR	types.h	622;"	d
KNX_EDC_ECLK_PMON_UNIT_CTL_REG	types.h	605;"	d
KNX_MC_CH_PCI_PMON_BOX_CTL_ADDR	types.h	582;"	d
KNX_MC_CH_PCI_PMON_CTL0_ADDR	types.h	597;"	d
KNX_MC_CH_PCI_PMON_CTL1_ADDR	types.h	596;"	d
KNX_MC_CH_PCI_PMON_CTL2_ADDR	types.h	595;"	d
KNX_MC_CH_PCI_PMON_CTL3_ADDR	types.h	594;"	d
KNX_MC_CH_PCI_PMON_CTR0_ADDR	types.h	619;"	d
KNX_MC_CH_PCI_PMON_CTR1_ADDR	types.h	618;"	d
KNX_MC_CH_PCI_PMON_CTR2_ADDR	types.h	617;"	d
KNX_MC_CH_PCI_PMON_CTR3_ADDR	types.h	616;"	d
KNX_MC_CH_PCI_PMON_FIXED_CTL_ADDR	types.h	593;"	d
KNX_MC_CH_PCI_PMON_FIXED_CTR_ADDR	types.h	615;"	d
L1	pcm-latency.cpp	42;"	d	file:
L2	pcm-latency.cpp	43;"	d	file:
L2CacheHitRatioAvailable	cpucounters.h	/^    bool L2CacheHitRatioAvailable;$/;"	m	class:PCM
L2CacheHitsAvailable	cpucounters.h	/^    bool L2CacheHitsAvailable;$/;"	m	class:PCM
L2CacheMissesAvailable	cpucounters.h	/^    bool L2CacheMissesAvailable;$/;"	m	class:PCM
L2Hit	cpucounters.h	/^        uint64 L2Hit;$/;"	m	union:BasicCounterState::__anon18
L2HitM	cpucounters.h	/^        uint64 L2HitM;$/;"	m	union:BasicCounterState::__anon17
L3CacheHitRatioAvailable	cpucounters.h	/^    bool L3CacheHitRatioAvailable;$/;"	m	class:PCM
L3CacheHitsAvailable	cpucounters.h	/^    bool L3CacheHitsAvailable;$/;"	m	class:PCM
L3CacheHitsNoSnoopAvailable	cpucounters.h	/^    bool L3CacheHitsNoSnoopAvailable;$/;"	m	class:PCM
L3CacheHitsSnoopAvailable	cpucounters.h	/^    bool L3CacheHitsSnoopAvailable;$/;"	m	class:PCM
L3CacheMissesAvailable	cpucounters.h	/^    bool L3CacheMissesAvailable;$/;"	m	class:PCM
L3CacheOccupancyMetricAvailable	cpucounters.cpp	/^bool PCM::L3CacheOccupancyMetricAvailable() const$/;"	f	class:PCM
L3Miss	cpucounters.h	/^        uint64 L3Miss;$/;"	m	union:BasicCounterState::__anon15
L3Occupancy	cpucounters.h	/^    uint64 L3Occupancy;$/;"	m	class:BasicCounterState
L3QOSMetricAvailable	cpucounters.cpp	/^bool PCM::L3QOSMetricAvailable() const$/;"	f	class:PCM
L3ScalingFactor	cpucounters.h	/^    uint32 L3ScalingFactor;$/;"	m	class:PCM
L3UnsharedHit	cpucounters.h	/^        uint64 L3UnsharedHit;$/;"	m	union:BasicCounterState::__anon16
LDFLAGS	daemon/daemon/test/Makefile	/^LDFLAGS=$/;"	m
LIB	Makefile	/^LIB= -lpthread -lc++$/;"	m
LIB	Makefile	/^LIB= -lpthread MacMSRDriver\/build\/Release\/libPcmMsr.dylib $/;"	m
LIB	Makefile	/^LIB= -pthread -lrt$/;"	m
LIBS	daemon/client/Debug/objects.mk	/^LIBS :=$/;"	m
LIBS	daemon/daemon/Debug/objects.mk	/^LIBS := -lpthread -lrt$/;"	m
LLCReadMissLatencyMetricsAvailable	cpucounters.h	/^    bool LLCReadMissLatencyMetricsAvailable() const$/;"	f	class:PCM
LatencyMetricsAvailable	cpucounters.h	/^    bool LatencyMetricsAvailable() const$/;"	f	class:PCM
Log	winpmem/winpmem.cpp	/^void WinPmem::Log(const TCHAR *message, ...) {$/;"	f	class:WinPmem
LogError	winpmem/winpmem.cpp	/^void WinPmem::LogError(TCHAR *message) {$/;"	f	class:WinPmem
M2MCounter	cpucounters.h	/^    std::array<std::array<uint64, maxCounters>, maxControllers> M2MCounter; \/\/ M2M\/iMC boxes x counter$/;"	m	class:ServerUncorePowerState
M2MRegisterLocation	cpucounters.h	/^    std::vector<std::pair<uint32, uint32> > M2MRegisterLocation; \/\/ M2MRegisterLocation: (device, function)$/;"	m	class:ServerPCICFGUncore
M2M_DEV_IDS	cpucounters.cpp	/^static const uint32 M2M_DEV_IDS[] = {$/;"	v	file:
M2M_NM_read_hit_rate	pcm-memory.cpp	/^    float M2M_NM_read_hit_rate[max_sockets][max_imc_controllers];$/;"	m	struct:memdata	file:
M2M_PCI_PMON_BOX_CTL_ADDR	types.h	658;"	d
M2M_PCI_PMON_CTL0_ADDR	types.h	660;"	d
M2M_PCI_PMON_CTL1_ADDR	types.h	661;"	d
M2M_PCI_PMON_CTL2_ADDR	types.h	662;"	d
M2M_PCI_PMON_CTL3_ADDR	types.h	663;"	d
M2M_PCI_PMON_CTL_EDGE_DET	types.h	876;"	d
M2M_PCI_PMON_CTL_EN	types.h	878;"	d
M2M_PCI_PMON_CTL_EVENT	types.h	873;"	d
M2M_PCI_PMON_CTL_INVERT	types.h	879;"	d
M2M_PCI_PMON_CTL_OV_EN	types.h	877;"	d
M2M_PCI_PMON_CTL_RST	types.h	875;"	d
M2M_PCI_PMON_CTL_THRESH	types.h	880;"	d
M2M_PCI_PMON_CTL_UMASK	types.h	874;"	d
M2M_PCI_PMON_CTR0_ADDR	types.h	665;"	d
M2M_PCI_PMON_CTR1_ADDR	types.h	666;"	d
M2M_PCI_PMON_CTR2_ADDR	types.h	667;"	d
M2M_PCI_PMON_CTR3_ADDR	types.h	668;"	d
M2Mbus	cpucounters.h	/^    int32 iMCbus,UPIbus,M2Mbus;$/;"	m	class:ServerPCICFGUncore
MAX_CORES	pcm-core.cpp	48;"	d	file:
MAX_CORES	pcm-latency.cpp	54;"	d	file:
MAX_CORES	pcm.cpp	47;"	d	file:
MAX_CPU_CORES	daemon/daemon/common.h	24;"	d
MAX_C_STATE	cpucounters.h	/^    enum { MAX_C_STATE = 10 }; \/\/ max C-state on Intel architecture$/;"	e	enum:PCM::__anon11
MAX_SOCKETS	daemon/daemon/common.h	25;"	d
MB0_MSR_PERF_GLOBAL_CTL	types.h	203;"	d
MB0_MSR_PMU_CNT_0	types.h	204;"	d
MB0_MSR_PMU_CNT_1	types.h	206;"	d
MB0_MSR_PMU_CNT_CTL_0	types.h	205;"	d
MB0_MSR_PMU_CNT_CTL_1	types.h	207;"	d
MB0_MSR_PMU_ZDP_CTL_FVC	types.h	208;"	d
MB1_MSR_PERF_GLOBAL_CTL	types.h	211;"	d
MB1_MSR_PMU_CNT_0	types.h	212;"	d
MB1_MSR_PMU_CNT_1	types.h	214;"	d
MB1_MSR_PMU_CNT_CTL_0	types.h	213;"	d
MB1_MSR_PMU_CNT_CTL_1	types.h	215;"	d
MB1_MSR_PMU_ZDP_CTL_FVC	types.h	216;"	d
MBLCounter	width_extender.h	/^        MBLCounter(std::shared_ptr<SafeMsrHandle> msr_) : msr(msr_) { }$/;"	f	struct:CounterWidthExtender::MBLCounter
MBLCounter	width_extender.h	/^    struct MBLCounter : public AbstractRawCounter$/;"	s	class:CounterWidthExtender
MBTCounter	width_extender.h	/^        MBTCounter(std::shared_ptr<SafeMsrHandle> msr_) : msr(msr_) { }$/;"	f	struct:CounterWidthExtender::MBTCounter
MBTCounter	width_extender.h	/^    struct MBTCounter : public AbstractRawCounter$/;"	s	class:CounterWidthExtender
MCCounter	cpucounters.h	/^    std::array<std::array<uint64, maxCounters>, maxChannels> MCCounter; \/\/ channel X counter$/;"	m	class:ServerUncorePowerState
MCDRAMClocks	cpucounters.h	/^    std::array<uint64, maxChannels> MCDRAMClocks;$/;"	m	class:ServerUncorePowerState
MCDRAMmemoryTrafficMetricsAvailable	cpucounters.h	/^    bool MCDRAMmemoryTrafficMetricsAvailable() const$/;"	f	class:PCM
MCFGHeader	types.h	/^struct MCFGHeader$/;"	s
MCFGRecord	types.h	/^struct MCFGRecord$/;"	s
MCRegisterLocation	cpucounters.h	/^    std::vector<std::vector< std::pair<uint32, uint32> > > MCRegisterLocation; \/\/ MCRegisterLocation[controller]: (device, function)$/;"	m	class:ServerPCICFGUncore
MC_CH_PCI_PMON_CTL_EDGE_DET	types.h	749;"	d
MC_CH_PCI_PMON_CTL_EN	types.h	750;"	d
MC_CH_PCI_PMON_CTL_EVENT	types.h	746;"	d
MC_CH_PCI_PMON_CTL_INVERT	types.h	751;"	d
MC_CH_PCI_PMON_CTL_RST	types.h	748;"	d
MC_CH_PCI_PMON_CTL_THRESH	types.h	752;"	d
MC_CH_PCI_PMON_CTL_UMASK	types.h	747;"	d
MC_CH_PCI_PMON_FIXED_CTL_EN	types.h	743;"	d
MC_CH_PCI_PMON_FIXED_CTL_RST	types.h	742;"	d
MEMORY_MAX_IMC_CHANNELS	daemon/daemon/common.h	26;"	d
MEMORY_PARTIAL	daemon/daemon/common.h	33;"	d
MEMORY_READ	daemon/daemon/common.h	27;"	d
MEMORY_READ_RANK_A	daemon/daemon/common.h	29;"	d
MEMORY_READ_RANK_B	daemon/daemon/common.h	31;"	d
MEMORY_WRITE	daemon/daemon/common.h	28;"	d
MEMORY_WRITE_RANK_A	daemon/daemon/common.h	30;"	d
MEMORY_WRITE_RANK_B	daemon/daemon/common.h	32;"	d
MEM_LOAD_RETIRED_L2_HITM_EVTNR	types.h	81;"	d
MEM_LOAD_RETIRED_L2_HITM_UMASK	types.h	82;"	d
MEM_LOAD_RETIRED_L2_HIT_EVTNR	types.h	84;"	d
MEM_LOAD_RETIRED_L2_HIT_UMASK	types.h	85;"	d
MEM_LOAD_RETIRED_L3_MISS_EVTNR	types.h	75;"	d
MEM_LOAD_RETIRED_L3_MISS_UMASK	types.h	76;"	d
MEM_LOAD_RETIRED_L3_UNSHAREDHIT_EVTNR	types.h	78;"	d
MEM_LOAD_RETIRED_L3_UNSHAREDHIT_UMASK	types.h	79;"	d
MEM_LOAD_UOPS_LLC_HIT_RETIRED_XSNP_EVTNR	types.h	98;"	d
MEM_LOAD_UOPS_LLC_HIT_RETIRED_XSNP_HITM_EVTNR	types.h	95;"	d
MEM_LOAD_UOPS_LLC_HIT_RETIRED_XSNP_HITM_UMASK	types.h	96;"	d
MEM_LOAD_UOPS_LLC_HIT_RETIRED_XSNP_NONE_EVTNR	types.h	92;"	d
MEM_LOAD_UOPS_LLC_HIT_RETIRED_XSNP_NONE_UMASK	types.h	93;"	d
MEM_LOAD_UOPS_LLC_HIT_RETIRED_XSNP_UMASK	types.h	99;"	d
MEM_LOAD_UOPS_MISC_RETIRED_LLC_MISS_EVTNR	types.h	89;"	d
MEM_LOAD_UOPS_MISC_RETIRED_LLC_MISS_UMASK	types.h	90;"	d
MEM_LOAD_UOPS_RETIRED_L2_HIT_EVTNR	types.h	101;"	d
MEM_LOAD_UOPS_RETIRED_L2_HIT_UMASK	types.h	102;"	d
MMIORange	mmio.cpp	/^MMIORange::MMIORange(uint64 baseAddr_, uint64 \/* size_ *\/, bool readonly_) : startAddr(baseAddr_), readonly(readonly_)$/;"	f	class:MMIORange
MMIORange	mmio.cpp	/^MMIORange::MMIORange(uint64 baseAddr_, uint64 size_, bool readonly_) :$/;"	f	class:MMIORange
MMIORange	mmio.cpp	/^MMIORange::MMIORange(uint64 physical_address, uint64 size_, bool readonly_) :$/;"	f	class:MMIORange
MMIORange	mmio.h	/^class MMIORange$/;"	c
MMIORegister32	cpucounters.h	/^    MMIORegister32(const std::shared_ptr<MMIORange> & handle_, size_t offset_) :$/;"	f	class:MMIORegister32
MMIORegister32	cpucounters.h	/^class MMIORegister32 : public HWRegister$/;"	c
MMIORegister64	cpucounters.h	/^    MMIORegister64(const std::shared_ptr<MMIORange> & handle_, size_t offset_) :$/;"	f	class:MMIORegister64
MMIORegister64	cpucounters.h	/^class MMIORegister64 : public HWRegister$/;"	c
MSR	cpucounters.h	/^    std::vector<std::shared_ptr<SafeMsrHandle> > MSR;$/;"	m	class:PCM
MSRACCESSOR_HEADER	MacMSRDriver/MSRAccessorPublic.h	16;"	d
MSRAccessDenied	cpucounters.h	/^        MSRAccessDenied = 1,$/;"	e	enum:PCM::ErrorCode
MSRAccessor	MacMSRDriver/MSRAccessor.cpp	/^MSRAccessor::MSRAccessor(){$/;"	f	class:MSRAccessor
MSRAccessor	MacMSRDriver/MSRAccessor.h	/^class MSRAccessor{$/;"	c
MSRAccessor	MacMSRDriver/MSRAccessorPublic.h	/^class MSRAccessor{$/;"	c
MSRRegister	cpucounters.h	/^    MSRRegister(const std::shared_ptr<SafeMsrHandle> & handle_, size_t offset_) :$/;"	f	class:MSRRegister
MSRRegister	cpucounters.h	/^class MSRRegister : public HWRegister$/;"	c
MSRUnload	WinMSRDriver/Win7/msrmain.c	/^DRIVER_UNLOAD MSRUnload;$/;"	v
MSRUnload	WinMSRDriver/Win7/msrmain.c	/^VOID MSRUnload(PDRIVER_OBJECT DriverObject)$/;"	f
MSR_CORE_C3_RESIDENCY	types.h	927;"	d
MSR_CORE_C6_RESIDENCY	types.h	928;"	d
MSR_CORE_C7_RESIDENCY	types.h	929;"	d
MSR_DEV_TYPE	WinMSRDriver/Win7/msrstruct.h	26;"	d
MSR_DRAM_ENERGY_STATUS	types.h	921;"	d
MSR_IA32_ARCH_CAPABILITIES	types.h	934;"	d
MSR_IA32_BIOS_SIGN_ID	types.h	919;"	d
MSR_IA32_SPEC_CTRL	types.h	933;"	d
MSR_IA32_THERM_STATUS	types.h	916;"	d
MSR_INCLUDED	WinMSRDriver/Win7/msr.h	2;"	d
MSR_KERNEL_SHARED	MacMSRDriver/MSRKernel.h	18;"	d
MSR_OFFCORE_RSP0	types.h	64;"	d
MSR_OFFCORE_RSP1	types.h	65;"	d
MSR_PACKAGE_THERM_STATUS	types.h	915;"	d
MSR_PERF_GLOBAL_INUSE	types.h	931;"	d
MSR_PKG_C2_RESIDENCY	types.h	923;"	d
MSR_PKG_C3_RESIDENCY	types.h	924;"	d
MSR_PKG_C6_RESIDENCY	types.h	925;"	d
MSR_PKG_C7_RESIDENCY	types.h	926;"	d
MSR_PKG_ENERGY_STATUS	types.h	482;"	d
MSR_PKG_POWER_INFO	types.h	484;"	d
MSR_RAPL_POWER_UNIT	types.h	483;"	d
MSR_Request	WinMSRDriver/Win7/msrstruct.h	/^struct MSR_Request$/;"	s
MSR_SMI_COUNT	types.h	477;"	d
MSR_STRUCT_HEADER	WinMSRDriver/Win7/msrstruct.h	19;"	d
MSR_TSX_FORCE_ABORT	types.h	936;"	d
MSR_UNCORE_PERFEVTSEL0_ADDR	types.h	159;"	d
MSR_UNCORE_PERFEVTSEL1_ADDR	types.h	160;"	d
MSR_UNCORE_PERFEVTSEL2_ADDR	types.h	161;"	d
MSR_UNCORE_PERFEVTSEL3_ADDR	types.h	162;"	d
MSR_UNCORE_PERFEVTSEL4_ADDR	types.h	163;"	d
MSR_UNCORE_PERFEVTSEL5_ADDR	types.h	164;"	d
MSR_UNCORE_PERFEVTSEL6_ADDR	types.h	165;"	d
MSR_UNCORE_PERFEVTSEL7_ADDR	types.h	166;"	d
MSR_UNCORE_PERF_GLOBAL_CTRL_ADDR	types.h	157;"	d
MSR_UNCORE_PMC0	types.h	169;"	d
MSR_UNCORE_PMC1	types.h	170;"	d
MSR_UNCORE_PMC2	types.h	171;"	d
MSR_UNCORE_PMC3	types.h	172;"	d
MSR_UNCORE_PMC4	types.h	173;"	d
MSR_UNCORE_PMC5	types.h	174;"	d
MSR_UNCORE_PMC6	types.h	175;"	d
MSR_UNCORE_PMC7	types.h	176;"	d
MULTIPLIER	cpucounters.h	/^        MULTIPLIER,$/;"	e	enum:PCM::PerfmonField
MUTEX_HEADER_	mutex.h	2;"	d
MeasureThread	PCM-Service_Win/PCMService.h	/^    ref class MeasureThread$/;"	c	namespace:PCMServiceNS
MemTestParam	cpucounters.h	/^    typedef std::pair<size_t, std::vector<uint64 *> > MemTestParam;$/;"	t	class:ServerPCICFGUncore
MemoryBWLocal	cpucounters.h	/^    uint64 MemoryBWLocal;$/;"	m	class:BasicCounterState
MemoryBWTotal	cpucounters.h	/^    uint64 MemoryBWTotal;$/;"	m	class:BasicCounterState
Memory_intensive_task	readmem.cpp	/^void Memory_intensive_task(DS & ds)$/;"	f
Memory_intensive_task	realtime.cpp	/^void Memory_intensive_task(DS & ds)$/;"	f
MetricCoreBaseIpc	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreBaseIpc = gcnew String(L"Base ticks IPC");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreClocktick	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreClocktick = gcnew String(L"Clockticks");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreFreqNom	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreFreqNom = gcnew String(L"Nominal Frequency");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreFreqRel	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreFreqRel = gcnew String(L"Relative Frequency (%)");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreHeadroom	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreHeadroom = gcnew String(L"Thermal Headroom below TjMax");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreIpc	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreIpc = gcnew String(L"Instructions Per Clocktick (IPC)");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreMissL2	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreMissL2 = gcnew String(L"L2 Cache Misses");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreMissL3	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreMissL3 = gcnew String(L"L3 Cache Misses");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreResC0	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreResC0 = gcnew String(L"core C0-state residency (%)");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreResC3	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreResC3 = gcnew String(L"core C3-state residency (%)");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreResC6	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreResC6 = gcnew String(L"core C6-state residency (%)");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreResC7	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreResC7 = gcnew String(L"core C7-state residency (%)");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreRetired	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreRetired = gcnew String(L"Instructions Retired");$/;"	m	class:PCMServiceNS::MeasureThread
MetricQpiBand	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricQpiBand = gcnew String(L"QPI Link Bandwidth");$/;"	m	class:PCMServiceNS::MeasureThread
MetricSocketBandRead	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricSocketBandRead = gcnew String(L"Memory Read Bandwidth");$/;"	m	class:PCMServiceNS::MeasureThread
MetricSocketBandWrite	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricSocketBandWrite = gcnew String(L"Memory Write Bandwidth");$/;"	m	class:PCMServiceNS::MeasureThread
MetricSocketEnergyDram	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricSocketEnergyDram = gcnew String(L"DRAM\/Memory Consumed Energy");$/;"	m	class:PCMServiceNS::MeasureThread
MetricSocketEnergyPack	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricSocketEnergyPack = gcnew String(L"Package\/Socket Consumed Energy");$/;"	m	class:PCMServiceNS::MeasureThread
MetricSocketResC2	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricSocketResC2 = gcnew String(L"package C2-state residency (%)");$/;"	m	class:PCMServiceNS::MeasureThread
MetricSocketResC3	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricSocketResC3 = gcnew String(L"package C3-state residency (%)");$/;"	m	class:PCMServiceNS::MeasureThread
MetricSocketResC6	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricSocketResC6 = gcnew String(L"package C6-state residency (%)");$/;"	m	class:PCMServiceNS::MeasureThread
MetricSocketResC7	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricSocketResC7 = gcnew String(L"package C7-state residency (%)");$/;"	m	class:PCMServiceNS::MeasureThread
Mode	daemon/daemon/daemon.h	/^	enum Mode { DIFFERENCE, ABSOLUTE };$/;"	g	namespace:PCMDaemon
MsrHandle	msr.cpp	/^MsrHandle::MsrHandle(uint32 cpu) : cpu_id(cpu)$/;"	f	class:MsrHandle
MsrHandle	msr.cpp	/^MsrHandle::MsrHandle(uint32 cpu) : fd(-1), cpu_id(cpu)$/;"	f	class:MsrHandle
MsrHandle	msr.cpp	/^MsrHandle::MsrHandle(uint32 cpu)$/;"	f	class:MsrHandle
MsrHandle	msr.h	/^class MsrHandle$/;"	c
MsrHandleCounter	width_extender.h	/^        MsrHandleCounter(std::shared_ptr<SafeMsrHandle> msr_, uint64 msr_addr_) : msr(msr_), msr_addr(msr_addr_) { }$/;"	f	struct:CounterWidthExtender::MsrHandleCounter
MsrHandleCounter	width_extender.h	/^    struct MsrHandleCounter : public AbstractRawCounter$/;"	s	class:CounterWidthExtender
Mutex	cpucounters.cpp	/^    HANDLE Mutex;$/;"	m	class:InstanceLock	file:
Mutex	mutex.h	/^        Mutex()$/;"	f	class:PCM_Util::Mutex
Mutex	mutex.h	/^    class Mutex {$/;"	c	namespace:PCM_Util
MySleep	utils.h	/^inline void MySleep(int delay)$/;"	f
MySleepMs	utils.h	/^inline void MySleepMs(int delay_ms)$/;"	f
MySleepUs	utils.h	/^inline void MySleepUs(int delay_us)$/;"	f
MySystem	utils.cpp	/^void MySystem(char * sysCmd, char ** sysArgv)$/;"	f
NEHALEM	cpucounters.h	/^        NEHALEM = 30,$/;"	e	enum:PCM::SupportedCPUModels
NEHALEM_EP	cpucounters.h	/^        NEHALEM_EP = 26,$/;"	e	enum:PCM::SupportedCPUModels
NEHALEM_EX	cpucounters.h	/^        NEHALEM_EX = 46,$/;"	e	enum:PCM::SupportedCPUModels
NM_HIT	pcm-memory.cpp	51;"	d	file:
NOMINMAX	cpucounters.h	53;"	d
NT_DEVICE_NAME	WinMSRDriver/Win7/msrmain.c	28;"	d	file:
NUM_CORES	msrtest.cpp	21;"	d	file:
NUM_SAMPLES	pcm-pcie.cpp	295;"	d	file:
N_HLE_POS	pcm-tsx.cpp	119;"	d	file:
N_RTM_POS	pcm-tsx.cpp	120;"	d	file:
None	cpucounters.h	/^        None,$/;"	e	enum:PCM::ChaPipelineQueue
OBJECTS	daemon/daemon/test/Makefile	/^OBJECTS=$(SOURCES:.cpp=.o)$/;"	m
OBJS	Makefile	/^OBJS = $(COMMON_OBJS) $(EXE_OBJS)$/;"	m
OBJS	daemon/client/Debug/sources.mk	/^OBJS := $/;"	m
OBJS	daemon/daemon/Debug/sources.mk	/^OBJS := $/;"	m
OBJ_SRCS	daemon/client/Debug/sources.mk	/^OBJ_SRCS := $/;"	m
OBJ_SRCS	daemon/daemon/Debug/sources.mk	/^OBJ_SRCS := $/;"	m
OEMID	types.h	/^    char OEMID[6];$/;"	m	struct:MCFGHeader
OEMRevision	types.h	/^    unsigned OEMRevision;$/;"	m	struct:MCFGHeader
OEMTableID	types.h	/^    char OEMTableID[8];$/;"	m	struct:MCFGHeader
OFFCORE_RESPONSE_0_EVTNR	types.h	147;"	d
OFFCORE_RESPONSE_0_UMASK	types.h	149;"	d
OFFCORE_RESPONSE_1_EVTNR	types.h	148;"	d
OFFCORE_RESPONSE_1_UMASK	types.h	150;"	d
OLS_DLL_DRIVER_NOT_FOUND	winring0/OlsDef.h	21;"	d
OLS_DLL_DRIVER_NOT_LOADED	winring0/OlsDef.h	20;"	d
OLS_DLL_DRIVER_NOT_LOADED_ON_NETWORK	winring0/OlsDef.h	23;"	d
OLS_DLL_DRIVER_UNLOADED	winring0/OlsDef.h	22;"	d
OLS_DLL_NO_ERROR	winring0/OlsDef.h	18;"	d
OLS_DLL_UNKNOWN_ERROR	winring0/OlsDef.h	24;"	d
OLS_DLL_UNSUPPORTED_PLATFORM	winring0/OlsDef.h	19;"	d
OLS_DRIVER_TYPE_UNKNOWN	winring0/OlsDef.h	32;"	d
OLS_DRIVER_TYPE_WIN_9X	winring0/OlsDef.h	33;"	d
OLS_DRIVER_TYPE_WIN_NT	winring0/OlsDef.h	34;"	d
OLS_DRIVER_TYPE_WIN_NT4	winring0/OlsDef.h	35;"	d
OLS_DRIVER_TYPE_WIN_NT_IA64	winring0/OlsDef.h	37;"	d
OLS_DRIVER_TYPE_WIN_NT_X64	winring0/OlsDef.h	36;"	d
OLS_ERROR_PCI_BUS_NOT_EXIST	winring0/OlsDef.h	45;"	d
OLS_ERROR_PCI_NO_DEVICE	winring0/OlsDef.h	46;"	d
OLS_ERROR_PCI_READ_CONFIG	winring0/OlsDef.h	48;"	d
OLS_ERROR_PCI_WRITE_CONFIG	winring0/OlsDef.h	47;"	d
OPCODE	cpucounters.h	/^        OPCODE,$/;"	e	enum:PCM::PerfmonField
OPT	pcm.so/Makefile	/^OPT= -g -O3$/;"	m
OUTPUT_CORE_METRIC	pcm-sensor.cpp	576;"	d	file:
OUTPUT_SOCKET_METRIC	pcm-sensor.cpp	603;"	d	file:
OUTPUT_SYSTEM_METRIC	pcm-sensor.cpp	647;"	d	file:
OVERFLOW_ENABLE	cpucounters.h	/^        OVERFLOW_ENABLE,$/;"	e	enum:PCM::PerfmonField
O_SRCS	daemon/client/Debug/sources.mk	/^O_SRCS := $/;"	m
O_SRCS	daemon/daemon/Debug/sources.mk	/^O_SRCS := $/;"	m
OffcoreResponseMsrValue	cpucounters.h	/^        uint64 OffcoreResponseMsrValue[2];$/;"	m	struct:PCM::ExtendedCustomCoreEventDescription
Opcodes	lspci.h	/^    IIOPMUCNTCTLRegister Opcodes;$/;"	m	struct:counter
PAGE_SIZE	winpmem/winpmem.h	10;"	d
PARTIAL	pcm-memory.cpp	48;"	d	file:
PCICFGRegister32	cpucounters.h	/^    PCICFGRegister32(const std::shared_ptr<PciHandleType> & handle_, size_t offset_) :$/;"	f	class:PCICFGRegister32
PCICFGRegister32	cpucounters.h	/^class PCICFGRegister32 : public HWRegister$/;"	c
PCICFGRegister64	cpucounters.h	/^    PCICFGRegister64(const std::shared_ptr<PciHandleType> & handle_, size_t offset_) :$/;"	f	class:PCICFGRegister64
PCICFGRegister64	cpucounters.h	/^class PCICFGRegister64 : public HWRegister$/;"	c
PCICFG_Request	WinMSRDriver/Win7/msrstruct.h	/^struct PCICFG_Request$/;"	s
PCIDB	lspci.h	/^typedef std::pair< std::map<int, std::string> ,std::map< int, std::map<int, std::string> > > PCIDB;$/;"	t
PCIDriver_connect	MacMSRDriver/PCIDriverInterface.cpp	/^io_connect_t PCIDriver_connect = 0;$/;"	v
PCIDriver_mapMemory	MacMSRDriver/PCIDriverInterface.cpp	/^uint32_t PCIDriver_mapMemory(uint32_t address, uint8_t** virtual_address)$/;"	f
PCIDriver_mmap	MacMSRDriver/PCIDriverInterface.cpp	/^std::map<uint8_t*,void*> PCIDriver_mmap;$/;"	v
PCIDriver_read32	MacMSRDriver/PCIDriverInterface.cpp	/^uint32_t PCIDriver_read32(uint32_t addr, uint32_t* val)$/;"	f
PCIDriver_read64	MacMSRDriver/PCIDriverInterface.cpp	/^uint32_t PCIDriver_read64(uint32_t addr, uint64_t* val)$/;"	f
PCIDriver_readMemory32	MacMSRDriver/PCIDriverInterface.cpp	/^uint32_t PCIDriver_readMemory32(uint8_t* address, uint32_t* val)$/;"	f
PCIDriver_readMemory64	MacMSRDriver/PCIDriverInterface.cpp	/^uint32_t PCIDriver_readMemory64(uint8_t* address, uint64_t* val)$/;"	f
PCIDriver_setupDriver	MacMSRDriver/PCIDriverInterface.cpp	/^int PCIDriver_setupDriver()$/;"	f
PCIDriver_unmapMemory	MacMSRDriver/PCIDriverInterface.cpp	/^uint32_t PCIDriver_unmapMemory(uint8_t* virtual_address)$/;"	f
PCIDriver_write32	MacMSRDriver/PCIDriverInterface.cpp	/^uint32_t PCIDriver_write32(uint32_t addr, uint32_t val)$/;"	f
PCIDriver_write64	MacMSRDriver/PCIDriverInterface.cpp	/^uint32_t PCIDriver_write64(uint32_t addr, uint64_t val)$/;"	f
PCISegmentGroupNumber	types.h	/^    unsigned short PCISegmentGroupNumber;$/;"	m	struct:MCFGRecord
PCI_ENABLE	MacMSRDriver/PCIDriverInterface.h	23;"	d
PCI_IDS_NOT_FOUND	lspci.h	10;"	d
PCI_IDS_NOT_FOUND	lspci.h	14;"	d
PCI_IDS_NOT_FOUND	lspci.h	20;"	d
PCI_IDS_PATH	lspci.h	13;"	d
PCI_IDS_PATH	lspci.h	19;"	d
PCI_IDS_PATH	lspci.h	9;"	d
PCIeCounterState	cpucounters.h	/^typedef SimpleCounterState PCIeCounterState;$/;"	t
PCIeEventCode	cpucounters.h	/^    enum PCIeEventCode$/;"	g	class:PCM
PCIeEvents_t	pcm-pcie.cpp	/^} PCIeEvents_t;$/;"	t	typeref:struct:__anon42	file:
PCIeItoM	cpucounters.h	/^        PCIeItoM = 0x19C,  \/\/ PCIe Write (allocating) (full cache line)$/;"	e	enum:PCM::PCIeEventCode
PCIeItoM	pcm-pcie.cpp	/^    uint64 PCIeItoM;  \/\/ PCIe Write (allocating)$/;"	m	struct:__anon42	file:
PCIeNSRd	cpucounters.h	/^        PCIeNSRd = 0x1E4,  \/\/ PCIe non-snoop read (full cache line)$/;"	e	enum:PCM::PCIeEventCode
PCIeNSRd	pcm-pcie.cpp	/^    uint64 PCIeNSRd;  \/\/ PCIe non-snoop read$/;"	m	struct:__anon42	file:
PCIeNSWr	cpucounters.h	/^        PCIeNSWr = 0x1E5,  \/\/ PCIe Non-snoop write (partial cache line)$/;"	e	enum:PCM::PCIeEventCode
PCIeNSWr	pcm-pcie.cpp	/^    uint64 PCIeNSWr;  \/\/ PCIe Non-snoop write (partial)$/;"	m	struct:__anon42	file:
PCIeNSWrF	cpucounters.h	/^        PCIeNSWrF = 0x1E6, \/\/ PCIe Non-snoop write (full cache line)$/;"	e	enum:PCM::PCIeEventCode
PCIeNSWrF	pcm-pcie.cpp	/^    uint64 PCIeNSWrF; \/\/ PCIe Non-snoop write (full)$/;"	m	struct:__anon42	file:
PCIeRdCur	cpucounters.h	/^        PCIeRdCur = 0x19E, \/\/ PCIe read current (full cache line)$/;"	e	enum:PCM::PCIeEventCode
PCIeRdCur	pcm-pcie.cpp	/^    uint64 PCIeRdCur; \/\/ PCIe read current$/;"	m	struct:__anon42	file:
PCIeWiLF	cpucounters.h	/^        PCIeWiLF = 0x194,  \/\/ PCIe Write (non-allocating) (full cache line)$/;"	e	enum:PCM::PCIeEventCode
PCIeWiLF	pcm-pcie.cpp	/^    uint64 PCIeWiLF;  \/\/ PCIe Write (non-allocating)$/;"	m	struct:__anon42	file:
PCIeWidthMode	cpucounters.h	/^    enum PCIeWidthMode {$/;"	g	class:PCM
PCM	cpucounters.cpp	/^PCM::PCM() :$/;"	f	class:PCM
PCM	cpucounters.h	/^class PCM_API PCM$/;"	c
PCM	pcm.so/c_example.c	/^} PCM;$/;"	v	typeref:struct:__anon26
PCMCore	daemon/daemon/common.h	/^		PCMCore() :$/;"	f	struct:PCMDaemon::PCMCore
PCMCore	daemon/daemon/common.h	/^	struct PCMCore {$/;"	s	namespace:PCMDaemon
PCMCore	daemon/daemon/common.h	/^	typedef struct PCMCore PCMCore;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::PCMCore
PCMCoreCounter	daemon/daemon/common.h	/^		PCMCoreCounter() :$/;"	f	struct:PCMDaemon::PCMCoreCounter
PCMCoreCounter	daemon/daemon/common.h	/^	struct PCMCoreCounter {$/;"	s	namespace:PCMDaemon
PCMCoreCounter	daemon/daemon/common.h	/^	typedef struct PCMCoreCounter PCMCoreCounter;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::PCMCoreCounter
PCMDaemon	daemon/client/client.cpp	/^namespace PCMDaemon {$/;"	n	file:
PCMDaemon	daemon/client/client.h	/^namespace PCMDaemon {$/;"	n
PCMDaemon	daemon/daemon/common.h	/^namespace PCMDaemon {$/;"	n
PCMDaemon	daemon/daemon/daemon.cpp	/^namespace PCMDaemon {$/;"	n	file:
PCMDaemon	daemon/daemon/daemon.h	/^namespace PCMDaemon {$/;"	n
PCMMemory	daemon/daemon/common.h	/^		PCMMemory() :$/;"	f	struct:PCMDaemon::PCMMemory
PCMMemory	daemon/daemon/common.h	/^	struct PCMMemory {$/;"	s	namespace:PCMDaemon
PCMMemory	daemon/daemon/common.h	/^	typedef struct PCMMemory PCMMemory;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::PCMMemory
PCMMemoryChannelCounter	daemon/daemon/common.h	/^		PCMMemoryChannelCounter() :$/;"	f	struct:PCMDaemon::PCMMemoryChannelCounter
PCMMemoryChannelCounter	daemon/daemon/common.h	/^	struct PCMMemoryChannelCounter {$/;"	s	namespace:PCMDaemon
PCMMemoryChannelCounter	daemon/daemon/common.h	/^	typedef struct PCMMemoryChannelCounter PCMMemoryChannelCounter;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::PCMMemoryChannelCounter
PCMMemorySocketCounter	daemon/daemon/common.h	/^		PCMMemorySocketCounter() :$/;"	f	struct:PCMDaemon::PCMMemorySocketCounter
PCMMemorySocketCounter	daemon/daemon/common.h	/^	struct PCMMemorySocketCounter {$/;"	s	namespace:PCMDaemon
PCMMemorySocketCounter	daemon/daemon/common.h	/^	typedef struct PCMMemorySocketCounter PCMMemorySocketCounter;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::PCMMemorySocketCounter
PCMMemorySystemCounter	daemon/daemon/common.h	/^		PCMMemorySystemCounter() :$/;"	f	struct:PCMDaemon::PCMMemorySystemCounter
PCMMemorySystemCounter	daemon/daemon/common.h	/^	struct PCMMemorySystemCounter {$/;"	s	namespace:PCMDaemon
PCMMemorySystemCounter	daemon/daemon/common.h	/^	typedef struct PCMMemorySystemCounter PCMMemorySystemCounter;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::PCMMemorySystemCounter
PCMPmem	mmio.cpp	/^class PCMPmem : public WinPmem {$/;"	c	file:
PCMQPI	daemon/daemon/common.h	/^		PCMQPI() :$/;"	f	struct:PCMDaemon::PCMQPI
PCMQPI	daemon/daemon/common.h	/^	struct PCMQPI {$/;"	s	namespace:PCMDaemon
PCMQPI	daemon/daemon/common.h	/^	typedef struct PCMQPI PCMQPI;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::PCMQPI
PCMQPILinkCounter	daemon/daemon/common.h	/^		PCMQPILinkCounter() :$/;"	f	struct:PCMDaemon::PCMQPILinkCounter
PCMQPILinkCounter	daemon/daemon/common.h	/^	struct PCMQPILinkCounter {$/;"	s	namespace:PCMDaemon
PCMQPILinkCounter	daemon/daemon/common.h	/^	typedef struct PCMQPILinkCounter PCMQPILinkCounter;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::PCMQPILinkCounter
PCMQPISocketCounter	daemon/daemon/common.h	/^		PCMQPISocketCounter() :$/;"	f	struct:PCMDaemon::PCMQPISocketCounter
PCMQPISocketCounter	daemon/daemon/common.h	/^	struct PCMQPISocketCounter {$/;"	s	namespace:PCMDaemon
PCMQPISocketCounter	daemon/daemon/common.h	/^	typedef struct PCMQPISocketCounter PCMQPISocketCounter;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::PCMQPISocketCounter
PCMService	PCM-Service_Win/PCMService.h	/^        PCMService()$/;"	f	class:PCMServiceNS::PCMService
PCMService	PCM-Service_Win/PCMService.h	/^    public ref class PCMService : public System::ServiceProcess::ServiceBase$/;"	c	namespace:PCMServiceNS
PCMServiceNS	PCM-Service_Win/PCMService.h	/^namespace PCMServiceNS {$/;"	n
PCMSystem	daemon/daemon/common.h	/^		PCMSystem() :$/;"	f	struct:PCMDaemon::PCMSystem
PCMSystem	daemon/daemon/common.h	/^	struct PCMSystem {$/;"	s	namespace:PCMDaemon
PCMSystem	daemon/daemon/common.h	/^	typedef struct PCMSystem PCMSystem;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::PCMSystem
PCM_API	PCM-Lib_Win/pcm-lib.h	25;"	d
PCM_API	PCM-Lib_Win/pcm-lib.h	27;"	d
PCM_API	cpucounters.h	28;"	d
PCM_API	winpmem/winpmem.cpp	41;"	d	file:
PCM_API	winpmem/winpmem.cpp	43;"	d	file:
PCM_CALIBRATION_INTERVAL	pcm-core.cpp	47;"	d	file:
PCM_CALIBRATION_INTERVAL	pcm-memory.cpp	54;"	d	file:
PCM_CALIBRATION_INTERVAL	pcm-numa.cpp	45;"	d	file:
PCM_CALIBRATION_INTERVAL	pcm-pcie.cpp	40;"	d	file:
PCM_CALIBRATION_INTERVAL	pcm-power.cpp	37;"	d	file:
PCM_CALIBRATION_INTERVAL	pcm-tsx.cpp	45;"	d	file:
PCM_CALIBRATION_INTERVAL	pcm.cpp	46;"	d	file:
PCM_CLIENT_IMC_BAR_OFFSET	client_bw.cpp	21;"	d	file:
PCM_CLIENT_IMC_DRAM_DATA_READS	client_bw.cpp	23;"	d	file:
PCM_CLIENT_IMC_DRAM_DATA_WRITES	client_bw.cpp	24;"	d	file:
PCM_CLIENT_IMC_DRAM_IO_REQESTS	client_bw.cpp	22;"	d	file:
PCM_CLIENT_IMC_EVENT_BASE	client_bw.cpp	26;"	d	file:
PCM_CLIENT_IMC_MMAP_SIZE	client_bw.cpp	25;"	d	file:
PCM_COMPILE_ASSERT	utils.h	151;"	d
PCM_CPUID_INFO	cpucounters.cpp	/^union PCM_CPUID_INFO$/;"	u	file:
PCM_CSTATE_ARRAY	cpucounters.cpp	665;"	d	file:
PCM_DEBUG	types.h	24;"	d
PCM_DEBUG_TOPOLOGY	cpucounters.cpp	92;"	d	file:
PCM_DELAY_DEFAULT	pcm-core.cpp	45;"	d	file:
PCM_DELAY_DEFAULT	pcm-iio.cpp	39;"	d	file:
PCM_DELAY_DEFAULT	pcm-latency.cpp	53;"	d	file:
PCM_DELAY_DEFAULT	pcm-memory.cpp	52;"	d	file:
PCM_DELAY_DEFAULT	pcm-numa.cpp	43;"	d	file:
PCM_DELAY_DEFAULT	pcm-pcie.cpp	38;"	d	file:
PCM_DELAY_DEFAULT	pcm-power.cpp	35;"	d	file:
PCM_DELAY_DEFAULT	pcm-tsx.cpp	43;"	d	file:
PCM_DELAY_DEFAULT	pcm.cpp	44;"	d	file:
PCM_DELAY_MIN	pcm-core.cpp	46;"	d	file:
PCM_DELAY_MIN	pcm-memory.cpp	53;"	d	file:
PCM_DELAY_MIN	pcm-numa.cpp	44;"	d	file:
PCM_DELAY_MIN	pcm-pcie.cpp	39;"	d	file:
PCM_DELAY_MIN	pcm-power.cpp	36;"	d	file:
PCM_DELAY_MIN	pcm-tsx.cpp	44;"	d	file:
PCM_DELAY_MIN	pcm.cpp	45;"	d	file:
PCM_GENERATE_METRIC_AVAILABLE_FUNCTION	cpucounters.h	1746;"	d
PCM_GEN_METRIC_AVAILABLE_FUNCTION	cpucounters.h	1759;"	d
PCM_H_	daemon/daemon/pcm.h	16;"	d
PCM_INSTANCE_LOCK_SEMAPHORE_NAME	cpucounters.cpp	96;"	d	file:
PCM_INSTANCE_LOCK_SEMAPHORE_NAME	cpucounters.cpp	99;"	d	file:
PCM_INTEL_PCI_VENDOR_ID	types.h	486;"	d
PCM_INVALID_DEV_ADDR	types.h	670;"	d
PCM_INVALID_FUNC_ADDR	types.h	671;"	d
PCM_INVALID_QOS_MONITORING_DATA	types.h	292;"	d
PCM_INVALID_THERMAL_HEADROOM	types.h	917;"	d
PCM_MEM_CAPACITY	cpucounters.cpp	5828;"	d	file:
PCM_NMI_WATCHDOG_PATH	cpucounters.cpp	1612;"	d	file:
PCM_NUM_INSTANCES_SEMAPHORE_NAME	cpucounters.cpp	100;"	d	file:
PCM_NUM_INSTANCES_SEMAPHORE_NAME	cpucounters.cpp	97;"	d	file:
PCM_PARAM_PROTECT	cpucounters.cpp	664;"	d	file:
PCM_PCICFG_EDC_INIT	cpucounters.cpp	4586;"	d	file:
PCM_PCICFG_EDC_INIT	cpucounters.cpp	4670;"	d	file:
PCM_PCICFG_M2M_INIT	cpucounters.cpp	4590;"	d	file:
PCM_PCICFG_M2M_INIT	cpucounters.cpp	4671;"	d	file:
PCM_PCICFG_MC_INIT	cpucounters.cpp	4576;"	d	file:
PCM_PCICFG_MC_INIT	cpucounters.cpp	4668;"	d	file:
PCM_PCICFG_QPI_INIT	cpucounters.cpp	4582;"	d	file:
PCM_PCICFG_QPI_INIT	cpucounters.cpp	4669;"	d	file:
PCM_PCI_VENDOR_ID_OFFSET	types.h	487;"	d
PCM_PERF_COUNT_HW_REF_CPU_CYCLES	cpucounters.h	49;"	d
PCM_UNCORE_PMON_BOX_CHECK_STATUS	cpucounters.cpp	91;"	d	file:
PCM_UNUSED	utils.h	149;"	d
PCM_UTILS_HEADER	utils.h	25;"	d
PCM_Util	mutex.h	/^namespace PCM_Util$/;"	n
PCM_VERSION	cpucounters.h	25;"	d
PCM_init_perf_event_attr	cpucounters.cpp	/^perf_event_attr PCM_init_perf_event_attr(bool group = true)$/;"	f
PCUCounter	cpucounters.h	/^    std::array<uint64, maxCounters> PCUCounter;$/;"	m	class:ServerUncorePowerState
PCU_MSR_PMON_BOX_FILTER_BAND_0	types.h	763;"	d
PCU_MSR_PMON_BOX_FILTER_BAND_1	types.h	764;"	d
PCU_MSR_PMON_BOX_FILTER_BAND_2	types.h	765;"	d
PCU_MSR_PMON_BOX_FILTER_BAND_3	types.h	766;"	d
PCU_MSR_PMON_CTL_EDGE_DET	types.h	771;"	d
PCU_MSR_PMON_CTL_EN	types.h	773;"	d
PCU_MSR_PMON_CTL_EVENT	types.h	768;"	d
PCU_MSR_PMON_CTL_EXTRA_SEL	types.h	772;"	d
PCU_MSR_PMON_CTL_INVERT	types.h	774;"	d
PCU_MSR_PMON_CTL_OCC_EDGE_DET	types.h	777;"	d
PCU_MSR_PMON_CTL_OCC_INVERT	types.h	776;"	d
PCU_MSR_PMON_CTL_OCC_SEL	types.h	769;"	d
PCU_MSR_PMON_CTL_RST	types.h	770;"	d
PCU_MSR_PMON_CTL_THRESH	types.h	775;"	d
PERF_CPU_CLK_UNHALTED_REF_POS	cpucounters.h	/^        PERF_CPU_CLK_UNHALTED_REF_POS = 2,$/;"	e	enum:PCM::__anon13
PERF_CPU_CLK_UNHALTED_THREAD_POS	cpucounters.h	/^        PERF_CPU_CLK_UNHALTED_THREAD_POS = 1,$/;"	e	enum:PCM::__anon13
PERF_GEN_EVENT_0_POS	cpucounters.h	/^        PERF_GEN_EVENT_0_POS = 3,$/;"	e	enum:PCM::__anon13
PERF_GEN_EVENT_1_POS	cpucounters.h	/^        PERF_GEN_EVENT_1_POS = 4,$/;"	e	enum:PCM::__anon13
PERF_GEN_EVENT_2_POS	cpucounters.h	/^        PERF_GEN_EVENT_2_POS = 5,$/;"	e	enum:PCM::__anon13
PERF_GEN_EVENT_3_POS	cpucounters.h	/^        PERF_GEN_EVENT_3_POS = 6$/;"	e	enum:PCM::__anon13
PERF_GROUP_LEADER_COUNTER	cpucounters.h	/^        PERF_GROUP_LEADER_COUNTER = PERF_INST_RETIRED_ANY_POS$/;"	e	enum:PCM::__anon14
PERF_INST_RETIRED_ANY_POS	cpucounters.h	/^        PERF_INST_RETIRED_ANY_POS = 0,$/;"	e	enum:PCM::__anon13
PERF_MAX_COUNTERS	types.h	55;"	d
PERF_MAX_CUSTOM_COUNTERS	types.h	54;"	d
PERF_MAX_FIXED_COUNTERS	types.h	53;"	d
PLATFORM_INFO_ADDR	types.h	68;"	d
PMEM_CTRL_IOCTRL	winpmem/winpmem.h	91;"	d
PMEM_DEVICE_NAME	winpmem/winpmem.h	7;"	d
PMEM_INFO_IOCTRL	winpmem/winpmem.h	93;"	d
PMEM_MODE_IOSPACE	winpmem/winpmem.h	96;"	d
PMEM_MODE_PHYSICAL	winpmem/winpmem.h	97;"	d
PMEM_SERVICE_NAME	winpmem/winpmem.h	8;"	d
PMEM_WRITE_ENABLE	winpmem/winpmem.h	92;"	d
PMM	pcm-latency.cpp	40;"	d	file:
PMM	pcm-memory.cpp	/^    bool PMM;$/;"	m	struct:memdata	file:
PMMTrafficMetricsAvailable	cpucounters.h	/^    bool PMMTrafficMetricsAvailable() const$/;"	f	class:PCM
PMM_READ	pcm-memory.cpp	49;"	d	file:
PMM_WRITE	pcm-memory.cpp	50;"	d	file:
PMUBusy	cpucounters.h	/^        PMUBusy = 2,$/;"	e	enum:PCM::ErrorCode
PMUService	PCM-Service_Win/PCMInstaller.h	/^namespace PMUService {$/;"	n
PMUinUse	cpucounters.cpp	/^bool PCM::PMUinUse()$/;"	f	class:PCM
PRINT_DEBUG	MacMSRDriver/PcmMsr/PcmMsr.h	58;"	d
PRQ	cpucounters.h	/^        PRQ,$/;"	e	enum:PCM::ChaPipelineQueue
PRd	cpucounters.h	/^        PRd = 0x187,       \/\/ Partial Reads (UC) (MMIO Read)$/;"	e	enum:PCM::PCIeEventCode
PRd	pcm-pcie.cpp	/^    uint64 PRd;       \/\/ Partial Reads (UC) [MMIO Read]$/;"	m	struct:__anon42	file:
PackageC2StateResidencyHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable PackageC2StateResidencyHash_;$/;"	m	class:PCMServiceNS::MeasureThread
PackageC3StateResidencyHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable PackageC3StateResidencyHash_;$/;"	m	class:PCMServiceNS::MeasureThread
PackageC6StateResidencyHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable PackageC6StateResidencyHash_;$/;"	m	class:PCMServiceNS::MeasureThread
PackageC7StateResidencyHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable PackageC7StateResidencyHash_;$/;"	m	class:PCMServiceNS::MeasureThread
PackageEnergyStatus	cpucounters.h	/^    uint64 PackageEnergyStatus;$/;"	m	class:UncoreCounterState
PackageThermalHeadroom	cpucounters.h	/^    int32 PackageThermalHeadroom;$/;"	m	class:ServerUncorePowerState
PciBusDevFunc	winring0/OlsDef.h	57;"	d
PciGetBus	winring0/OlsDef.h	59;"	d
PciGetDev	winring0/OlsDef.h	61;"	d
PciGetFunc	winring0/OlsDef.h	63;"	d
PciHandle	pci.cpp	/^PciHandle::PciHandle(uint32 groupnr_, uint32 bus_, uint32 device_, uint32 function_) :$/;"	f	class:PciHandle
PciHandle	pci.h	/^class PciHandle$/;"	c
PciHandleM	pci.cpp	/^PciHandleM::PciHandleM(uint32 bus_, uint32 device_, uint32 function_) :$/;"	f	class:PciHandleM
PciHandleM	pci.h	/^class PciHandleM$/;"	c
PciHandleMM	pci.cpp	/^PciHandleMM::PciHandleMM(uint32 groupnr_, uint32 bus_, uint32 device_, uint32 function_) :$/;"	f	class:PciHandleMM
PciHandleMM	pci.h	/^class PciHandleMM$/;"	c
PciHandleType	pci.h	/^typedef PciHandle PciHandleType;$/;"	t
PciHandleType	pci.h	157;"	d
PciHandleType	pci.h	159;"	d
PcmMsrClientClassName	MacMSRDriver/PcmMsr/PcmMsrClient.h	/^class PcmMsrClientClassName : public IOUserClient$/;"	c
PcmMsrClientClassName	MacMSRDriver/PcmMsr/PcmMsrClient.h	19;"	d
PcmMsrDriverClassName	MacMSRDriver/MSRKernel.h	15;"	d
PcmMsrDriverClassName	MacMSRDriver/PcmMsr/PcmMsr.h	/^class PcmMsrDriverClassName : public IOService$/;"	c
PcmMsrDriverClassName	MacMSRDriver/PcmMsr/UserKernelShared.h	15;"	d
PerfVirtualControlRegister	cpucounters.cpp	/^    PerfVirtualControlRegister(int socket_, int pmuID_, bool fixed_ = false) :$/;"	f	class:PerfVirtualControlRegister
PerfVirtualControlRegister	cpucounters.cpp	/^class PerfVirtualControlRegister : public HWRegister$/;"	c	file:
PerfVirtualCounterRegister	cpucounters.cpp	/^    PerfVirtualCounterRegister(const std::shared_ptr<PerfVirtualControlRegister> & controlReg_) : controlReg(controlReg_)$/;"	f	class:PerfVirtualCounterRegister
PerfVirtualCounterRegister	cpucounters.cpp	/^class PerfVirtualCounterRegister : public HWRegister$/;"	c	file:
PerfVirtualDummyUnitControlRegister	cpucounters.cpp	/^    PerfVirtualDummyUnitControlRegister() : lastValue(0) {}$/;"	f	class:PerfVirtualDummyUnitControlRegister
PerfVirtualDummyUnitControlRegister	cpucounters.cpp	/^class PerfVirtualDummyUnitControlRegister : public HWRegister$/;"	c	file:
PerfVirtualFilterRegister	cpucounters.cpp	/^    PerfVirtualFilterRegister(std::array<std::shared_ptr<PerfVirtualControlRegister>, 4> & controlRegs_, int filterNr_) :$/;"	f	class:PerfVirtualFilterRegister
PerfVirtualFilterRegister	cpucounters.cpp	/^class PerfVirtualFilterRegister : public HWRegister$/;"	c	file:
PerfmonField	cpucounters.h	/^    enum PerfmonField {$/;"	g	class:PCM
PreviousGroupAffinity	utils.h	/^    GROUP_AFFINITY PreviousGroupAffinity;$/;"	m	class:ThreadGroupTempAffinity
ProgramMode	cpucounters.h	/^    enum ProgramMode {$/;"	g	class:PCM
ProjectInstaller	PCM-Service_Win/PCMInstaller.h	/^		ProjectInstaller(void)$/;"	f	class:PMUService::ProjectInstaller
ProjectInstaller	PCM-Service_Win/PCMInstaller.h	/^	public ref class ProjectInstaller : public System::Configuration::Install::Installer$/;"	c	namespace:PMUService
QOSMetricAvailable	cpucounters.cpp	/^bool PCM::QOSMetricAvailable() const$/;"	f	class:PCM
QPIClocks	cpucounters.h	/^    std::array<uint64, maxXPILinks> QPIClocks, QPIL0pTxCycles, QPIL1Cycles;$/;"	m	class:ServerUncorePowerState
QPIL0pTxCycles	cpucounters.h	/^    std::array<uint64, maxXPILinks> QPIClocks, QPIL0pTxCycles, QPIL1Cycles;$/;"	m	class:ServerUncorePowerState
QPIL1Cycles	cpucounters.h	/^    std::array<uint64, maxXPILinks> QPIClocks, QPIL0pTxCycles, QPIL1Cycles;$/;"	m	class:ServerUncorePowerState
QPI_MAX_LINKS	daemon/daemon/common.h	34;"	d
QPI_PORT0_MISC_REGISTER_FUNC_ADDR	types.h	649;"	d
QPI_PORT1_MISC_REGISTER_FUNC_ADDR	types.h	650;"	d
QPI_PORT2_MISC_REGISTER_FUNC_ADDR	types.h	651;"	d
QPI_RATE_STATUS_ADDR	types.h	685;"	d
Q_P_PCI_PMON_BOX_CTL_ADDR	types.h	673;"	d
Q_P_PCI_PMON_CTL0_ADDR	types.h	678;"	d
Q_P_PCI_PMON_CTL1_ADDR	types.h	677;"	d
Q_P_PCI_PMON_CTL2_ADDR	types.h	676;"	d
Q_P_PCI_PMON_CTL3_ADDR	types.h	675;"	d
Q_P_PCI_PMON_CTL_EDGE_DET	types.h	757;"	d
Q_P_PCI_PMON_CTL_EN	types.h	759;"	d
Q_P_PCI_PMON_CTL_EVENT	types.h	754;"	d
Q_P_PCI_PMON_CTL_EVENT_EXT	types.h	758;"	d
Q_P_PCI_PMON_CTL_INVERT	types.h	760;"	d
Q_P_PCI_PMON_CTL_RST	types.h	756;"	d
Q_P_PCI_PMON_CTL_THRESH	types.h	761;"	d
Q_P_PCI_PMON_CTL_UMASK	types.h	755;"	d
Q_P_PCI_PMON_CTR0_ADDR	types.h	683;"	d
Q_P_PCI_PMON_CTR1_ADDR	types.h	682;"	d
Q_P_PCI_PMON_CTR2_ADDR	types.h	681;"	d
Q_P_PCI_PMON_CTR3_ADDR	types.h	680;"	d
RDMSR	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^inline uint64_t RDMSR(uint32_t msr)$/;"	f
RDTSC	cpucounters.h	/^inline uint64 RDTSC()$/;"	f
RDTSCP	cpucounters.h	/^inline uint64 RDTSCP()$/;"	f
READ	pcm-memory.cpp	42;"	d	file:
READ_RANK_A	pcm-memory.cpp	44;"	d	file:
READ_RANK_B	pcm-memory.cpp	46;"	d	file:
RESET	cpucounters.h	/^        RESET,$/;"	e	enum:PCM::PerfmonField
RFO	cpucounters.h	/^        RFO = 0x180,       \/\/ Demand Data RFO; share the same code for CPU, use tid to filter PCIe only traffic$/;"	e	enum:PCM::PCIeEventCode
RFO	pcm-pcie.cpp	/^    uint64 RFO;       \/\/ Demand Data RFO [PCIe write partial cache line]$/;"	m	struct:__anon42	file:
RFOtid	cpucounters.h	/^        RFOtid = 0x3E,$/;"	e	enum:PCM::CBoEventTid
RM	daemon/client/Debug/makefile	/^RM := rm -rf$/;"	m
RM	daemon/daemon/Debug/makefile	/^RM := rm -rf$/;"	m
RM	daemon/daemon/test/Makefile	/^RM=rm$/;"	m
RPQ_INS	pcm-latency.cpp	46;"	d	file:
RPQ_OCC	pcm-latency.cpp	45;"	d	file:
R_MSR_PMON_CTL0	types.h	226;"	d
R_MSR_PMON_CTL1	types.h	228;"	d
R_MSR_PMON_CTL10	types.h	246;"	d
R_MSR_PMON_CTL11	types.h	248;"	d
R_MSR_PMON_CTL12	types.h	250;"	d
R_MSR_PMON_CTL13	types.h	252;"	d
R_MSR_PMON_CTL14	types.h	254;"	d
R_MSR_PMON_CTL15	types.h	256;"	d
R_MSR_PMON_CTL2	types.h	230;"	d
R_MSR_PMON_CTL3	types.h	232;"	d
R_MSR_PMON_CTL4	types.h	234;"	d
R_MSR_PMON_CTL5	types.h	236;"	d
R_MSR_PMON_CTL6	types.h	238;"	d
R_MSR_PMON_CTL7	types.h	240;"	d
R_MSR_PMON_CTL8	types.h	242;"	d
R_MSR_PMON_CTL9	types.h	244;"	d
R_MSR_PMON_CTR0	types.h	227;"	d
R_MSR_PMON_CTR1	types.h	229;"	d
R_MSR_PMON_CTR10	types.h	247;"	d
R_MSR_PMON_CTR11	types.h	249;"	d
R_MSR_PMON_CTR12	types.h	251;"	d
R_MSR_PMON_CTR13	types.h	253;"	d
R_MSR_PMON_CTR14	types.h	255;"	d
R_MSR_PMON_CTR15	types.h	257;"	d
R_MSR_PMON_CTR2	types.h	231;"	d
R_MSR_PMON_CTR3	types.h	233;"	d
R_MSR_PMON_CTR4	types.h	235;"	d
R_MSR_PMON_CTR5	types.h	237;"	d
R_MSR_PMON_CTR6	types.h	239;"	d
R_MSR_PMON_CTR7	types.h	241;"	d
R_MSR_PMON_CTR8	types.h	243;"	d
R_MSR_PMON_CTR9	types.h	245;"	d
R_MSR_PMON_GLOBAL_CTL_15_8	types.h	278;"	d
R_MSR_PMON_GLOBAL_CTL_7_0	types.h	277;"	d
R_MSR_PORT0_IPERF_CFG0	types.h	259;"	d
R_MSR_PORT0_IPERF_CFG1	types.h	268;"	d
R_MSR_PORT1_IPERF_CFG0	types.h	260;"	d
R_MSR_PORT1_IPERF_CFG1	types.h	269;"	d
R_MSR_PORT2_IPERF_CFG0	types.h	261;"	d
R_MSR_PORT2_IPERF_CFG1	types.h	270;"	d
R_MSR_PORT3_IPERF_CFG0	types.h	262;"	d
R_MSR_PORT3_IPERF_CFG1	types.h	271;"	d
R_MSR_PORT4_IPERF_CFG0	types.h	263;"	d
R_MSR_PORT4_IPERF_CFG1	types.h	272;"	d
R_MSR_PORT5_IPERF_CFG0	types.h	264;"	d
R_MSR_PORT5_IPERF_CFG1	types.h	273;"	d
R_MSR_PORT6_IPERF_CFG0	types.h	265;"	d
R_MSR_PORT6_IPERF_CFG1	types.h	274;"	d
R_MSR_PORT7_IPERF_CFG0	types.h	266;"	d
R_MSR_PORT7_IPERF_CFG1	types.h	275;"	d
Rdmsr	winring0/OlsApiInit.h	/^_Rdmsr Rdmsr = NULL;$/;"	v
RdmsrPx	winring0/OlsApiInit.h	/^_RdmsrPx RdmsrPx = NULL;$/;"	v
RdmsrTx	winring0/OlsApiInit.h	/^_RdmsrTx RdmsrTx = NULL;$/;"	v
Rdpmc	winring0/OlsApiInit.h	/^_Rdpmc Rdpmc = NULL;$/;"	v
RdpmcPx	winring0/OlsApiInit.h	/^_RdpmcPx RdpmcPx = NULL;$/;"	v
RdpmcTx	winring0/OlsApiInit.h	/^_RdpmcTx RdpmcTx = NULL;$/;"	v
Rdtsc	winring0/OlsApiInit.h	/^_Rdtsc Rdtsc = NULL;$/;"	v
RdtscPx	winring0/OlsApiInit.h	/^_RdtscPx RdtscPx = NULL;$/;"	v
RdtscTx	winring0/OlsApiInit.h	/^_RdtscTx RdtscTx = NULL;$/;"	v
ReadDmiMemory	winring0/OlsApiInit.h	/^_ReadDmiMemory ReadDmiMemory = NULL;$/;"	v
ReadIoPortByte	winring0/OlsApiInit.h	/^_ReadIoPortByte ReadIoPortByte = NULL;$/;"	v
ReadIoPortByteEx	winring0/OlsApiInit.h	/^_ReadIoPortByteEx ReadIoPortByteEx = NULL;$/;"	v
ReadIoPortDword	winring0/OlsApiInit.h	/^_ReadIoPortDword ReadIoPortDword = NULL;$/;"	v
ReadIoPortDwordEx	winring0/OlsApiInit.h	/^_ReadIoPortDwordEx ReadIoPortDwordEx = NULL;$/;"	v
ReadIoPortWord	winring0/OlsApiInit.h	/^_ReadIoPortWord ReadIoPortWord = NULL;$/;"	v
ReadIoPortWordEx	winring0/OlsApiInit.h	/^_ReadIoPortWordEx ReadIoPortWordEx = NULL;$/;"	v
ReadPciConfigByte	winring0/OlsApiInit.h	/^_ReadPciConfigByte ReadPciConfigByte = NULL;$/;"	v
ReadPciConfigByteEx	winring0/OlsApiInit.h	/^_ReadPciConfigByteEx ReadPciConfigByteEx = NULL;$/;"	v
ReadPciConfigDword	winring0/OlsApiInit.h	/^_ReadPciConfigDword ReadPciConfigDword = NULL;$/;"	v
ReadPciConfigDwordEx	winring0/OlsApiInit.h	/^_ReadPciConfigDwordEx ReadPciConfigDwordEx = NULL;$/;"	v
ReadPciConfigWord	winring0/OlsApiInit.h	/^_ReadPciConfigWord ReadPciConfigWord = NULL;$/;"	v
ReadPciConfigWordEx	winring0/OlsApiInit.h	/^_ReadPciConfigWordEx ReadPciConfigWordEx = NULL;$/;"	v
ReadPhysicalMemory	winring0/OlsApiInit.h	/^_ReadPhysicalMemory ReadPhysicalMemory = NULL;$/;"	v
SANDY_BRIDGE	cpucounters.h	/^        SANDY_BRIDGE = 42,$/;"	e	enum:PCM::SupportedCPUModels
SIZE	pcm.cpp	43;"	d	file:
SKL	cpucounters.h	/^        SKL = 94,$/;"	e	enum:PCM::SupportedCPUModels
SKLL2Miss	cpucounters.h	/^        uint64 SKLL2Miss;$/;"	m	union:BasicCounterState::__anon17
SKLL3Hit	cpucounters.h	/^        uint64 SKLL3Hit;$/;"	m	union:BasicCounterState::__anon16
SKL_MEM_LOAD_RETIRED_L2_HIT_EVTNR	types.h	115;"	d
SKL_MEM_LOAD_RETIRED_L2_HIT_UMASK	types.h	116;"	d
SKL_MEM_LOAD_RETIRED_L2_MISS_EVTNR	types.h	112;"	d
SKL_MEM_LOAD_RETIRED_L2_MISS_UMASK	types.h	113;"	d
SKL_MEM_LOAD_RETIRED_L3_HIT_EVTNR	types.h	109;"	d
SKL_MEM_LOAD_RETIRED_L3_HIT_UMASK	types.h	110;"	d
SKL_MEM_LOAD_RETIRED_L3_MISS_EVTNR	types.h	106;"	d
SKL_MEM_LOAD_RETIRED_L3_MISS_UMASK	types.h	107;"	d
SKL_UY	cpucounters.h	/^        SKL_UY = 78,$/;"	e	enum:PCM::SupportedCPUModels
SKX	cpucounters.h	/^        SKX = 85,$/;"	e	enum:PCM::SupportedCPUModels
SKX_CHA_MSR_PMON_BOX_FILTER1_LOC	types.h	843;"	d
SKX_CHA_MSR_PMON_BOX_FILTER1_NC	types.h	848;"	d
SKX_CHA_MSR_PMON_BOX_FILTER1_NM	types.h	844;"	d
SKX_CHA_MSR_PMON_BOX_FILTER1_NOT_NM	types.h	845;"	d
SKX_CHA_MSR_PMON_BOX_FILTER1_OPC0	types.h	846;"	d
SKX_CHA_MSR_PMON_BOX_FILTER1_OPC1	types.h	847;"	d
SKX_CHA_MSR_PMON_BOX_FILTER1_REM	types.h	842;"	d
SKX_CHA_TOR_INSERTS_UMASK_HIT	types.h	852;"	d
SKX_CHA_TOR_INSERTS_UMASK_IRQ	types.h	850;"	d
SKX_CHA_TOR_INSERTS_UMASK_MISS	types.h	853;"	d
SKX_CHA_TOR_INSERTS_UMASK_PRQ	types.h	851;"	d
SKX_CRd	cpucounters.h	/^        SKX_CRd = 0x201,$/;"	e	enum:PCM::PCIeEventCode
SKX_DRd	cpucounters.h	/^        SKX_DRd = 0x202,$/;"	e	enum:PCM::PCIeEventCode
SKX_IIO_CBDMA_CLK	types.h	858;"	d
SKX_IIO_CBDMA_CTL0	types.h	859;"	d
SKX_IIO_CBDMA_CTR0	types.h	857;"	d
SKX_IIO_CBDMA_UNIT_CTL	types.h	856;"	d
SKX_IIO_CBDMA_UNIT_STATUS	types.h	855;"	d
SKX_IIO_PM_REG_STEP	types.h	860;"	d
SKX_ItoM	cpucounters.h	/^        SKX_ItoM = 0x248,$/;"	e	enum:PCM::PCIeEventCode
SKX_M2M_0_REGISTER_DEV_ADDR	types.h	653;"	d
SKX_M2M_0_REGISTER_FUNC_ADDR	types.h	654;"	d
SKX_M2M_1_REGISTER_DEV_ADDR	types.h	655;"	d
SKX_M2M_1_REGISTER_FUNC_ADDR	types.h	656;"	d
SKX_MC0_CH0_REGISTER_DEV_ADDR	types.h	534;"	d
SKX_MC0_CH0_REGISTER_FUNC_ADDR	types.h	538;"	d
SKX_MC0_CH1_REGISTER_DEV_ADDR	types.h	535;"	d
SKX_MC0_CH1_REGISTER_FUNC_ADDR	types.h	539;"	d
SKX_MC0_CH2_REGISTER_DEV_ADDR	types.h	536;"	d
SKX_MC0_CH2_REGISTER_FUNC_ADDR	types.h	540;"	d
SKX_MC0_CH3_REGISTER_DEV_ADDR	types.h	537;"	d
SKX_MC0_CH3_REGISTER_FUNC_ADDR	types.h	541;"	d
SKX_MC1_CH0_REGISTER_DEV_ADDR	types.h	543;"	d
SKX_MC1_CH0_REGISTER_FUNC_ADDR	types.h	547;"	d
SKX_MC1_CH1_REGISTER_DEV_ADDR	types.h	544;"	d
SKX_MC1_CH1_REGISTER_FUNC_ADDR	types.h	548;"	d
SKX_MC1_CH2_REGISTER_DEV_ADDR	types.h	545;"	d
SKX_MC1_CH2_REGISTER_FUNC_ADDR	types.h	549;"	d
SKX_MC1_CH3_REGISTER_DEV_ADDR	types.h	546;"	d
SKX_MC1_CH3_REGISTER_FUNC_ADDR	types.h	550;"	d
SKX_PRd	cpucounters.h	/^        SKX_PRd = 0x207,$/;"	e	enum:PCM::PCIeEventCode
SKX_QPI_PORT0_REGISTER_DEV_ADDR	types.h	642;"	d
SKX_QPI_PORT0_REGISTER_FUNC_ADDR	types.h	643;"	d
SKX_QPI_PORT1_REGISTER_DEV_ADDR	types.h	644;"	d
SKX_QPI_PORT1_REGISTER_FUNC_ADDR	types.h	645;"	d
SKX_QPI_PORT2_REGISTER_DEV_ADDR	types.h	646;"	d
SKX_QPI_PORT2_REGISTER_FUNC_ADDR	types.h	647;"	d
SKX_RFO	cpucounters.h	/^        SKX_RFO = 0x200,$/;"	e	enum:PCM::PCIeEventCode
SKX_RdCur	cpucounters.h	/^        SKX_RdCur = 0x21E,$/;"	e	enum:PCM::PCIeEventCode
SKX_WiL	cpucounters.h	/^        SKX_WiL = 0x20F,$/;"	e	enum:PCM::PCIeEventCode
SMICount	cpucounters.h	/^    uint64 SMICount;$/;"	m	class:BasicCounterState
SOURCES	daemon/daemon/test/Makefile	/^SOURCES=main.cpp$/;"	m
SUBDIRS	daemon/client/Debug/sources.mk	/^SUBDIRS := \\$/;"	m
SUBDIRS	daemon/daemon/Debug/sources.mk	/^SUBDIRS := \\$/;"	m
S_UPPER_SRCS	daemon/client/Debug/sources.mk	/^S_UPPER_SRCS := $/;"	m
S_UPPER_SRCS	daemon/daemon/Debug/sources.mk	/^S_UPPER_SRCS := $/;"	m
SafeMsrHandle	msr.h	/^    SafeMsrHandle() { }$/;"	f	class:SafeMsrHandle
SafeMsrHandle	msr.h	/^    SafeMsrHandle(uint32 core_id) : pHandle(new MsrHandle(core_id))$/;"	f	class:SafeMsrHandle
SafeMsrHandle	msr.h	/^class SafeMsrHandle$/;"	c
Scope	mutex.h	/^            Scope(Mutex & m_) : m(m_)$/;"	f	class:PCM_Util::Mutex::Scope
Scope	mutex.h	/^        class Scope {$/;"	c	class:PCM_Util::Mutex
ServerPCICFGUncore	cpucounters.cpp	/^ServerPCICFGUncore::ServerPCICFGUncore(uint32 socket_, const PCM * pcm) :$/;"	f	class:ServerPCICFGUncore
ServerPCICFGUncore	cpucounters.h	/^class ServerPCICFGUncore$/;"	c
ServerUncorePowerState	cpucounters.h	/^    ServerUncorePowerState() :$/;"	f	class:ServerUncorePowerState
ServerUncorePowerState	cpucounters.h	/^class ServerUncorePowerState : public UncoreCounterState$/;"	c
ServiceName	PCM-Service_Win/PCMService.h	/^        static initonly String^ ServiceName = gcnew String(L"PCMService");$/;"	m	struct:PCMServiceNS::Globals
SetOlsValue	winring0/OlsApiInit.h	/^_SetOlsValue SetOlsValue = NULL;$/;"	v
SetPciMaxBusIndex	winring0/OlsApiInit.h	/^_SetPciMaxBusIndex SetPciMaxBusIndex = NULL;$/;"	v
SetServiceFail	PCM-Service_Win/PCMService.h	/^        void SetServiceFail (int ErrorCode) $/;"	f	class:PCMServiceNS::PCMService
SharedPCMCounters	daemon/daemon/common.h	/^	struct SharedPCMCounters {$/;"	s	namespace:PCMDaemon
SharedPCMCounters	daemon/daemon/common.h	/^	typedef struct SharedPCMCounters SharedPCMCounters;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::SharedPCMCounters
SharedPCMState	daemon/daemon/common.h	/^		SharedPCMState() :$/;"	f	struct:PCMDaemon::SharedPCMState
SharedPCMState	daemon/daemon/common.h	/^	struct SharedPCMState {$/;"	s	namespace:PCMDaemon
SharedPCMState	daemon/daemon/common.h	/^	typedef struct SharedPCMState SharedPCMState;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::SharedPCMState
SimpleCounterState	cpucounters.h	/^    SimpleCounterState() : data(0)$/;"	f	class:SimpleCounterState
SimpleCounterState	cpucounters.h	/^class SimpleCounterState$/;"	c
SimplePCIeDevInfo	cpucounters.h	/^        SimplePCIeDevInfo() : width(XFF) { }$/;"	f	struct:PCM::SimplePCIeDevInfo
SimplePCIeDevInfo	cpucounters.h	/^    struct SimplePCIeDevInfo$/;"	s	class:PCM
SocketCounterState	cpucounters.h	/^class SocketCounterState : public BasicCounterState, public UncoreCounterState$/;"	c
Success	cpucounters.h	/^        Success = 0,$/;"	e	enum:PCM::ErrorCode
SupportedCPUModels	cpucounters.h	/^    enum SupportedCPUModels$/;"	g	class:PCM
SysAfterState	pcm-core.cpp	/^	SystemCounterState SysBeforeState, SysAfterState;$/;"	v
SysAfterState	pcm-latency.cpp	/^SystemCounterState SysBeforeState, SysAfterState;$/;"	v
SysBeforeState	pcm-core.cpp	/^	SystemCounterState SysBeforeState, SysAfterState;$/;"	v
SysBeforeState	pcm-latency.cpp	/^SystemCounterState SysBeforeState, SysAfterState;$/;"	v
SystemCounterState	cpucounters.h	/^    SystemCounterState() :$/;"	f	class:SystemCounterState
SystemCounterState	cpucounters.h	/^class SystemCounterState : public BasicCounterState, public UncoreCounterState$/;"	c
T	memoptest.cpp	/^    T() { }$/;"	f	struct:T
T	memoptest.cpp	/^    T(int a) { key[0] = a; }$/;"	f	struct:T
T	memoptest.cpp	/^struct T$/;"	s	file:
T	readmem.cpp	/^    T() { }$/;"	f	struct:T
T	readmem.cpp	/^    T(int a) { key[0] = a; }$/;"	f	struct:T
T	readmem.cpp	/^struct T$/;"	s	file:
T	realtime.cpp	/^    T() { }$/;"	f	struct:T
T	realtime.cpp	/^    T(int a) { key[0] = a; }$/;"	f	struct:T
T	realtime.cpp	/^struct T$/;"	s	file:
TEST_VAR	pcm-iio.cpp	509;"	d	file:
THRESH	cpucounters.h	/^        THRESH,$/;"	e	enum:PCM::PerfmonField
TORInsertsIAMiss	cpucounters.h	/^    uint64 TORInsertsIAMiss;$/;"	m	class:UncoreCounterState
TOROccupancyIAMiss	cpucounters.h	/^    uint64 TOROccupancyIAMiss;$/;"	m	class:UncoreCounterState
TSXEvent	pcm-tsx.cpp	/^struct TSXEvent$/;"	s	file:
TX_CYCLES_COMMITED_POS	pcm-tsx.cpp	118;"	d	file:
TX_CYCLES_POS	pcm-tsx.cpp	117;"	d	file:
TemporalThreadAffinity	cpucounters.cpp	/^    TemporalThreadAffinity(uint32 core) : affinity(core) {}$/;"	f	class:TemporalThreadAffinity
TemporalThreadAffinity	cpucounters.cpp	/^    TemporalThreadAffinity(uint32 core_id)$/;"	f	class:TemporalThreadAffinity
TemporalThreadAffinity	cpucounters.cpp	/^    TemporalThreadAffinity(uint32) { }$/;"	f	class:TemporalThreadAffinity
TemporalThreadAffinity	cpucounters.cpp	/^class TemporalThreadAffinity  \/\/ speedup trick for Linux, FreeBSD, DragonFlyBSD, Windows$/;"	c	file:
ThermalHeadroom	cpucounters.h	/^    int32 ThermalHeadroom;$/;"	m	class:BasicCounterState
ThreadGroupTempAffinity	utils.cpp	/^ThreadGroupTempAffinity::ThreadGroupTempAffinity(uint32 core_id)$/;"	f	class:ThreadGroupTempAffinity
ThreadGroupTempAffinity	utils.h	/^class ThreadGroupTempAffinity$/;"	c
TopologyEntry	cpucounters.h	/^    TopologyEntry() : os_id(-1), thread_id (-1), core_id(-1), tile_id(-1), socket(-1) { }$/;"	f	struct:TopologyEntry
TopologyEntry	cpucounters.h	/^struct PCM_API TopologyEntry \/\/ decribes a core$/;"	s
TxL0Cycles	cpucounters.h	/^    std::vector<std::vector<uint64> > TxL0Cycles;$/;"	m	class:SystemCounterState
UBOX_MSR_PMON_CTL0_ADDR	types.h	701;"	d
UBOX_MSR_PMON_CTL1_ADDR	types.h	702;"	d
UBOX_MSR_PMON_CTR0_ADDR	types.h	703;"	d
UBOX_MSR_PMON_CTR1_ADDR	types.h	704;"	d
UCLK_FIXED_CTL_ADDR	types.h	700;"	d
UCLK_FIXED_CTL_EN	types.h	883;"	d
UCLK_FIXED_CTL_OV_EN	types.h	882;"	d
UCLK_FIXED_CTR_ADDR	types.h	699;"	d
UMASK	cpucounters.h	/^        UMASK,$/;"	e	enum:PCM::PerfmonField
UNAME	Makefile	/^UNAME:=$(shell uname)$/;"	m
UNC_PMON_UNIT_CTL_FRZ	types.h	736;"	d
UNC_PMON_UNIT_CTL_FRZ_EN	types.h	737;"	d
UNC_PMON_UNIT_CTL_RST_CONTROL	types.h	734;"	d
UNC_PMON_UNIT_CTL_RST_COUNTERS	types.h	735;"	d
UNC_PMON_UNIT_CTL_RSV	types.h	738;"	d
UNC_PMON_UNIT_CTL_VALID_BITS_MASK	types.h	740;"	d
UNC_QHL_REQUESTS_EVTNR	types.h	186;"	d
UNC_QHL_REQUESTS_IOH_READS_UMASK	types.h	188;"	d
UNC_QHL_REQUESTS_IOH_WRITES_UMASK	types.h	189;"	d
UNC_QHL_REQUESTS_LOCAL_READS_UMASK	types.h	192;"	d
UNC_QHL_REQUESTS_LOCAL_WRITES_UMASK	types.h	193;"	d
UNC_QHL_REQUESTS_REMOTE_READS_UMASK	types.h	190;"	d
UNC_QHL_REQUESTS_REMOTE_WRITES_UMASK	types.h	191;"	d
UNC_QMC_NORMAL_READS_ANY_EVTNR	types.h	183;"	d
UNC_QMC_NORMAL_READS_ANY_UMASK	types.h	184;"	d
UNC_QMC_WRITES_FULL_ANY_EVTNR	types.h	180;"	d
UNC_QMC_WRITES_FULL_ANY_UMASK	types.h	181;"	d
UPI_DEV_IDS	cpucounters.cpp	/^static const uint32 UPI_DEV_IDS[] = {$/;"	v	file:
UPIbus	cpucounters.h	/^    int32 iMCbus,UPIbus,M2Mbus;$/;"	m	class:ServerPCICFGUncore
USER_KERNEL_SHARED	MacMSRDriver/PcmMsr/UserKernelShared.h	18;"	d
USER_OBJS	daemon/client/Debug/objects.mk	/^USER_OBJS :=$/;"	m
USER_OBJS	daemon/daemon/Debug/objects.mk	/^USER_OBJS := .\/utils.o .\/pci.o .\/msr.o .\/mmio.o .\/client_bw.o .\/cpucounters.o$/;"	m
U_L_PCI_PMON_BOX_CTL_ADDR	types.h	687;"	d
U_L_PCI_PMON_CTL0_ADDR	types.h	692;"	d
U_L_PCI_PMON_CTL1_ADDR	types.h	691;"	d
U_L_PCI_PMON_CTL2_ADDR	types.h	690;"	d
U_L_PCI_PMON_CTL3_ADDR	types.h	689;"	d
U_L_PCI_PMON_CTR0_ADDR	types.h	697;"	d
U_L_PCI_PMON_CTR1_ADDR	types.h	696;"	d
U_L_PCI_PMON_CTR2_ADDR	types.h	695;"	d
U_L_PCI_PMON_CTR3_ADDR	types.h	694;"	d
U_MSR_PMON_GLOBAL_CTL	types.h	201;"	d
UncClocks	cpucounters.h	/^    uint64 UncClocks;$/;"	m	class:UncoreCounterState
UncEDCFullWrites	cpucounters.h	/^    uint64 UncEDCFullWrites;$/;"	m	class:UncoreCounterState
UncEDCNormalReads	cpucounters.h	/^    uint64 UncEDCNormalReads;$/;"	m	class:UncoreCounterState
UncMCFullWrites	cpucounters.h	/^    uint64 UncMCFullWrites;$/;"	m	class:UncoreCounterState
UncMCIORequests	cpucounters.h	/^    uint64 UncMCIORequests;$/;"	m	class:UncoreCounterState
UncMCNormalReads	cpucounters.h	/^    uint64 UncMCNormalReads;$/;"	m	class:UncoreCounterState
UncPMMReads	cpucounters.h	/^    uint64 UncPMMReads;$/;"	m	class:UncoreCounterState
UncPMMWrites	cpucounters.h	/^    uint64 UncPMMWrites;$/;"	m	class:UncoreCounterState
UncoreCounterState	cpucounters.h	/^    UncoreCounterState() :$/;"	f	class:UncoreCounterState
UncoreCounterState	cpucounters.h	/^class UncoreCounterState$/;"	c
UncoreEventSelectRegister	types.h	/^struct UncoreEventSelectRegister$/;"	s
UncorePMU	cpucounters.h	/^    UncorePMU() {}$/;"	f	class:UncorePMU
UncorePMU	cpucounters.h	/^    UncorePMU(const HWRegisterPtr & unitControl_,$/;"	f	class:UncorePMU
UncorePMU	cpucounters.h	/^class UncorePMU$/;"	c
UninstallOpenLibSys	winring0/OlsApiInit.h	/^_UninstallOpenLibSys UninstallOpenLibSys = NULL;$/;"	v
UnknownError	cpucounters.h	/^        UnknownError$/;"	e	enum:PCM::ErrorCode
UnsupportedProcessorException	exceptions/unsupported_processor_exception.hpp	/^class UnsupportedProcessorException: public std::exception$/;"	c
UpdateCounters	cpuasynchcounter.h	/^void * UpdateCounters(void * state)$/;"	f
UpdateThread	cpuasynchcounter.h	/^    pthread_t UpdateThread;$/;"	m	class:AsynchronCounterState
UpdateThread	width_extender.h	/^    std::thread * UpdateThread;$/;"	m	class:CounterWidthExtender
VERSION	daemon/daemon/common.h	/^static const char VERSION[] = "1.0.5";$/;"	v
VERSION_SIZE	daemon/daemon/common.h	36;"	d
V_EVENT_NAME	cpucounters.h	/^        V_EVENT_NAME,$/;"	e	enum:PCM::PerfmonField
WESTMERE_EP	cpucounters.h	/^        WESTMERE_EP = 44,$/;"	e	enum:PCM::SupportedCPUModels
WESTMERE_EX	cpucounters.h	/^        WESTMERE_EX = 47,$/;"	e	enum:PCM::SupportedCPUModels
WIDTH_EXTENDER_HEADER_	width_extender.h	17;"	d
WINDRIVER_HEADER	PCM_Win/windriver.h	2;"	d
WINVER	PCM-Lib_Win/targetver.h	28;"	d
WPQ_INS	pcm-latency.cpp	48;"	d	file:
WPQ_OCC	pcm-latency.cpp	47;"	d	file:
WRITE	pcm-memory.cpp	43;"	d	file:
WRITE_RANK_A	pcm-memory.cpp	45;"	d	file:
WRITE_RANK_B	pcm-memory.cpp	47;"	d	file:
WRMSR	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^inline void WRMSR(uint32_t msr, uint64_t value)$/;"	f
W_MSR_PMON_FIXED_CTR	types.h	282;"	d
W_MSR_PMON_FIXED_CTR_CTL	types.h	281;"	d
W_MSR_PMON_GLOBAL_CTL	types.h	280;"	d
WiL	cpucounters.h	/^        WiL = 0x18F,       \/\/ Write Invalidate Line - partial (MMIO write), PL: Not documented in HSX\/IVT$/;"	e	enum:PCM::PCIeEventCode
WiL	pcm-pcie.cpp	/^    uint64 WiL;       \/\/ Write Invalidate Line - partial [MMIO write], PL: Not documented in HSX\/IVT$/;"	m	struct:__anon42	file:
WinPmem	winpmem/winpmem.cpp	/^WinPmem::WinPmem():$/;"	f	class:WinPmem
WinPmem	winpmem/winpmem.h	/^class WinPmem {$/;"	c
WriteIoPortByte	winring0/OlsApiInit.h	/^_WriteIoPortByte WriteIoPortByte = NULL;$/;"	v
WriteIoPortByteEx	winring0/OlsApiInit.h	/^_WriteIoPortByteEx WriteIoPortByteEx = NULL;$/;"	v
WriteIoPortDword	winring0/OlsApiInit.h	/^_WriteIoPortDword WriteIoPortDword = NULL;$/;"	v
WriteIoPortDwordEx	winring0/OlsApiInit.h	/^_WriteIoPortDwordEx WriteIoPortDwordEx = NULL;$/;"	v
WriteIoPortWord	winring0/OlsApiInit.h	/^_WriteIoPortWord WriteIoPortWord = NULL;$/;"	v
WriteIoPortWordEx	winring0/OlsApiInit.h	/^_WriteIoPortWordEx WriteIoPortWordEx = NULL;$/;"	v
WritePciConfigByte	winring0/OlsApiInit.h	/^_WritePciConfigByte WritePciConfigByte = NULL;$/;"	v
WritePciConfigByteEx	winring0/OlsApiInit.h	/^_WritePciConfigByteEx WritePciConfigByteEx = NULL;$/;"	v
WritePciConfigDword	winring0/OlsApiInit.h	/^_WritePciConfigDword WritePciConfigDword = NULL;$/;"	v
WritePciConfigDwordEx	winring0/OlsApiInit.h	/^_WritePciConfigDwordEx WritePciConfigDwordEx = NULL;$/;"	v
WritePciConfigWord	winring0/OlsApiInit.h	/^_WritePciConfigWord WritePciConfigWord = NULL;$/;"	v
WritePciConfigWordEx	winring0/OlsApiInit.h	/^_WritePciConfigWordEx WritePciConfigWordEx = NULL;$/;"	v
WritePhysicalMemory	winring0/OlsApiInit.h	/^_WritePhysicalMemory WritePhysicalMemory = NULL;$/;"	v
Wrmsr	winring0/OlsApiInit.h	/^_Wrmsr Wrmsr = NULL;$/;"	v
WrmsrPx	winring0/OlsApiInit.h	/^_WrmsrPx WrmsrPx = NULL;$/;"	v
WrmsrTx	winring0/OlsApiInit.h	/^_WrmsrTx WrmsrTx = NULL;$/;"	v
X1	cpucounters.h	/^        X1,$/;"	e	enum:PCM::PCIeWidthMode
X16	cpucounters.h	/^        X16,$/;"	e	enum:PCM::PCIeWidthMode
X4	cpucounters.h	/^        X4,$/;"	e	enum:PCM::PCIeWidthMode
X8	cpucounters.h	/^        X8,$/;"	e	enum:PCM::PCIeWidthMode
XFF	cpucounters.h	/^        XFF$/;"	e	enum:PCM::PCIeWidthMode
XPF_MC_CH_PCI_PMON_BOX_CTL_ADDR	types.h	581;"	d
XPF_MC_CH_PCI_PMON_CTL0_ADDR	types.h	590;"	d
XPF_MC_CH_PCI_PMON_CTL1_ADDR	types.h	589;"	d
XPF_MC_CH_PCI_PMON_CTL2_ADDR	types.h	588;"	d
XPF_MC_CH_PCI_PMON_CTL3_ADDR	types.h	587;"	d
XPF_MC_CH_PCI_PMON_CTR0_ADDR	types.h	612;"	d
XPF_MC_CH_PCI_PMON_CTR1_ADDR	types.h	611;"	d
XPF_MC_CH_PCI_PMON_CTR2_ADDR	types.h	610;"	d
XPF_MC_CH_PCI_PMON_CTR3_ADDR	types.h	609;"	d
XPF_MC_CH_PCI_PMON_FIXED_CTL_ADDR	types.h	586;"	d
XPF_MC_CH_PCI_PMON_FIXED_CTR_ADDR	types.h	608;"	d
XPIRegisterLocation	cpucounters.h	/^    std::vector<std::pair<uint32, uint32> > XPIRegisterLocation; \/\/ (device, function)$/;"	m	class:ServerPCICFGUncore
_CRT_SECURE_NO_WARNINGS	freegetopt/getopt.cpp	37;"	d	file:
_Cpuid	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_Cpuid) (DWORD index, PDWORD eax, PDWORD ebx, PDWORD ecx, PDWORD edx);$/;"	t
_CpuidPx	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_CpuidPx) (DWORD index, PDWORD eax, PDWORD ebx, PDWORD ecx, PDWORD edx, DWORD_PTR processAffinityMask);$/;"	t
_CpuidTx	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_CpuidTx) (DWORD index, PDWORD eax, PDWORD ebx, PDWORD ecx, PDWORD edx, DWORD_PTR threadAffinityMask);$/;"	t
_DEBUG	MacMSRDriver/PcmMsr/PcmMsr.h	54;"	d
_DEBUG	MacMSRDriver/PcmMsr/PcmMsr.h	56;"	d
_DeinitializeOls	winring0/OlsApiInitDef.h	/^typedef VOID (WINAPI *_DeinitializeOls) ();$/;"	t
_FindPciDeviceByClass	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_FindPciDeviceByClass) (BYTE baseClass, BYTE subClass, BYTE programIf, BYTE index);$/;"	t
_FindPciDeviceById	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_FindPciDeviceById) (WORD vendorId, WORD deviceId, BYTE index);$/;"	t
_GetDllStatus	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_GetDllStatus) ();$/;"	t
_GetDllVersion	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_GetDllVersion) (PBYTE major, PBYTE minor, PBYTE revision, PBYTE release);$/;"	t
_GetDriverType	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_GetDriverType) ();$/;"	t
_GetDriverVersion	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_GetDriverVersion) (PBYTE major, PBYTE minor, PBYTE revision, PBYTE release);$/;"	t
_Hlt	winring0/OlsApiInitDef.h	/^typedef BOOL  (WINAPI *_Hlt) ();$/;"	t
_HltPx	winring0/OlsApiInitDef.h	/^typedef BOOL  (WINAPI *_HltPx)   (DWORD_PTR processAffinityMask);$/;"	t
_HltTx	winring0/OlsApiInitDef.h	/^typedef BOOL  (WINAPI *_HltTx) (DWORD_PTR threadAffinityMask);$/;"	t
_InitializeOls	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_InitializeOls) ();$/;"	t
_IsCpuid	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_IsCpuid) ();$/;"	t
_IsMsr	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_IsMsr) ();$/;"	t
_IsTsc	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_IsTsc) ();$/;"	t
_Rdmsr	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_Rdmsr) (DWORD index, PDWORD eax, PDWORD edx);$/;"	t
_RdmsrPx	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_RdmsrPx) (DWORD index, PDWORD eax, PDWORD edx, DWORD_PTR processAffinityMask);$/;"	t
_RdmsrTx	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_RdmsrTx) (DWORD index, PDWORD eax, PDWORD edx, DWORD_PTR threadAffinityMask);$/;"	t
_Rdpmc	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_Rdpmc) (DWORD index, PDWORD eax, PDWORD edx);$/;"	t
_RdpmcPx	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_RdpmcPx) (DWORD index, PDWORD eax, PDWORD edx, DWORD_PTR processAffinityMask);$/;"	t
_RdpmcTx	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_RdpmcTx) (DWORD index, PDWORD eax, PDWORD edx, DWORD_PTR threadAffinityMask);$/;"	t
_Rdtsc	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_Rdtsc) (PDWORD eax, PDWORD edx);$/;"	t
_RdtscPx	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_RdtscPx) (PDWORD eax, PDWORD edx, DWORD_PTR processAffinityMask);$/;"	t
_RdtscTx	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_RdtscTx) (PDWORD eax, PDWORD edx, DWORD_PTR threadAffinityMask);$/;"	t
_ReadDmiMemory	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_ReadDmiMemory) (PBYTE buffer, DWORD count, DWORD unitSize);$/;"	t
_ReadIoPortByte	winring0/OlsApiInitDef.h	/^typedef BYTE  (WINAPI *_ReadIoPortByte) (WORD address);$/;"	t
_ReadIoPortByteEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_ReadIoPortByteEx) (WORD address, PBYTE value);$/;"	t
_ReadIoPortDword	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_ReadIoPortDword) (WORD address);$/;"	t
_ReadIoPortDwordEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_ReadIoPortDwordEx) (WORD address, PDWORD value);$/;"	t
_ReadIoPortWord	winring0/OlsApiInitDef.h	/^typedef WORD  (WINAPI *_ReadIoPortWord) (WORD address);$/;"	t
_ReadIoPortWordEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_ReadIoPortWordEx) (WORD address, PWORD value);$/;"	t
_ReadPciConfigByte	winring0/OlsApiInitDef.h	/^typedef BYTE  (WINAPI *_ReadPciConfigByte) (DWORD pciAddress, BYTE regAddress);$/;"	t
_ReadPciConfigByteEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_ReadPciConfigByteEx) (DWORD pciAddress, DWORD regAddress, PBYTE value);$/;"	t
_ReadPciConfigDword	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_ReadPciConfigDword) (DWORD pciAddress, BYTE regAddress);$/;"	t
_ReadPciConfigDwordEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_ReadPciConfigDwordEx) (DWORD pciAddress, DWORD regAddress, PDWORD value);$/;"	t
_ReadPciConfigWord	winring0/OlsApiInitDef.h	/^typedef WORD  (WINAPI *_ReadPciConfigWord) (DWORD pciAddress, BYTE regAddress);$/;"	t
_ReadPciConfigWordEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_ReadPciConfigWordEx) (DWORD pciAddress, DWORD regAddress, PWORD value);$/;"	t
_ReadPhysicalMemory	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_ReadPhysicalMemory) (DWORD_PTR address, PBYTE buffer, DWORD count, DWORD unitSize);$/;"	t
_SetPciMaxBusIndex	winring0/OlsApiInitDef.h	/^typedef VOID (WINAPI *_SetPciMaxBusIndex) (BYTE max);$/;"	t
_WIN32_IE	PCM-Lib_Win/targetver.h	40;"	d
_WIN32_WINDOWS	PCM-Lib_Win/targetver.h	36;"	d
_WIN32_WINNT	PCM-Core_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM-IIO_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM-LSPCI_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM-Latency_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM-Lib_Win/targetver.h	32;"	d
_WIN32_WINNT	PCM-MSR_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM-Memory_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM-NUMA_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM-PCICFG_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM-PCIE_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM-Power_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM-TSX_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM_Win/stdafx.h	22;"	d
_WriteIoPortByte	winring0/OlsApiInitDef.h	/^typedef VOID (WINAPI *_WriteIoPortByte) (WORD address, BYTE value);$/;"	t
_WriteIoPortByteEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_WriteIoPortByteEx) (WORD address, BYTE value);$/;"	t
_WriteIoPortDword	winring0/OlsApiInitDef.h	/^typedef VOID (WINAPI *_WriteIoPortDword) (WORD address, DWORD value);$/;"	t
_WriteIoPortDwordEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_WriteIoPortDwordEx) (WORD address, DWORD value);$/;"	t
_WriteIoPortWord	winring0/OlsApiInitDef.h	/^typedef VOID (WINAPI *_WriteIoPortWord) (WORD address, WORD value);$/;"	t
_WriteIoPortWordEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_WriteIoPortWordEx) (WORD address, WORD value);$/;"	t
_WritePciConfigByte	winring0/OlsApiInitDef.h	/^typedef VOID (WINAPI *_WritePciConfigByte) (DWORD pciAddress, BYTE regAddress, BYTE value);$/;"	t
_WritePciConfigByteEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_WritePciConfigByteEx) (DWORD pciAddress, DWORD regAddress, BYTE value);$/;"	t
_WritePciConfigDword	winring0/OlsApiInitDef.h	/^typedef VOID (WINAPI *_WritePciConfigDword) (DWORD pciAddress, BYTE regAddress, DWORD value);$/;"	t
_WritePciConfigDwordEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_WritePciConfigDwordEx) (DWORD pciAddress, DWORD regAddress, DWORD value);$/;"	t
_WritePciConfigWord	winring0/OlsApiInitDef.h	/^typedef VOID (WINAPI *_WritePciConfigWord) (DWORD pciAddress, BYTE regAddress, WORD value);$/;"	t
_WritePciConfigWordEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_WritePciConfigWordEx) (DWORD pciAddress, DWORD regAddress, WORD value);$/;"	t
_WritePhysicalMemory	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_WritePhysicalMemory) (DWORD_PTR address, PBYTE buffer, DWORD count, DWORD unitSize);$/;"	t
_Wrmsr	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_Wrmsr) (DWORD index, DWORD eax, DWORD edx);$/;"	t
_WrmsrPx	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_WrmsrPx) (DWORD index, DWORD eax, DWORD edx, DWORD_PTR processAffinityMask);$/;"	t
_WrmsrTx	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_WrmsrTx) (DWORD index, DWORD eax, DWORD edx, DWORD_PTR threadAffinityMask);$/;"	t
_tmain	PCM-Service_Win/PCMService.cpp	/^int _tmain(int argc, _TCHAR* argv[])$/;"	f
a_data	pcm-iio.cpp	/^string a_data (string init, struct data d) {$/;"	f
a_header_footer	pcm-iio.cpp	/^string a_header_footer (string init, string name)$/;"	f
a_title	pcm-iio.cpp	/^string a_title (const string &init, const string &name) {$/;"	f
accumulateCoreState	cpucounters.h	/^    void accumulateCoreState(const CoreCounterState & o)$/;"	f	class:SocketCounterState
accumulateSocketState	cpucounters.h	/^    void accumulateSocketState(const SocketCounterState & o)$/;"	f	class:SystemCounterState
activeRelativeFrequency	daemon/daemon/common.h	/^		double activeRelativeFrequency;$/;"	m	struct:PCMDaemon::PCMCoreCounter
affinity	cpucounters.cpp	/^    ThreadGroupTempAffinity affinity;$/;"	m	class:TemporalThreadAffinity	file:
after_sstate	realtime.cpp	/^SystemCounterState before_sstate, after_sstate;$/;"	v
after_time	realtime.cpp	/^double before_time, after_time;$/;"	v
aggregate_sample	pcm-pcie.cpp	/^PCIeEvents_t aggregate_sample;$/;"	v
all_fib	realtime.cpp	/^long long int all_fib = 0;$/;"	v
all_flag	pmu-query.py	/^            all_flag=True$/;"	v
all_flag	pmu-query.py	/^all_flag = False$/;"	v
allocator	cpucounters.h	/^template class PCM_API std::allocator<CounterWidthExtender *>;$/;"	m	class:std	typeref:class:std::
allocator	cpucounters.h	/^template class PCM_API std::allocator<TopologyEntry>;$/;"	m	class:std	typeref:class:std::
allocator	cpucounters.h	/^template class PCM_API std::allocator<char>;$/;"	m	class:std	typeref:class:std::
allocator	cpucounters.h	/^template class PCM_API std::allocator<uint32>;$/;"	m	class:std	typeref:class:std::
allowMultipleInstances	cpucounters.h	/^    void allowMultipleInstances()$/;"	f	class:PCM
allow_multiple_instances	cpucounters.h	/^    bool allow_multiple_instances;$/;"	m	class:PCM
allowedSubscribers_	daemon/daemon/daemon.h	/^		std::vector<std::string> allowedSubscribers_;$/;"	m	class:PCMDaemon::Daemon
any_thread	types.h	/^            uint64 any_thread : 1;$/;"	m	struct:EventSelectRegister::__anon28::__anon29
any_thread0	types.h	/^            uint64 any_thread0 : 1;$/;"	m	struct:FixedEventControlRegister::__anon30::__anon31
any_thread1	types.h	/^            uint64 any_thread1 : 1;$/;"	m	struct:FixedEventControlRegister::__anon30::__anon31
any_thread2	types.h	/^            uint64 any_thread2 : 1;$/;"	m	struct:FixedEventControlRegister::__anon30::__anon31
apic_int	types.h	/^            uint64 apic_int : 1;$/;"	m	struct:EventSelectRegister::__anon28::__anon29
argv_index	freegetopt/getopt.cpp	/^static int argv_index = 0;             \/* Option we're checking *\/$/;"	v	file:
argv_index2	freegetopt/getopt.cpp	/^static int argv_index2 = 0;            \/* Option argument we're checking *\/$/;"	v	file:
array	cpucounters.cpp	/^    int array[4];$/;"	m	union:PCM_CPUID_INFO	file:
backup_ofile	cpucounters.h	/^    std::streambuf * backup_ofile; \/\/ backup of original output = cout$/;"	m	class:PCM
baseAddress	types.h	/^    unsigned long long baseAddress;$/;"	m	struct:MCFGRecord
baseTicksForIpcHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable baseTicksForIpcHash_;$/;"	m	class:PCMServiceNS::MeasureThread
baseTicksForRelFreqHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable baseTicksForRelFreqHash_;$/;"	m	class:PCMServiceNS::MeasureThread
base_addr	pci.h	/^    uint64 base_addr;$/;"	m	class:PciHandleM
base_addr	pci.h	/^    uint64 base_addr;$/;"	m	class:PciHandleMM
bcmd	types.h	/^            uint64 bcmd : 3;$/;"	m	struct:BecktonUncorePMUZDPCTLFVCRegister::__anon34::__anon35
bcmd	types.h	/^            uint64 bcmd : 3;$/;"	m	struct:BecktonUncorePMUZDPCTLFVCRegister::__anon34::__anon36
bdf	lspci.h	/^    struct bdf bdf;$/;"	m	struct:pci	typeref:struct:pci::bdf
bdf	lspci.h	/^struct bdf {$/;"	s
before_sstate	realtime.cpp	/^SystemCounterState before_sstate, after_sstate;$/;"	v
before_time	realtime.cpp	/^double before_time, after_time;$/;"	v
blocked	cpucounters.h	/^    bool blocked;              \/\/ track if time-driven counter update is running or not: PCM is blocked$/;"	m	class:PCM
buildTopology	MacMSRDriver/MSRAccessor.cpp	/^int32_t MSRAccessor::buildTopology(uint32_t num_cores ,void* pTopos){$/;"	f	class:MSRAccessor
buildTopology	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^IOReturn PcmMsrDriverClassName::buildTopology(topologyEntry* odata, uint32_t input_num_cores){$/;"	f	class:PcmMsrDriverClassName
buildTopology	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::buildTopology(topologyEntry* data, size_t output_size)$/;"	f	class:PcmMsrClientClassName
buildTopology	msr.cpp	/^int32 MsrHandle::buildTopology(uint32 num_cores, void * ptr)$/;"	f	class:MsrHandle
buildTopology	msr.h	/^    int32 buildTopology(uint32 num_cores, void * p)$/;"	f	class:SafeMsrHandle
build_bit	cpucounters.cpp	/^uint64 build_bit(uint32 beg, uint32 end)$/;"	f
build_bit_ui	cpucounters.cpp	/^uint32 build_bit_ui(uint32 beg, uint32 end)$/;"	f
build_core_register	pcm-latency.cpp	/^EventSelectRegister build_core_register(uint64 reg_used, uint64 value, uint64 usr, uint64 os, uint64 enable, uint64 umask, uint64 event_select, uint64 edge)$/;"	f
build_display	pcm-iio.cpp	/^vector<string> build_display(vector<struct iio_skx> iio_skx_v, vector<struct counter> &ctrs, vector<int> skt_list, vector<int> stack_list, const PCIDB & pciDB)$/;"	f
build_event	pcm-core.cpp	/^void build_event(const char * argv, EventSelectRegister *reg, int idx)$/;"	f
build_line	pcm-iio.cpp	/^string build_line(string init, string name, bool last_char = true, char this_char = '_')$/;"	f
build_pci_header	pcm-iio.cpp	/^string build_pci_header(const PCIDB & pciDB, uint32_t column_width, struct pci p, int part = -1, uint32_t level = 0)$/;"	f
build_registers	pcm-latency.cpp	/^void build_registers(PCM *m, PCM::ExtendedCustomCoreEventDescription conf, bool enable_pmm, bool enable_verbose)$/;"	f
bus	WinMSRDriver/Win7/msrstruct.h	/^    ULONG bus, dev, func, reg, bytes;$/;"	m	struct:PCICFG_Request
bus	pci.h	/^    uint32 bus;$/;"	m	class:PciHandle
bus	pci.h	/^    uint32 bus;$/;"	m	class:PciHandleM
bus	pci.h	/^    uint32 bus;$/;"	m	class:PciHandleMM
busNumber	cpucounters.h	/^        std::string busNumber;$/;"	m	struct:PCM::SimplePCIeDevInfo
busno	lspci.h	/^        uint8_t busno; \/* holding busno for each IIO stack *\/$/;"	m	struct:iio_skx::__anon9
busno	lspci.h	/^    uint8_t busno;$/;"	m	struct:bdf
bytes	WinMSRDriver/Win7/msrstruct.h	/^    ULONG bus, dev, func, reg, bytes;$/;"	m	struct:PCICFG_Request
bytes	daemon/daemon/common.h	/^		uint64 bytes;$/;"	m	struct:PCMDaemon::PCMQPILinkCounter
calculate_bandwidth	pcm-memory.cpp	/^void calculate_bandwidth(PCM *m, const ServerUncorePowerState uncState1[], const ServerUncorePowerState uncState2[], uint64 elapsedTime, bool csv, bool & csvheader, uint32 no_columns, bool PMM, const bool show_channel_output)$/;"	f
calculate_bandwidth	pcm-memory.cpp	/^void calculate_bandwidth(PCM *m, const ServerUncorePowerState uncState1[], const ServerUncorePowerState uncState2[], uint64 elapsedTime, bool csv, bool & csvheader, uint32 no_columns, int rankA, int rankB)$/;"	f
canUsePerf	cpucounters.h	/^    bool canUsePerf;$/;"	m	class:PCM
cboPMUs	cpucounters.h	/^    std::vector<std::vector<UncorePMU> > cboPMUs;$/;"	m	class:PCM
ch_mask	types.h	/^            uint64 ch_mask : 8;$/;"	m	struct:IIOPMUCNTCTLRegister::__anon39::__anon40
channels	daemon/daemon/common.h	/^		PCMMemoryChannelCounter channels[MEMORY_MAX_IMC_CHANNELS];$/;"	m	struct:PCMDaemon::PCMMemorySocketCounter
checkAccessAndProgramPCM	daemon/daemon/daemon.cpp	/^	void Daemon::checkAccessAndProgramPCM()$/;"	f	class:PCMDaemon::Daemon
checkActiveAndOpened	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::checkActiveAndOpened (const char* memberFunction)$/;"	f	class:PcmMsrClientClassName
checkAlignment	daemon/daemon/test/main.cpp	/^void checkAlignment(char const * debugMessage, void* ptr)$/;"	f
checkCustomCoreProgramming	cpucounters.cpp	/^uint32 PCM::checkCustomCoreProgramming(std::shared_ptr<SafeMsrHandle> msr)$/;"	f	class:PCM
checkModel	cpucounters.cpp	/^bool PCM::checkModel()$/;"	f	class:PCM
check_status	pcm-latency.cpp	/^void check_status(PCM *m, PCM::ErrorCode status)$/;"	f
checksum	types.h	/^    unsigned char checksum;$/;"	m	struct:MCFGHeader
child_pci_devs	lspci.h	/^            std::vector<struct pci> child_pci_devs; \/* Contain child switch and end-point devices *\/$/;"	m	struct:iio_skx::__anon9::__anon10
cleanup	cpucounters.cpp	/^void PCM::cleanup()$/;"	f	class:PCM
cleanup	cpucounters.h	/^    void cleanup()$/;"	f	class:UncorePMU
cleanup	daemon/daemon/daemon.cpp	/^	void Daemon::cleanup()$/;"	f	class:PCMDaemon::Daemon
cleanupMemTest	cpucounters.cpp	/^void ServerPCICFGUncore::cleanupMemTest(const ServerPCICFGUncore::MemTestParam & param)$/;"	f	class:ServerPCICFGUncore
cleanupPMU	cpucounters.cpp	/^void PCM::cleanupPMU()$/;"	f	class:PCM
cleanupPMUs	cpucounters.cpp	/^void ServerPCICFGUncore::cleanupPMUs()$/;"	f	class:ServerPCICFGUncore
cleanupQPIHandles	cpucounters.cpp	/^void ServerPCICFGUncore::cleanupQPIHandles()$/;"	f	class:ServerPCICFGUncore
cleanupUncorePMUs	cpucounters.cpp	/^void PCM::cleanupUncorePMUs()$/;"	f	class:PCM
clientBW	cpucounters.h	/^    std::shared_ptr<ClientBW> clientBW;$/;"	m	class:PCM
clientBW	width_extender.h	/^        std::shared_ptr<ClientBW> clientBW;$/;"	m	struct:CounterWidthExtender::ClientImcReadsCounter
clientBW	width_extender.h	/^        std::shared_ptr<ClientBW> clientBW;$/;"	m	struct:CounterWidthExtender::ClientImcWritesCounter
clientBW	width_extender.h	/^        std::shared_ptr<ClientBW> clientBW;$/;"	m	struct:CounterWidthExtender::ClientIoRequestsCounter
clientClose	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::clientClose(void)$/;"	f	class:PcmMsrClientClassName
clientImcReads	cpucounters.h	/^    std::shared_ptr<CounterWidthExtender> clientImcReads;$/;"	m	class:PCM
clientImcWrites	cpucounters.h	/^    std::shared_ptr<CounterWidthExtender> clientImcWrites;$/;"	m	class:PCM
clientIoRequests	cpucounters.h	/^    std::shared_ptr<CounterWidthExtender> clientIoRequests;$/;"	m	class:PCM
close	cpucounters.cpp	/^    void close()$/;"	f	class:PerfVirtualControlRegister	file:
closeConnection	MacMSRDriver/MSRAccessor.cpp	/^void MSRAccessor::closeConnection(){$/;"	f	class:MSRAccessor
closeMSRClient	MacMSRDriver/DriverInterface.c	/^kern_return_t closeMSRClient(io_connect_t connect)$/;"	f
closeUserClient	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::closeUserClient(void)$/;"	f	class:PcmMsrClientClassName
cmask	types.h	/^            uint64 cmask : 8;$/;"	m	struct:EventSelectRegister::__anon28::__anon29
cmask	types.h	/^            uint64 cmask : 8;$/;"	m	struct:UncoreEventSelectRegister::__anon32::__anon33
collect_afterstate_core	pcm-latency.cpp	/^void collect_afterstate_core(PCM *m)$/;"	f
collect_afterstate_uncore	pcm-latency.cpp	/^void collect_afterstate_uncore(PCM *m)$/;"	f
collect_beforestate_core	pcm-latency.cpp	/^void collect_beforestate_core(PCM *m)$/;"	f
collect_beforestate_uncore	pcm-latency.cpp	/^void collect_beforestate_uncore(PCM *m)$/;"	f
collect_data	pcm-iio.cpp	/^void collect_data(PCM *m, vector<struct iio_skx> iio_skx_v, vector<struct counter> &ctrs)$/;"	f
collect_data	pcm-latency.cpp	/^void collect_data(PCM *m, bool enable_pmm, bool enable_verbose, int delay_ms)$/;"	f
collectionInformation_	PCM-Service_Win/PCMService.h	/^        MeasureThread(System::Diagnostics::EventLog^ log, int sampleRate, CollectionInformation^ collectionInformation) : log_(log), sampleRate_(sampleRate), collectionInformation_(collectionInformation)$/;"	f	class:PCMServiceNS::MeasureThread
collectionInformation_	PCM-Service_Win/PCMService.h	/^        const CollectionInformation^ collectionInformation_;$/;"	m	class:PCMServiceNS::MeasureThread
collectionTimeAfter_	daemon/daemon/daemon.h	/^		uint64 collectionTimeBefore_, collectionTimeAfter_;$/;"	m	class:PCMDaemon::Daemon
collectionTimeBefore_	daemon/daemon/daemon.h	/^		uint64 collectionTimeBefore_, collectionTimeAfter_;$/;"	m	class:PCMDaemon::Daemon
combine_stack_name_and_counter_names	pcm-iio.cpp	/^vector<string> combine_stack_name_and_counter_names(string stack_name)$/;"	f
components	PCM-Service_Win/PCMInstaller.h	/^		System::ComponentModel::Container ^components;$/;"	m	class:PMUService::ProjectInstaller
components	PCM-Service_Win/PCMService.h	/^        System::ComponentModel::Container ^components;$/;"	m	class:PCMServiceNS::PCMService
computeNominalFrequency	cpucounters.cpp	/^void PCM::computeNominalFrequency()$/;"	f	class:PCM
computeQPISpeed	cpucounters.cpp	/^uint64 ServerPCICFGUncore::computeQPISpeed(const uint32 core_nr, const int cpumodel)$/;"	f	class:ServerPCICFGUncore
computeQPISpeedBeckton	cpucounters.cpp	/^void PCM::computeQPISpeedBeckton(int core_nr)$/;"	f	class:PCM
condVar	cpucounters.cpp	/^    std::condition_variable condVar;$/;"	m	class:CoreTaskQueue	file:
conf	pcm-core.cpp	/^	PCM::ExtendedCustomCoreEventDescription conf;$/;"	v
connect	MacMSRDriver/MSRAccessor.h	/^    io_connect_t connect;$/;"	m	class:MSRAccessor
connect	daemon/client/client.cpp	/^	void Client::connect()$/;"	f	class:PCMDaemon::Client
controlReg	cpucounters.cpp	/^    std::shared_ptr<PerfVirtualControlRegister> controlReg;$/;"	m	class:PerfVirtualCounterRegister	file:
controlRegs	cpucounters.cpp	/^    std::array<std::shared_ptr<PerfVirtualControlRegister>, 4> controlRegs;$/;"	m	class:PerfVirtualFilterRegister	file:
convertUnknownToInt	cpucounters.cpp	/^int convertUnknownToInt(size_t size, char* value)$/;"	f
core	PCM-Service_Win/PCMService.h	/^        bool core;$/;"	m	struct:PCMServiceNS::CollectionInformation
core	daemon/daemon/common.h	/^		PCMCore core;$/;"	m	struct:PCMDaemon::SharedPCMCounters
core	pcm-latency.cpp	/^    vector<struct core_info> core;$/;"	m	struct:res_core	file:
coreCStateMsr	cpucounters.h	/^    uint64 * coreCStateMsr;    \/\/ MSR addresses of core C-state free-running counters$/;"	m	class:PCM
coreEventDesc	cpucounters.h	/^    CustomCoreEventDescription coreEventDesc[4];$/;"	m	class:PCM
coreId	daemon/daemon/common.h	/^		uint64 coreId;$/;"	m	struct:PCMDaemon::PCMCoreCounter
coreStatesAfter_	daemon/daemon/daemon.h	/^		std::vector<CoreCounterState> coreStatesBefore_, coreStatesAfter_;$/;"	m	class:PCMDaemon::Daemon
coreStatesBefore_	daemon/daemon/daemon.h	/^		std::vector<CoreCounterState> coreStatesBefore_, coreStatesAfter_;$/;"	m	class:PCMDaemon::Daemon
coreTaskQueues	cpucounters.h	/^    std::vector<std::shared_ptr<CoreTaskQueue> > coreTaskQueues;$/;"	m	class:PCM
core_events	pmu-query.py	/^        core_events=json.load(json_core_data)$/;"	v
core_events	pmu-query.py	/^core_events=[]$/;"	v
core_fixed_counter_num_max	cpucounters.h	/^    uint32 core_fixed_counter_num_max;$/;"	m	class:PCM
core_fixed_counter_num_used	cpucounters.h	/^    uint32 core_fixed_counter_num_used;$/;"	m	class:PCM
core_fixed_counter_width	cpucounters.h	/^    uint32 core_fixed_counter_width;$/;"	m	class:PCM
core_gen_counter_num_max	cpucounters.h	/^    uint32 core_gen_counter_num_max;$/;"	m	class:PCM
core_gen_counter_num_used	cpucounters.h	/^    uint32 core_gen_counter_num_used;$/;"	m	class:PCM
core_gen_counter_width	cpucounters.h	/^    uint32 core_gen_counter_width;$/;"	m	class:PCM
core_id	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t core_id;$/;"	m	struct:__anon22
core_id	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t core_id;$/;"	m	struct:__anon23
core_id	WinMSRDriver/Win7/msrstruct.h	/^    int core_id;$/;"	m	struct:MSR_Request
core_id	cpucounters.h	/^    int32 core_id;$/;"	m	struct:TopologyEntry
core_id	pcm-latency.cpp	/^    int core_id;$/;"	m	struct:core_info	file:
core_info	pcm-latency.cpp	/^    core_info() : core_id(0), socket(0), thread(0), latency(0.), occ_rd(0.), insert_rd(0.) {}$/;"	f	struct:core_info
core_info	pcm-latency.cpp	/^struct core_info$/;"	s	file:
core_latency	pcm-latency.cpp	/^} core_latency[10];$/;"	v	typeref:struct:res_core
core_path	pmu-query.py	/^                core_path = model['Filename']$/;"	v
core_path	pmu-query.py	/^    core_path = ''$/;"	v
cores	daemon/daemon/common.h	/^		PCMCoreCounter cores[MAX_CPU_CORES];$/;"	m	struct:PCMDaemon::PCMCore
count_mode	types.h	/^            uint64 count_mode : 2;$/;"	m	struct:BecktonUncorePMUCNTCTLRegister::__anon37::__anon38
counter	lspci.h	/^struct counter {$/;"	s
counterControl	cpucounters.h	/^    HWRegisterPtr counterControl[4];$/;"	m	class:UncorePMU
counterValue	cpucounters.h	/^    HWRegisterPtr counterValue[4];$/;"	m	class:UncorePMU
counter_width	width_extender.h	/^    uint64 counter_width;$/;"	m	class:CounterWidthExtender
counters	realtime.cpp	/^AsynchronCounterState counters;$/;"	v
countersHaveUpdated	daemon/client/client.cpp	/^	bool Client::countersHaveUpdated()$/;"	f	class:PCMDaemon::Client
cpuGetTopoData	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^void cpuGetTopoData(void* pTopos){$/;"	f
cpuReadMSR	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^void cpuReadMSR(void* pIData){$/;"	f
cpuWriteMSR	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^void cpuWriteMSR(void* pIDatas){$/;"	f
cpu_family	cpucounters.h	/^    int32 cpu_family;$/;"	m	class:PCM
cpu_id	msr.h	/^    uint32 cpu_id;$/;"	m	class:MsrHandle
cpu_microcode_level	cpucounters.h	/^    int64 cpu_microcode_level;$/;"	m	class:PCM
cpu_model	cpucounters.h	/^    int32 cpu_model;$/;"	m	class:PCM
cpu_model	cpucounters.h	/^    int32 cpu_model;$/;"	m	class:ServerPCICFGUncore
cpu_num	MacMSRDriver/MSRKernel.h	/^    uint32_t cpu_num;$/;"	m	struct:__anon25
cpu_num	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t cpu_num;$/;"	m	struct:__anon20
cpu_set_t	cpucounters.cpp	209;"	d	file:
cpu_stepping	cpucounters.h	/^    int32 cpu_stepping;$/;"	m	class:PCM
cpuid	MacMSRDriver/PcmMsr/PcmMsr.cpp	25;"	d	file:
createIntelPerfMonDevice	cpucounters.cpp	/^PciHandleType * ServerPCICFGUncore::createIntelPerfMonDevice(uint32 groupnr_, int32 bus_, uint32 dev_, uint32 func_, bool checkVendor)$/;"	f	class:ServerPCICFGUncore
creatorID	types.h	/^    unsigned creatorID;$/;"	m	struct:MCFGHeader
creatorRevision	types.h	/^    unsigned creatorRevision;$/;"	m	struct:MCFGHeader
cstates1	cpuasynchcounter.h	/^    CoreCounterState * cstates1, * cstates2;$/;"	m	class:AsynchronCounterState
cstates2	cpuasynchcounter.h	/^    CoreCounterState * cstates1, * cstates2;$/;"	m	class:AsynchronCounterState
ctr_data	lspci.h	/^typedef std::map<std::pair<h_id,v_id>,uint64_t> ctr_data;$/;"	t
currentMemoryBandwidth	realtime.cpp	/^double currentMemoryBandwidth()$/;"	f
cvt_ds	types.h	/^union cvt_ds$/;"	u
cycles	daemon/daemon/common.h	/^		uint64 cycles;$/;"	m	struct:PCMDaemon::PCMCoreCounter
cyclesToGetPCMState	daemon/daemon/common.h	/^		uint64 cyclesToGetPCMState;$/;"	m	struct:PCMDaemon::SharedPCMState
dashdash	freegetopt/getopt.cpp	/^static int dashdash = 0;               \/* True if "--" option reached *\/$/;"	v	file:
data	cpucounters.h	/^    uint64 data;$/;"	m	class:SimpleCounterState
data	lspci.h	/^    std::vector<result_content> data;$/;"	m	struct:counter
data	memoptest.cpp	/^    int data[3];$/;"	m	struct:T	file:
data	pcm-iio.cpp	/^struct data{$/;"	s	file:
data	readmem.cpp	/^    int data[15];$/;"	m	struct:T	file:
data	realtime.cpp	/^    int data[15];$/;"	m	struct:T	file:
debugMode_	daemon/daemon/daemon.h	/^		bool debugMode_;$/;"	m	class:PCMDaemon::Daemon
decrementInstanceSemaphore	cpucounters.cpp	/^bool PCM::decrementInstanceSemaphore()$/;"	f	class:PCM
decrementNumClients	MacMSRDriver/DriverInterface.c	/^kern_return_t decrementNumClients(io_connect_t connect, uint32_t* num_insts)$/;"	f
decrementNumInstances	MacMSRDriver/MSRAccessor.cpp	/^uint32_t MSRAccessor::decrementNumInstances(){$/;"	f	class:MSRAccessor
decrementNumInstances	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^IOReturn PcmMsrDriverClassName::decrementNumInstances(uint32_t* num_insts){$/;"	f	class:PcmMsrDriverClassName
decrementNumInstances	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::decrementNumInstances(uint32_t* num_insts){$/;"	f	class:PcmMsrClientClassName
decrementNumInstances	cpucounters.cpp	/^uint32 PCM::decrementNumInstances()$/;"	f	class:PCM
decrementNumInstances	msr.cpp	/^uint32 MsrHandle::decrementNumInstances()$/;"	f	class:MsrHandle
decrementNumInstances	msr.h	/^    uint32 decrementNumInstances()$/;"	f	class:SafeMsrHandle
default_freq_band	pcm-power.cpp	/^int default_freq_band[3] = { 12, 20, 40 };$/;"	v
description	pcm-core.cpp	/^	char * description;$/;"	m	struct:CoreEvent	file:
description	pcm-tsx.cpp	/^    const char * description;$/;"	m	struct:TSXEvent	file:
destroyMSR	cpucounters.cpp	/^void PCM::destroyMSR()$/;"	f	class:PCM
detectModel	cpucounters.cpp	/^bool PCM::detectModel()$/;"	f	class:PCM
detectNominalFrequency	cpucounters.cpp	/^bool PCM::detectNominalFrequency()$/;"	f	class:PCM
dev	WinMSRDriver/Win7/msrstruct.h	/^    ULONG bus, dev, func, reg, bytes;$/;"	m	struct:PCICFG_Request
device	pci.h	/^    uint32 device;$/;"	m	class:PciHandle
device	pci.h	/^    uint32 device;$/;"	m	class:PciHandleM
device	pci.h	/^    uint32 device;$/;"	m	class:PciHandleMM
deviceControl	WinMSRDriver/Win7/msrmain.c	/^DRIVER_DISPATCH deviceControl;$/;"	v
deviceControl	WinMSRDriver/Win7/msrmain.c	/^NTSTATUS deviceControl(PDEVICE_OBJECT DeviceObject, PIRP Irp)$/;"	f
device_id	lspci.h	/^            uint16_t device_id;$/;"	m	struct:pci::__anon1::__anon2
devno	lspci.h	/^    uint8_t devno;$/;"	m	struct:bdf
didTerminate	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^bool PcmMsrClientClassName::didTerminate(IOService* provider, IOOptionBits options, bool* defer)$/;"	f	class:PcmMsrClientClassName
disableForceRTMAbortMode	cpucounters.cpp	/^void PCM::disableForceRTMAbortMode()$/;"	f	class:PCM
disableJKTWorkaround	cpucounters.h	/^    inline void disableJKTWorkaround() { disable_JKT_workaround = true; }$/;"	f	class:PCM
disableNMIWatchdog	cpucounters.cpp	/^void disableNMIWatchdog()$/;"	f
disable_JKT_workaround	cpucounters.h	/^    bool disable_JKT_workaround;$/;"	m	class:PCM
discoverSystemTopology	cpucounters.cpp	/^bool PCM::discoverSystemTopology()$/;"	f	class:PCM
discover_pci_tree	pcm-iio.cpp	/^void discover_pci_tree(const vector<uint32_t> & busno, uint8_t socket_id, vector<struct iio_skx> &v_iio_skx)$/;"	f
display	pcm-iio.cpp	/^void display(const vector<string> &buff)$/;"	f
display_bandwidth	pcm-memory.cpp	/^void display_bandwidth(PCM *m, memdata_t *md, uint32 no_columns, const bool show_channel_output)$/;"	f
display_bandwidth_csv	pcm-memory.cpp	/^void display_bandwidth_csv(PCM *m, memdata_t *md, uint64 elapsedTime, const bool show_channel_output)$/;"	f
display_bandwidth_csv_header	pcm-memory.cpp	/^void display_bandwidth_csv_header(PCM *m, memdata_t *md, const bool show_channel_output)$/;"	f
divider	cpucounters.h	/^        int divider[4]; \/\/We usually like to have some kind of divider (i.e. \/10e6 )$/;"	m	struct:PCM::CustomIIOEventDescription
divider	lspci.h	/^    int divider;$/;"	m	struct:counter
doMeasurements	PCM-Service_Win/PCMService.h	/^        void doMeasurements( void )$/;"	f	class:PCMServiceNS::MeasureThread
doMemTest	cpucounters.cpp	/^void ServerPCICFGUncore::doMemTest(const ServerPCICFGUncore::MemTestParam & param)$/;"	f	class:ServerPCICFGUncore
dos2unix	pcm-iio.cpp	/^std::string dos2unix(std::string in)$/;"	f
download_flag	pmu-query.py	/^            download_flag=True$/;"	v
download_flag	pmu-query.py	/^download_flag = False$/;"	v
dramEnergy	daemon/daemon/common.h	/^		double dramEnergy;$/;"	m	struct:PCMDaemon::PCMMemorySocketCounter
dramEnergyMetricsAvailable	cpucounters.h	/^    bool dramEnergyMetricsAvailable() const$/;"	f	class:PCM
dramEnergyMetricsAvailable	daemon/daemon/common.h	/^		bool dramEnergyMetricsAvailable;$/;"	m	struct:PCMDaemon::PCMMemory
dram_energy_status	cpucounters.h	/^    std::vector<std::shared_ptr<CounterWidthExtender> > dram_energy_status;$/;"	m	class:PCM
driver	msr.cpp	/^MSRAccessor * MsrHandle::driver = NULL;$/;"	m	class:MsrHandle	file:
driverDescription_	PCM_Win/windriver.h	/^    const std::wstring driverDescription_;$/;"	m	class:Driver
driverName_	PCM_Win/windriver.h	/^    const std::wstring driverName_;$/;"	m	class:Driver
driverPath	PCM_Win/windriver.h	/^    const std::wstring& driverPath() const$/;"	f	class:Driver
driverPath_	PCM_Win/windriver.h	/^    const std::wstring driverPath_;$/;"	m	class:Driver
driver_filename	winpmem/winpmem.h	/^  TCHAR driver_filename[MAX_PATH];$/;"	m	class:WinPmem
driver_filename	winpmem/winpmem.h	/^static TCHAR driver_filename[MAX_PATH];$/;"	v
drv_	PCM-Service_Win/PCMService.h	/^        Driver* drv_;$/;"	m	class:PCMServiceNS::PCMService
dummyFunction	WinMSRDriver/Win7/msrmain.c	/^NTSTATUS dummyFunction(PDEVICE_OBJECT DeviceObject, PIRP Irp)$/;"	f
eax	cpucounters.cpp	/^    struct { unsigned int eax, ebx, ecx, edx; } reg;$/;"	m	struct:PCM_CPUID_INFO::__anon1	file:
ebx	cpucounters.cpp	/^    struct { unsigned int eax, ebx, ecx, edx; } reg;$/;"	m	struct:PCM_CPUID_INFO::__anon1	file:
ecx	cpucounters.cpp	/^    struct { unsigned int eax, ebx, ecx, edx; } reg;$/;"	m	struct:PCM_CPUID_INFO::__anon1	file:
edcPMUs	cpucounters.h	/^    std::vector<UncorePMU> edcPMUs;$/;"	m	class:ServerPCICFGUncore
edge	types.h	/^            uint64 edge : 1;$/;"	m	struct:EventSelectRegister::__anon28::__anon29
edge	types.h	/^            uint64 edge : 1;$/;"	m	struct:UncoreEventSelectRegister::__anon32::__anon33
edge_det	types.h	/^            uint64 edge_det : 1;$/;"	m	struct:IIOPMUCNTCTLRegister::__anon39::__anon40
edx	cpucounters.cpp	/^    struct { unsigned int eax, ebx, ecx, edx; } reg;$/;"	m	struct:PCM_CPUID_INFO::__anon1	file:
en	types.h	/^            uint64 en : 1;$/;"	m	struct:BecktonUncorePMUCNTCTLRegister::__anon37::__anon38
enable	types.h	/^            uint64 enable : 1;$/;"	m	struct:EventSelectRegister::__anon28::__anon29
enable	types.h	/^            uint64 enable : 1;$/;"	m	struct:IIOPMUCNTCTLRegister::__anon39::__anon40
enable	types.h	/^            uint64 enable : 1;$/;"	m	struct:UncoreEventSelectRegister::__anon32::__anon33
enableForceRTMAbortMode	cpucounters.cpp	/^void PCM::enableForceRTMAbortMode()$/;"	f	class:PCM
enableJKTWorkaround	cpucounters.cpp	/^void PCM::enableJKTWorkaround(bool enable)$/;"	f	class:PCM
enableJKTWorkaround	cpucounters.cpp	/^void ServerPCICFGUncore::enableJKTWorkaround(bool enable)$/;"	f	class:ServerPCICFGUncore
enableNMIWatchdog	cpucounters.cpp	/^void enableNMIWatchdog()$/;"	f
enable_pmi	types.h	/^            uint64 enable_pmi : 1;$/;"	m	struct:UncoreEventSelectRegister::__anon32::__anon33
enable_pmi0	types.h	/^            uint64 enable_pmi0 : 1;$/;"	m	struct:FixedEventControlRegister::__anon30::__anon31
enable_pmi1	types.h	/^            uint64 enable_pmi1 : 1;$/;"	m	struct:FixedEventControlRegister::__anon30::__anon31
enable_pmi2	types.h	/^            uint64 enable_pmi2 : 1;$/;"	m	struct:FixedEventControlRegister::__anon30::__anon31
endBusNumber	types.h	/^    unsigned char endBusNumber;$/;"	m	struct:MCFGRecord
energy_status	cpucounters.h	/^    std::vector<std::shared_ptr<CounterWidthExtender> > energy_status;$/;"	m	class:PCM
enumeratePerfPMUs	cpucounters.cpp	/^std::vector<int> enumeratePerfPMUs(const std::string & type, int max_id)$/;"	f
errorMessage	cpucounters.h	/^    std::string errorMessage;$/;"	m	class:PCM
event	cpucounters.cpp	/^    perf_event_attr event;$/;"	m	class:PerfVirtualControlRegister	file:
event	pcm-tsx.cpp	/^    unsigned char event;$/;"	m	struct:TSXEvent	file:
eventDefinition	pcm-tsx.cpp	/^TSXEvent eventDefinition[] = {$/;"	v
eventNames	cpucounters.h	/^        std::string eventNames[4];$/;"	m	struct:PCM::CustomIIOEventDescription
eventOpcodes	cpucounters.h	/^        IIOPMUCNTCTLRegister eventOpcodes[4];$/;"	m	struct:PCM::CustomIIOEventDescription
event_number	cpucounters.h	/^        int32 event_number, umask_value;$/;"	m	struct:PCM::CustomCoreEventDescription
event_select	types.h	/^            uint64 event_select : 8;$/;"	m	struct:EventSelectRegister::__anon28::__anon29
event_select	types.h	/^            uint64 event_select : 8;$/;"	m	struct:IIOPMUCNTCTLRegister::__anon39::__anon40
event_select	types.h	/^            uint64 event_select : 8;$/;"	m	struct:UncoreEventSelectRegister::__anon32::__anon33
events	pcm-core.cpp	/^} events[4];$/;"	v	typeref:struct:CoreEvent
evnt0	types.h	/^            uint64 evnt0 : 3;$/;"	m	struct:BecktonUncorePMUZDPCTLFVCRegister::__anon34::__anon35
evnt0	types.h	/^            uint64 evnt0 : 3;$/;"	m	struct:BecktonUncorePMUZDPCTLFVCRegister::__anon34::__anon36
evnt1	types.h	/^            uint64 evnt1 : 3;$/;"	m	struct:BecktonUncorePMUZDPCTLFVCRegister::__anon34::__anon35
evnt1	types.h	/^            uint64 evnt1 : 3;$/;"	m	struct:BecktonUncorePMUZDPCTLFVCRegister::__anon34::__anon36
evnt2	types.h	/^            uint64 evnt2 : 3;$/;"	m	struct:BecktonUncorePMUZDPCTLFVCRegister::__anon34::__anon35
evnt2	types.h	/^            uint64 evnt2 : 3;$/;"	m	struct:BecktonUncorePMUZDPCTLFVCRegister::__anon34::__anon36
evnt3	types.h	/^            uint64 evnt3 : 3;$/;"	m	struct:BecktonUncorePMUZDPCTLFVCRegister::__anon34::__anon35
evnt3	types.h	/^            uint64 evnt3 : 3;$/;"	m	struct:BecktonUncorePMUZDPCTLFVCRegister::__anon34::__anon36
execUsage	daemon/daemon/common.h	/^		double execUsage;$/;"	m	struct:PCMDaemon::PCMCoreCounter
exist	lspci.h	/^    bool exist = false;$/;"	m	struct:pci
exists	pci.cpp	/^bool PciHandle::exists(uint32 groupnr_, uint32 bus_, uint32 device_, uint32 function_)$/;"	f	class:PciHandle
exists	pci.cpp	/^bool PciHandleM::exists(uint32 \/*groupnr_*\/, uint32 \/* bus_*\/, uint32 \/* device_ *\/, uint32 \/* function_ *\/)$/;"	f	class:PciHandleM
exists	pci.cpp	/^bool PciHandleMM::exists(uint32 \/*groupnr_*\/, uint32 bus_, uint32 device_, uint32 function_)$/;"	f	class:PciHandleMM
exit_cleanup	utils.cpp	/^void exit_cleanup(void)$/;"	f
extended_value	width_extender.h	/^    uint64 extended_value;$/;"	m	class:CounterWidthExtender
externalMethod	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::externalMethod(uint32_t selector, IOExternalMethodArguments* args,													IOExternalMethodDispatch* dispatch, OSObject* target, void* reference)$/;"	f	class:PcmMsrClientClassName
extractCoreFixedCounterValue	cpucounters.cpp	/^uint64 PCM::extractCoreFixedCounterValue(uint64 val)$/;"	f	class:PCM
extractCoreGenCounterValue	cpucounters.cpp	/^uint64 PCM::extractCoreGenCounterValue(uint64 val)$/;"	f	class:PCM
extractQOSMonitoring	cpucounters.cpp	/^uint64 PCM::extractQOSMonitoring(uint64 val)$/;"	f	class:PCM
extractThermalHeadroom	cpucounters.cpp	/^int32 extractThermalHeadroom(uint64 val)$/;"	f
extractUncoreFixedCounterValue	cpucounters.cpp	/^uint64 PCM::extractUncoreFixedCounterValue(uint64 val)$/;"	f	class:PCM
extractUncoreGenCounterValue	cpucounters.cpp	/^uint64 PCM::extractUncoreGenCounterValue(uint64 val)$/;"	f	class:PCM
extract_bits	cpucounters.cpp	/^uint64 extract_bits(uint64 myin, uint32 beg, uint32 end)$/;"	f
extract_bits_ui	cpucounters.cpp	/^uint32 extract_bits_ui(uint32 myin, uint32 beg, uint32 end)$/;"	f
fProvider	MacMSRDriver/PcmMsr/PcmMsrClient.h	/^    PcmMsrDriverClassName*                  fProvider;$/;"	m	class:PcmMsrClientClassName
fc_mask	types.h	/^            uint64 fc_mask : 3;$/;"	m	struct:IIOPMUCNTCTLRegister::__anon39::__anon40
fd	cpucounters.cpp	/^    int fd;$/;"	m	class:PerfVirtualControlRegister	file:
fd	mmio.h	/^    int32 fd;$/;"	m	class:MMIORange
fd	pci.h	/^    int32 fd;$/;"	m	class:PciHandleMM
fd_	winpmem/winpmem.h	/^  HANDLE fd_;$/;"	m	class:WinPmem
fib	realtime.cpp	/^long long int fib(long long int num)$/;"	f
fields	types.h	/^        } fields; \/\/ nehalem-ex version$/;"	m	union:BecktonUncorePMUZDPCTLFVCRegister::__anon34	typeref:struct:BecktonUncorePMUZDPCTLFVCRegister::__anon34::__anon35
fields	types.h	/^        } fields;$/;"	m	union:BecktonUncorePMUCNTCTLRegister::__anon37	typeref:struct:BecktonUncorePMUCNTCTLRegister::__anon37::__anon38
fields	types.h	/^        } fields;$/;"	m	union:EventSelectRegister::__anon28	typeref:struct:EventSelectRegister::__anon28::__anon29
fields	types.h	/^        } fields;$/;"	m	union:FixedEventControlRegister::__anon30	typeref:struct:FixedEventControlRegister::__anon30::__anon31
fields	types.h	/^        } fields;$/;"	m	union:IIOPMUCNTCTLRegister::__anon39	typeref:struct:IIOPMUCNTCTLRegister::__anon39::__anon40
fields	types.h	/^        } fields;$/;"	m	union:UncoreEventSelectRegister::__anon32	typeref:struct:UncoreEventSelectRegister::__anon32::__anon33
fields_wsm	types.h	/^        } fields_wsm; \/\/ westmere-ex version$/;"	m	union:BecktonUncorePMUZDPCTLFVCRegister::__anon34	typeref:struct:BecktonUncorePMUZDPCTLFVCRegister::__anon34::__anon36
filename	pmu-query.py	/^            filename=a$/;"	v
filename	pmu-query.py	/^filename=None$/;"	v
filter	cpucounters.h	/^    HWRegisterPtr filter[2];$/;"	m	class:UncorePMU
filterNr	cpucounters.cpp	/^    int filterNr;$/;"	m	class:PerfVirtualFilterRegister	file:
findEvent	pcm-tsx.cpp	/^int findEvent(const char * name)$/;"	f
fixed	cpucounters.cpp	/^    bool fixed;$/;"	m	class:PerfVirtualControlRegister	file:
fixedCfg	cpucounters.h	/^        FixedEventControlRegister * fixedCfg; \/\/ if NULL, then default configuration performed for fixed counters$/;"	m	struct:PCM::ExtendedCustomCoreEventDescription
fixedCounterControl	cpucounters.h	/^    HWRegisterPtr fixedCounterControl;$/;"	m	class:UncorePMU
fixedCounterValue	cpucounters.h	/^    HWRegisterPtr fixedCounterValue;$/;"	m	class:UncorePMU
flag_mode	types.h	/^            uint64 flag_mode : 1;$/;"	m	struct:BecktonUncorePMUCNTCTLRegister::__anon37::__anon38
float_format	pcm.cpp	/^double float_format(IntType n)$/;"	f
forceRTMAbortMode	cpucounters.h	/^    bool forceRTMAbortMode;$/;"	m	class:PCM
free	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^void PcmMsrDriverClassName::free()$/;"	f	class:PcmMsrDriverClassName
freeRMID	cpucounters.cpp	/^void PCM::freeRMID()$/;"	f	class:PCM
freezeCounters	cpucounters.cpp	/^void ServerPCICFGUncore::freezeCounters()$/;"	f	class:ServerPCICFGUncore
freezeServerUncoreCounters	cpucounters.cpp	/^void PCM::freezeServerUncoreCounters()$/;"	f	class:PCM
freq_band	pcm-power.cpp	/^int freq_band[3];$/;"	v
func	WinMSRDriver/Win7/msrstruct.h	/^    ULONG bus, dev, func, reg, bytes;$/;"	m	struct:PCICFG_Request
funcno	lspci.h	/^    uint8_t funcno;$/;"	m	struct:bdf
function	pci.h	/^    uint32 function;$/;"	m	class:PciHandle
function	pci.h	/^    uint32 function;$/;"	m	class:PciHandleM
function	pci.h	/^    uint32 function;$/;"	m	class:PciHandleMM
fvid	types.h	/^            uint64 fvid : 5;$/;"	m	struct:BecktonUncorePMUZDPCTLFVCRegister::__anon34::__anon35
fvid	types.h	/^            uint64 fvid : 6;$/;"	m	struct:BecktonUncorePMUZDPCTLFVCRegister::__anon34::__anon36
g_pci_driver	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^PcmMsrDriverClassName *g_pci_driver = NULL;$/;"	v
get	cpuasynchcounter.h	/^    T get(int param, uint32 core)$/;"	f	class:AsynchronCounterState
get	cpuasynchcounter.h	/^    T get(uint32 core)$/;"	f	class:AsynchronCounterState
getActiveAverageFrequency	cpucounters.h	/^double getActiveAverageFrequency(const CounterStateType & before, const CounterStateType & after) \/\/ in Hz$/;"	f
getActiveRelativeFrequency	cpucounters.h	/^double getActiveRelativeFrequency(const CounterStateType & before, const CounterStateType & after) \/\/ fraction of nominal frequency$/;"	f
getAllCounterStates	cpucounters.cpp	/^void PCM::getAllCounterStates(SystemCounterState & systemState, std::vector<SocketCounterState> & socketStates, std::vector<CoreCounterState> & coreStates)$/;"	f	class:PCM
getAllIncomingQPILinkBytes	cpucounters.h	/^inline uint64 getAllIncomingQPILinkBytes(const SystemCounterState & before, const SystemCounterState & after)$/;"	f
getAllIncomingQPILinkBytes	cpucounters.h	/^inline uint64 getAllIncomingQPILinkBytes(const SystemCounterState & now)$/;"	f
getAllOutgoingQPILinkBytes	cpucounters.h	/^inline uint64 getAllOutgoingQPILinkBytes(const SystemCounterState & before, const SystemCounterState & after)$/;"	f
getAverageFrequency	cpucounters.h	/^double getAverageFrequency(const CounterStateType & before, const CounterStateType & after) \/\/ in Hz$/;"	f
getBusFromSocket	cpucounters.cpp	/^int getBusFromSocket(const uint32 socket)$/;"	f
getBytesPerFlit	cpucounters.h	/^    double getBytesPerFlit() const$/;"	f	class:PCM
getBytesPerFlit	cpucounters.h	/^    static double getBytesPerFlit(int32 cpu_model_)$/;"	f	class:PCM
getBytesPerLinkCycle	cpucounters.h	/^    double getBytesPerLinkCycle() const$/;"	f	class:PCM
getBytesPerLinkCycle	cpucounters.h	/^    static double getBytesPerLinkCycle(int32 cpu_model_)$/;"	f	class:PCM
getBytesPerLinkTransfer	cpucounters.h	/^    double getBytesPerLinkTransfer() const$/;"	f	class:PCM
getBytesReadFromEDC	cpucounters.h	/^uint64 getBytesReadFromEDC(const CounterStateType & before, const CounterStateType & after)$/;"	f
getBytesReadFromMC	cpucounters.h	/^uint64 getBytesReadFromMC(const CounterStateType & before, const CounterStateType & after)$/;"	f
getBytesReadFromPMM	cpucounters.h	/^uint64 getBytesReadFromPMM(const CounterStateType & before, const CounterStateType & after)$/;"	f
getBytesWrittenToEDC	cpucounters.h	/^uint64 getBytesWrittenToEDC(const CounterStateType & before, const CounterStateType & after)$/;"	f
getBytesWrittenToMC	cpucounters.h	/^uint64 getBytesWrittenToMC(const CounterStateType & before, const CounterStateType & after)$/;"	f
getBytesWrittenToPMM	cpucounters.h	/^uint64 getBytesWrittenToPMM(const CounterStateType & before, const CounterStateType & after)$/;"	f
getCBOCounterState	cpucounters.cpp	/^uint64 PCM::getCBOCounterState(const uint32 socket_, const uint32 ctr_)$/;"	f	class:PCM
getCKEOffAverageCycles	pcm-power.cpp	/^int64 getCKEOffAverageCycles(uint32 channel, uint32 rank, const ServerUncorePowerState & before, const ServerUncorePowerState & after)$/;"	f
getCKEOffResidency	pcm-power.cpp	/^double getCKEOffResidency(uint32 channel, uint32 rank, const ServerUncorePowerState & before, const ServerUncorePowerState & after)$/;"	f
getCPUBrandString	cpucounters.cpp	/^std::string PCM::getCPUBrandString()$/;"	f	class:PCM
getCPUFamilyModelString	cpucounters.cpp	/^std::string PCM::getCPUFamilyModelString()$/;"	f	class:PCM
getCPUMicrocodeLevel	cpucounters.h	/^    int64 getCPUMicrocodeLevel() const { return cpu_microcode_level; }$/;"	f	class:PCM
getCPUModel	cpucounters.h	/^    uint32 getCPUModel() const { return (uint32)cpu_model; }$/;"	f	class:PCM
getCPUStepping	cpucounters.h	/^    uint32 getCPUStepping() const { return (uint32)cpu_stepping; }$/;"	f	class:PCM
getConsumedEnergy	cpucounters.h	/^uint64 getConsumedEnergy(const CounterStateType & before, const CounterStateType & after)$/;"	f
getConsumedJoules	cpucounters.h	/^double getConsumedJoules(const CounterStateType & before, const CounterStateType & after)$/;"	f
getCoreCStateResidency	cpucounters.h	/^inline double getCoreCStateResidency(int state, const CounterStateType & before, const CounterStateType & after)$/;"	f
getCoreCounterState	cpucounters.cpp	/^CoreCounterState PCM::getCoreCounterState(uint32 core)$/;"	f	class:PCM
getCoreCounterState	cpucounters.cpp	/^CoreCounterState getCoreCounterState(uint32 core)$/;"	f
getCoreIPC	cpucounters.h	/^inline double getCoreIPC(const SystemCounterState & before, const SystemCounterState & after) \/\/ instructions per cycle$/;"	f
getCoreId	cpucounters.h	/^    int32 getCoreId(uint32 os_id) const { return (int32)topology[os_id].core_id; }$/;"	f	class:PCM
getCoreId	msr.h	/^    int32 getCoreId() { return (int32)cpu_id; }$/;"	f	class:MsrHandle
getCoreId	msr.h	/^    int32 getCoreId()$/;"	f	class:SafeMsrHandle
getCycles	cpucounters.h	/^uint64 getCycles(const CounterStateType & before, const CounterStateType & after) \/\/ clocks$/;"	f
getCycles	cpucounters.h	/^uint64 getCycles(const CounterStateType & now) \/\/ clocks$/;"	f
getCyclesLostDueL2CacheMisses	cpucounters.h	/^double getCyclesLostDueL2CacheMisses(const CounterStateType & before, const CounterStateType & after) \/\/ 0.0 - 1.0$/;"	f
getCyclesLostDueL3CacheMisses	cpucounters.h	/^double getCyclesLostDueL3CacheMisses(const CounterStateType & before, const CounterStateType & after) \/\/ 0.0 - 1.0$/;"	f
getCyclesPerTransition	pcm-power.cpp	/^int64 getCyclesPerTransition(uint32 channel, uint32 rank, const ServerUncorePowerState & before, const ServerUncorePowerState & after)$/;"	f
getDRAMClocks	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getDRAMClocks(uint32 channel)$/;"	f	class:ServerPCICFGUncore
getDRAMClocks	cpucounters.h	/^uint64 getDRAMClocks(uint32 channel, const CounterStateType & before, const CounterStateType & after)$/;"	f
getDRAMConsumedEnergy	cpucounters.h	/^uint64 getDRAMConsumedEnergy(const CounterStateType & before, const CounterStateType & after)$/;"	f
getDRAMConsumedJoules	cpucounters.h	/^double getDRAMConsumedJoules(const CounterStateType & before, const CounterStateType & after)$/;"	f
getDataBytesPerFlit	cpucounters.h	/^    double getDataBytesPerFlit() const$/;"	f	class:PCM
getDataBytesPerFlit	cpucounters.h	/^    static double getDataBytesPerFlit(int32 cpu_model_)$/;"	f	class:PCM
getEDCChannelsPerSocket	cpucounters.h	/^    size_t getEDCChannelsPerSocket() const$/;"	f	class:PCM
getEDCCounter	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getEDCCounter(uint32 channel, uint32 counter)$/;"	f	class:ServerPCICFGUncore
getEDCCounter	cpucounters.h	/^uint64 getEDCCounter(uint32 channel, uint32 counter, const CounterStateType & before, const CounterStateType & after)$/;"	f
getEdcReads	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getEdcReads()$/;"	f	class:ServerPCICFGUncore
getEdcWrites	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getEdcWrites()$/;"	f	class:ServerPCICFGUncore
getErrorMessage	cpucounters.h	/^    const std::string & getErrorMessage() const$/;"	f	class:PCM
getExecUsage	cpucounters.h	/^double getExecUsage(const CounterStateType & before, const CounterStateType & after) \/\/ usage$/;"	f
getFD	cpucounters.cpp	/^    int getFD() const { return fd; }$/;"	f	class:PerfVirtualControlRegister
getFirstRank	pcm-power.cpp	/^int getFirstRank(int imc_profile)$/;"	f
getFlitsPerLinkCycle	cpucounters.h	/^    static double getFlitsPerLinkCycle(int32 cpu_model_)$/;"	f	class:PCM
getIIOCounterState	cpucounters.cpp	/^IIOCounterState PCM::getIIOCounterState(int socket, int IIOStack, int counter)$/;"	f	class:PCM
getIIOCounterStates	cpucounters.cpp	/^void PCM::getIIOCounterStates(int socket, int IIOStack, IIOCounterState * result)$/;"	f	class:PCM
getIORequestBytesFromMC	cpucounters.h	/^uint64 getIORequestBytesFromMC(const CounterStateType & before, const CounterStateType & after)$/;"	f
getIPC	cpucounters.h	/^double getIPC(const CounterStateType & before, const CounterStateType & after) \/\/ instructions per cycle$/;"	f
getImcReads	client_bw.cpp	/^uint64 ClientBW::getImcReads()$/;"	f	class:ClientBW
getImcReads	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getImcReads()$/;"	f	class:ServerPCICFGUncore
getImcReadsForChannels	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getImcReadsForChannels(uint32 beginChannel, uint32 endChannel)$/;"	f	class:ServerPCICFGUncore
getImcReadsForController	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getImcReadsForController(uint32 controller)$/;"	f	class:ServerPCICFGUncore
getImcWrites	client_bw.cpp	/^uint64 ClientBW::getImcWrites()$/;"	f	class:ClientBW
getImcWrites	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getImcWrites()$/;"	f	class:ServerPCICFGUncore
getIncomingDataFlits	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getIncomingDataFlits(uint32 port)$/;"	f	class:ServerPCICFGUncore
getIncomingQPILinkBytes	cpucounters.h	/^inline uint64 getIncomingQPILinkBytes(uint32 socketNr, uint32 linkNr, const SystemCounterState & before, const SystemCounterState & after)$/;"	f
getIncomingQPILinkBytes	cpucounters.h	/^inline uint64 getIncomingQPILinkBytes(uint32 socketNr, uint32 linkNr, const SystemCounterState & now)$/;"	f
getIncomingQPILinkUtilization	cpucounters.h	/^inline double getIncomingQPILinkUtilization(uint32 socketNr, uint32 linkNr, const SystemCounterState & before, const SystemCounterState & after)$/;"	f
getInstance	cpucounters.cpp	/^PCM * PCM::getInstance()$/;"	f	class:PCM
getInstructionsRetired	cpucounters.h	/^uint64 getInstructionsRetired(const CounterStateType & before, const CounterStateType & after) \/\/ instructions$/;"	f
getInstructionsRetired	cpucounters.h	/^uint64 getInstructionsRetired(const CounterStateType & now) \/\/ instructions$/;"	f
getInvariantTSC	cpucounters.h	/^uint64 getInvariantTSC(const CounterStateType & before, const CounterStateType & after)$/;"	f
getIoRequests	client_bw.cpp	/^uint64 ClientBW::getIoRequests()$/;"	f	class:ClientBW
getJoulesPerEnergyUnit	cpucounters.h	/^    double getJoulesPerEnergyUnit() const { return joulesPerEnergyUnit; }$/;"	f	class:PCM
getL2CacheHitRatio	cpucounters.h	/^double getL2CacheHitRatio(const CounterStateType & before, const CounterStateType & after) \/\/ 0.0 - 1.0$/;"	f
getL2CacheHits	cpucounters.h	/^uint64 getL2CacheHits(const CounterStateType & before, const CounterStateType & after)$/;"	f
getL2CacheMisses	cpucounters.h	/^uint64 getL2CacheMisses(const CounterStateType & before, const CounterStateType & after)$/;"	f
getL3CacheHitRatio	cpucounters.h	/^double getL3CacheHitRatio(const CounterStateType & before, const CounterStateType & after) \/\/ 0.0 - 1.0$/;"	f
getL3CacheHits	cpucounters.h	/^uint64 getL3CacheHits(const CounterStateType & before, const CounterStateType & after)$/;"	f
getL3CacheHitsNoSnoop	cpucounters.h	/^uint64 getL3CacheHitsNoSnoop(const CounterStateType & before, const CounterStateType & after)$/;"	f
getL3CacheHitsSnoop	cpucounters.h	/^uint64 getL3CacheHitsSnoop(const CounterStateType & before, const CounterStateType & after)$/;"	f
getL3CacheMisses	cpucounters.h	/^uint64 getL3CacheMisses(const CounterStateType & before, const CounterStateType & after)$/;"	f
getL3CacheOccupancy	cpucounters.h	/^uint64 getL3CacheOccupancy(const CounterStateType & now)$/;"	f
getL3ScalingFactor	cpucounters.cpp	/^uint32 PCM::getL3ScalingFactor() const$/;"	f	class:PCM
getLLCReadMissLatency	cpucounters.h	/^inline double getLLCReadMissLatency(const CounterStateType & before, const CounterStateType & after)$/;"	f
getLinkTransfersPerLinkCycle	cpucounters.h	/^    static double getLinkTransfersPerLinkCycle()$/;"	f	class:PCM
getLocalMemoryBW	cpucounters.h	/^uint64 getLocalMemoryBW(const CounterStateType & before, const CounterStateType & after)$/;"	f
getM2MCounter	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getM2MCounter(uint32 box, uint32 counter)$/;"	f	class:ServerPCICFGUncore
getM2MCounter	cpucounters.h	/^uint64 getM2MCounter(uint32 controller, uint32 counter, const CounterStateType & before, const CounterStateType & after)$/;"	f
getMCChannels	cpucounters.h	/^    size_t getMCChannels(uint32 socket, uint32 controller) const$/;"	f	class:PCM
getMCChannelsPerSocket	cpucounters.h	/^    size_t getMCChannelsPerSocket() const$/;"	f	class:PCM
getMCCounter	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getMCCounter(uint32 channel, uint32 counter)$/;"	f	class:ServerPCICFGUncore
getMCCounter	cpucounters.h	/^uint64 getMCCounter(uint32 channel, uint32 counter, const CounterStateType & before, const CounterStateType & after)$/;"	f
getMCDRAMClocks	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getMCDRAMClocks(uint32 channel)$/;"	f	class:ServerPCICFGUncore
getMCDRAMClocks	cpucounters.h	/^uint64 getMCDRAMClocks(uint32 channel, const CounterStateType & before, const CounterStateType & after)$/;"	f
getMCFGRecords	pci.cpp	/^const std::vector<MCFGRecord> & PciHandleMM::getMCFGRecords()$/;"	f	class:PciHandleMM
getMCPerSocket	cpucounters.h	/^    uint32 getMCPerSocket() const$/;"	f	class:PCM
getMaxCustomCoreEvents	cpucounters.cpp	/^int32 PCM::getMaxCustomCoreEvents()$/;"	f	class:PCM
getMaxIPC	cpucounters.h	/^    uint32 getMaxIPC() const$/;"	f	class:PCM
getMaxNumOfCBoxes	cpucounters.cpp	/^uint32 PCM::getMaxNumOfCBoxes() const$/;"	f	class:PCM
getMaxRMID	cpucounters.cpp	/^unsigned PCM::getMaxRMID() const$/;"	f	class:PCM
getNominalFrequency	cpucounters.cpp	/^uint64 PCM::getNominalFrequency() const$/;"	f	class:PCM
getNormalizedPCUCounter	pcm-power.cpp	/^double getNormalizedPCUCounter(uint32 counter, const ServerUncorePowerState & before, const ServerUncorePowerState & after)$/;"	f
getNormalizedPCUCounter	pcm-power.cpp	/^double getNormalizedPCUCounter(uint32 counter, const ServerUncorePowerState & before, const ServerUncorePowerState & after, PCM * m)$/;"	f
getNormalizedQPIL0pTxCycles	cpucounters.h	/^double getNormalizedQPIL0pTxCycles(uint32 port, const CounterStateType & before, const CounterStateType & after)$/;"	f
getNormalizedQPIL1Cycles	cpucounters.h	/^double getNormalizedQPIL1Cycles(uint32 port, const CounterStateType & before, const CounterStateType & after)$/;"	f
getNumClients	MacMSRDriver/DriverInterface.c	/^kern_return_t getNumClients(io_connect_t connect, uint32_t* num_insts)$/;"	f
getNumCores	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^uint32_t PcmMsrDriverClassName::getNumCores()$/;"	f	class:PcmMsrDriverClassName
getNumCores	cpuasynchcounter.h	/^    uint32 getNumCores()$/;"	f	class:AsynchronCounterState
getNumCores	cpucounters.cpp	/^uint32 PCM::getNumCores() const$/;"	f	class:PCM
getNumEDCChannels	cpucounters.h	/^    size_t getNumEDCChannels() const { return edcPMUs.size(); }$/;"	f	class:ServerPCICFGUncore
getNumInstances	MacMSRDriver/MSRAccessor.cpp	/^uint32_t MSRAccessor::getNumInstances(){$/;"	f	class:MSRAccessor
getNumInstances	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^IOReturn PcmMsrDriverClassName::getNumInstances(uint32_t* num_insts){$/;"	f	class:PcmMsrDriverClassName
getNumInstances	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::getNumInstances(uint32_t* num_insts){$/;"	f	class:PcmMsrClientClassName
getNumInstances	cpucounters.cpp	/^uint32 PCM::getNumInstances()$/;"	f	class:PCM
getNumInstances	msr.cpp	/^uint32 MsrHandle::getNumInstances()$/;"	f	class:MsrHandle
getNumInstances	msr.h	/^    uint32 getNumInstances()$/;"	f	class:SafeMsrHandle
getNumMC	cpucounters.h	/^    uint32 getNumMC() const { return (uint32)num_imc_channels.size(); }$/;"	f	class:ServerPCICFGUncore
getNumMCChannels	cpucounters.cpp	/^size_t ServerPCICFGUncore::getNumMCChannels(const uint32 controller) const$/;"	f	class:ServerPCICFGUncore
getNumMCChannels	cpucounters.h	/^    size_t getNumMCChannels() const { return (size_t)imcPMUs.size(); }$/;"	f	class:ServerPCICFGUncore
getNumOnlineCores	cpucounters.cpp	/^uint32 PCM::getNumOnlineCores() const$/;"	f	class:PCM
getNumOnlineSockets	cpucounters.cpp	/^uint32 PCM::getNumOnlineSockets() const$/;"	f	class:PCM
getNumQPIPorts	cpucounters.h	/^    size_t getNumQPIPorts() const { return xpiPMUs.size(); }$/;"	f	class:ServerPCICFGUncore
getNumSockets	cpuasynchcounter.h	/^    uint32 getNumSockets()$/;"	f	class:AsynchronCounterState
getNumSockets	cpucounters.cpp	/^uint32 PCM::getNumSockets() const$/;"	f	class:PCM
getNumberOfCustomEvents	cpucounters.h	/^uint64 getNumberOfCustomEvents(int32 eventCounterNr, const CounterStateType & before, const CounterStateType & after)$/;"	f
getNumberOfEvents	cpucounters.h	/^inline uint64 getNumberOfEvents(const CounterType & before, const CounterType & after)$/;"	f
getOutgoingFlits	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getOutgoingFlits(uint32 port)$/;"	f	class:ServerPCICFGUncore
getOutgoingQPILinkBytes	cpucounters.h	/^inline uint64 getOutgoingQPILinkBytes(uint32 socketNr, uint32 linkNr, const SystemCounterState & before, const SystemCounterState & after)$/;"	f
getOutgoingQPILinkUtilization	cpucounters.h	/^inline double getOutgoingQPILinkUtilization(uint32 socketNr, uint32 linkNr, const SystemCounterState & before, const SystemCounterState & after)$/;"	f
getPCIeCounterState	cpucounters.cpp	/^PCIeCounterState PCM::getPCIeCounterState(const uint32 socket_)$/;"	f	class:PCM
getPCIeEvents	pcm-pcie.cpp	/^void getPCIeEvents(PCM *m, PCM::PCIeEventCode opcode, uint32 delay_ms, sample_t *sample, const uint32 tid, const uint32 q, const uint32 nc)$/;"	f
getPCMCore	daemon/daemon/daemon.cpp	/^	void Daemon::getPCMCore()$/;"	f	class:PCMDaemon::Daemon
getPCMCounters	daemon/daemon/daemon.cpp	/^	void Daemon::getPCMCounters()$/;"	f	class:PCMDaemon::Daemon
getPCMMemory	daemon/daemon/daemon.cpp	/^	void Daemon::getPCMMemory()$/;"	f	class:PCMDaemon::Daemon
getPCMQPI	daemon/daemon/daemon.cpp	/^	void Daemon::getPCMQPI()$/;"	f	class:PCMDaemon::Daemon
getPCMSystem	daemon/daemon/daemon.cpp	/^	void Daemon::getPCMSystem()$/;"	f	class:PCMDaemon::Daemon
getPCUClocks	cpucounters.h	/^uint64 getPCUClocks(const CounterStateType & before, const CounterStateType & after)$/;"	f
getPCUCounter	cpucounters.h	/^uint64 getPCUCounter(uint32 counter, const CounterStateType & before, const CounterStateType & after)$/;"	f
getPCUFrequency	cpucounters.h	/^    uint64 getPCUFrequency() const$/;"	f	class:PCM
getPMMReads	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getPMMReads()$/;"	f	class:ServerPCICFGUncore
getPMMWrites	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getPMMWrites()$/;"	f	class:ServerPCICFGUncore
getPMUID	cpucounters.cpp	/^    int getPMUID() const { return pmuID; }$/;"	f	class:PerfVirtualControlRegister
getPPDCycles	pcm-power.cpp	/^uint64 getPPDCycles(uint32 channel, const ServerUncorePowerState & before, const ServerUncorePowerState & after)$/;"	f
getPackageCStateResidency	cpucounters.h	/^inline double getPackageCStateResidency(int state, const CounterStateType & before, const CounterStateType & after)$/;"	f
getPackageMaximumPower	cpucounters.h	/^    int32 getPackageMaximumPower() const { return pkgMaximumPower; }$/;"	f	class:PCM
getPackageMinimumPower	cpucounters.h	/^    int32 getPackageMinimumPower() const { return pkgMinimumPower; }$/;"	f	class:PCM
getPackageThermalHeadroom	cpucounters.h	/^    int32 getPackageThermalHeadroom() const { return PackageThermalHeadroom; }$/;"	f	class:ServerUncorePowerState
getPackageThermalSpecPower	cpucounters.h	/^    int32 getPackageThermalSpecPower() const { return pkgThermalSpecPower; }$/;"	f	class:PCM
getQPIClocks	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getQPIClocks(uint32 port)$/;"	f	class:ServerPCICFGUncore
getQPIClocks	cpucounters.h	/^uint64 getQPIClocks(uint32 port, const CounterStateType & before, const CounterStateType & after)$/;"	f
getQPIL0pTxCycles	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getQPIL0pTxCycles(uint32 port)$/;"	f	class:ServerPCICFGUncore
getQPIL0pTxCycles	cpucounters.h	/^uint64 getQPIL0pTxCycles(uint32 port, const CounterStateType & before, const CounterStateType & after)$/;"	f
getQPIL1Cycles	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getQPIL1Cycles(uint32 port)$/;"	f	class:ServerPCICFGUncore
getQPIL1Cycles	cpucounters.h	/^uint64 getQPIL1Cycles(uint32 port, const CounterStateType & before, const CounterStateType & after)$/;"	f
getQPILLCounter	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getQPILLCounter(uint32 port, uint32 counter)$/;"	f	class:ServerPCICFGUncore
getQPILinkSpeed	cpucounters.h	/^    uint64 getQPILinkSpeed(const uint32 linkNr) const$/;"	f	class:ServerPCICFGUncore
getQPILinkSpeed	cpucounters.h	/^    uint64 getQPILinkSpeed(uint32 socketNr, uint32 linkNr) const$/;"	f	class:PCM
getQPILinksPerSocket	cpuasynchcounter.h	/^    uint32 getQPILinksPerSocket()$/;"	f	class:AsynchronCounterState
getQPILinksPerSocket	cpucounters.h	/^    uint64 getQPILinksPerSocket() const$/;"	f	class:PCM
getQPItoMCTrafficRatio	cpucounters.h	/^inline double getQPItoMCTrafficRatio(const SystemCounterState & before, const SystemCounterState & after)$/;"	f
getRefCycles	cpucounters.h	/^uint64 getRefCycles(const CounterStateType & before, const CounterStateType & after) \/\/ clocks$/;"	f
getRelativeFrequency	cpucounters.h	/^double getRelativeFrequency(const CounterStateType & before, const CounterStateType & after) \/\/ fraction of nominal frequency$/;"	f
getRemoteMemoryBW	cpucounters.h	/^uint64 getRemoteMemoryBW(const CounterStateType & before, const CounterStateType & after)$/;"	f
getRunState	cpucounters.h	/^    int getRunState(void) { return run_state; }$/;"	f	class:PCM
getSMICount	cpucounters.h	/^uint64 getSMICount(const CounterStateType & before, const CounterStateType & after)$/;"	f
getSMT	cpucounters.cpp	/^bool PCM::getSMT() const$/;"	f	class:PCM
getSecondRank	pcm-power.cpp	/^int getSecondRank(int imc_profile)$/;"	f
getSelfRefreshCycles	pcm-power.cpp	/^uint64 getSelfRefreshCycles(uint32 channel, const ServerUncorePowerState & before, const ServerUncorePowerState & after)$/;"	f
getSelfRefreshTransitions	pcm-power.cpp	/^uint64 getSelfRefreshTransitions(uint32 channel, const ServerUncorePowerState & before, const ServerUncorePowerState & after)$/;"	f
getServerUncorePowerState	cpucounters.cpp	/^ServerUncorePowerState PCM::getServerUncorePowerState(uint32 socket)$/;"	f	class:PCM
getSocket	cpuasynchcounter.h	/^    T getSocket(int param, uint32 socket)$/;"	f	class:AsynchronCounterState
getSocket	cpuasynchcounter.h	/^    T getSocket(uint32 socket)$/;"	f	class:AsynchronCounterState
getSocket	cpuasynchcounter.h	/^    T getSocket(uint32 socket, uint32 param)$/;"	f	class:AsynchronCounterState
getSocketCounterState	cpucounters.cpp	/^SocketCounterState PCM::getSocketCounterState(uint32 socket)$/;"	f	class:PCM
getSocketCounterState	cpucounters.cpp	/^SocketCounterState getSocketCounterState(uint32 socket)$/;"	f
getSocketId	cpuasynchcounter.h	/^    uint32 getSocketId(uint32 c)$/;"	f	class:AsynchronCounterState
getSocketId	cpucounters.h	/^    int32 getSocketId(uint32 core_id) const { return (int32)topology[core_id].socket; }$/;"	f	class:PCM
getSocketIncomingQPILinkBytes	cpucounters.h	/^inline uint64 getSocketIncomingQPILinkBytes(uint32 socketNr, const SystemCounterState & now)$/;"	f
getSupportedUarchCodenames	cpucounters.cpp	/^std::string PCM::getSupportedUarchCodenames() const$/;"	f	class:PCM
getSystem	cpuasynchcounter.h	/^    T getSystem()$/;"	f	class:AsynchronCounterState
getSystem	cpuasynchcounter.h	/^    T getSystem(int param)$/;"	f	class:AsynchronCounterState
getSystemCounterState	cpucounters.cpp	/^SystemCounterState PCM::getSystemCounterState()$/;"	f	class:PCM
getSystemCounterState	cpucounters.cpp	/^SystemCounterState getSystemCounterState()$/;"	f
getThermalHeadroom	cpucounters.h	/^    int32 getThermalHeadroom() const { return ThermalHeadroom; }$/;"	f	class:BasicCounterState
getThermalHeadroom	cpucounters.h	/^int32 getThermalHeadroom(const CounterStateType & \/* before *\/, const CounterStateType & after)$/;"	f
getThreadId	cpucounters.h	/^    int32 getThreadId(uint32 os_id) const { return (int32)topology[os_id].thread_id; }$/;"	f	class:PCM
getThreadsPerCore	cpucounters.cpp	/^uint32 PCM::getThreadsPerCore() const$/;"	f	class:PCM
getTickCount	cpucounters.cpp	/^uint64 PCM::getTickCount(uint64 multiplier, uint32 core)$/;"	f	class:PCM
getTickCountRDTSCP	cpucounters.cpp	/^uint64 PCM::getTickCountRDTSCP(uint64 multiplier)$/;"	f	class:PCM
getTileId	cpucounters.h	/^    int32 getTileId(uint32 os_id) const { return (int32)topology[os_id].tile_id; }$/;"	f	class:PCM
getTimestamp	daemon/daemon/daemon.cpp	/^	uint64 Daemon::getTimestamp()$/;"	f	class:PCMDaemon::Daemon
getTopologyInfo	MacMSRDriver/DriverInterface.c	/^kern_return_t getTopologyInfo(io_connect_t connect, topologyEntry* data, size_t* data_size)$/;"	f
getTotalExecUsage	cpucounters.h	/^inline double getTotalExecUsage(const SystemCounterState & before, const SystemCounterState & after) \/\/ usage$/;"	f
getUArchCodename	cpucounters.cpp	/^const char * PCM::getUArchCodename(const int32 cpu_model_param) const$/;"	f	class:PCM
getUPIL0TxCycles	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getUPIL0TxCycles(uint32 port)$/;"	f	class:ServerPCICFGUncore
getUncoreClocks	cpucounters.cpp	/^uint64 PCM::getUncoreClocks(const uint32 socket_)$/;"	f	class:PCM
getUncoreCounterStates	cpucounters.cpp	/^void PCM::getUncoreCounterStates(SystemCounterState & systemState, std::vector<SocketCounterState> & socketStates)$/;"	f	class:PCM
getUnsupportedMessage	cpucounters.cpp	/^std::string PCM::getUnsupportedMessage() const$/;"	f	class:PCM
get_IIO_Samples	pcm-iio.cpp	/^result_content get_IIO_Samples(PCM *m, vector<struct iio_skx> iio_skx_v, struct counter ctr, uint32_t delay_ms)$/;"	f
get_frequency_from_cpuid	cpucounters.cpp	/^uint64 get_frequency_from_cpuid() \/\/ from Pat Fay (Intel)$/;"	f
getopt	freegetopt/getopt.cpp	/^int getopt(int argc, char** argv, char* optstr)$/;"	f
global	cpucounters.cpp	/^    bool global;$/;"	m	class:InstanceLock	file:
globalSemaphore	cpucounters.cpp	/^    sem_t * globalSemaphore;$/;"	m	class:InstanceLock	file:
globalSemaphoreName	cpucounters.cpp	/^    const char * globalSemaphoreName;$/;"	m	class:InstanceLock	file:
good	cpucounters.cpp	/^bool PCM::good()$/;"	f	class:PCM
gpCounterCfg	cpucounters.h	/^        EventSelectRegister * gpCounterCfg;   \/\/ general purpose counters, if NULL, then default configuration performed for GP counters$/;"	m	struct:PCM::ExtendedCustomCoreEventDescription
groupName_	daemon/daemon/daemon.h	/^		std::string groupName_;$/;"	m	class:PCMDaemon::Daemon
groupnr	cpucounters.h	/^    uint32 groupnr;$/;"	m	class:ServerPCICFGUncore
hDriver	msr.h	/^    HANDLE hDriver;$/;"	m	class:MsrHandle
hDriver	pci.h	/^    HANDLE hDriver;$/;"	m	class:PciHandle
hOpenLibSys	cpucounters.cpp	/^HMODULE hOpenLibSys = NULL;$/;"	v
hSCManager	PCM_Win/windriver.h	/^    SC_HANDLE hSCManager;$/;"	m	class:Driver
hService	PCM_Win/windriver.h	/^    SC_HANDLE hService;$/;"	m	class:Driver
h_event_name	lspci.h	/^  std::string h_event_name;$/;"	m	struct:counter
h_id	lspci.h	/^    uint32_t h_id;$/;"	m	struct:counter
h_id	lspci.h	/^typedef uint32_t h_id;$/;"	t
handle	cpucounters.h	/^    std::shared_ptr<CounterWidthExtender> handle;$/;"	m	class:CounterWidthExtenderRegister
handle	cpucounters.h	/^    std::shared_ptr<MMIORange> handle;$/;"	m	class:MMIORegister32
handle	cpucounters.h	/^    std::shared_ptr<MMIORange> handle;$/;"	m	class:MMIORegister64
handle	cpucounters.h	/^    std::shared_ptr<PciHandleType> handle;$/;"	m	class:PCICFGRegister32
handle	cpucounters.h	/^    std::shared_ptr<PciHandleType> handle;$/;"	m	class:PCICFGRegister64
handle	cpucounters.h	/^    std::shared_ptr<SafeMsrHandle> handle;$/;"	m	class:MSRRegister
handleClose	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^void PcmMsrDriverClassName::handleClose(IOService* forClient, IOOptionBits opts){$/;"	f	class:PcmMsrDriverClassName
handleIsOpen	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^bool PcmMsrDriverClassName::handleIsOpen(const IOService* forClient) const{$/;"	f	class:PcmMsrDriverClassName
handleOpen	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^bool PcmMsrDriverClassName::handleOpen(IOService * forClient, IOOptionBits opts, void* args){$/;"	f	class:PcmMsrDriverClassName
hasBecktonUncore	cpucounters.h	/^    bool hasBecktonUncore() const$/;"	f	class:PCM
hasPCICFGUncore	cpucounters.h	/^    bool hasPCICFGUncore() const \/\/ has PCICFG uncore PMON$/;"	f	class:PCM
hasUPI	cpucounters.h	/^    bool hasUPI() const \/\/ Intel(r) Ultra Path Interconnect$/;"	f	class:PCM
header_type	lspci.h	/^    int8_t header_type;$/;"	m	struct:pci
high	types.h	/^        DWORD high;$/;"	m	struct:cvt_ds::__anon41
hit	pcm-pcie.cpp	/^    PCIeEvents_t hit; $/;"	m	struct:__anon43	file:
iMC_PMM_Rd_socket	pcm-memory.cpp	/^    float iMC_PMM_Rd_socket[max_sockets];$/;"	m	struct:memdata	file:
iMC_PMM_Rd_socket_chan	pcm-memory.cpp	/^    float iMC_PMM_Rd_socket_chan[max_sockets][max_imc_channels];$/;"	m	struct:memdata	file:
iMC_PMM_Wr_socket	pcm-memory.cpp	/^    float iMC_PMM_Wr_socket[max_sockets];$/;"	m	struct:memdata	file:
iMC_PMM_Wr_socket_chan	pcm-memory.cpp	/^    float iMC_PMM_Wr_socket_chan[max_sockets][max_imc_channels];$/;"	m	struct:memdata	file:
iMC_Rd_socket	pcm-memory.cpp	/^    float iMC_Rd_socket[max_sockets];$/;"	m	struct:memdata	file:
iMC_Rd_socket_chan	pcm-memory.cpp	/^    float iMC_Rd_socket_chan[max_sockets][max_imc_channels];$/;"	m	struct:memdata	file:
iMC_Wr_socket	pcm-memory.cpp	/^    float iMC_Wr_socket[max_sockets];$/;"	m	struct:memdata	file:
iMC_Wr_socket_chan	pcm-memory.cpp	/^    float iMC_Wr_socket_chan[max_sockets][max_imc_channels];$/;"	m	struct:memdata	file:
iMCbus	cpucounters.h	/^    int32 iMCbus,UPIbus,M2Mbus;$/;"	m	class:ServerPCICFGUncore
idx	lspci.h	/^    int idx; \/* Some counters need to be placed in specific index *\/$/;"	m	struct:counter
ignored	types.h	/^            uint64 ignored : 1;$/;"	m	struct:IIOPMUCNTCTLRegister::__anon39::__anon40
iioPMUs	cpucounters.h	/^    std::vector<std::map<int32, UncorePMU> > iioPMUs;$/;"	m	class:PCM
iio_skx	lspci.h	/^struct iio_skx {$/;"	s
iio_stack_names	pcm-iio.cpp	/^static const std::string iio_stack_names[6] = {$/;"	v	file:
imcPMUs	cpucounters.h	/^    std::vector<UncorePMU> imcPMUs;$/;"	m	class:ServerPCICFGUncore
in_tx	types.h	/^            uint64 in_tx : 1;$/;"	m	struct:EventSelectRegister::__anon28::__anon29
in_txcp	types.h	/^            uint64 in_txcp : 1;$/;"	m	struct:EventSelectRegister::__anon28::__anon29
inc_sel	types.h	/^            uint64 inc_sel : 5;$/;"	m	struct:BecktonUncorePMUCNTCTLRegister::__anon37::__anon38
incoming	daemon/daemon/common.h	/^		PCMQPISocketCounter incoming[MAX_SOCKETS];$/;"	m	struct:PCMDaemon::PCMQPI
incomingQPIPackets	cpucounters.h	/^    std::vector<std::vector<uint64> > incomingQPIPackets; \/\/ each 64 byte$/;"	m	class:SystemCounterState
incomingQPITrafficMetricsAvailable	cpucounters.h	/^    bool incomingQPITrafficMetricsAvailable() const$/;"	f	class:PCM
incomingQPITrafficMetricsAvailable	daemon/daemon/common.h	/^		bool incomingQPITrafficMetricsAvailable;$/;"	m	struct:PCMDaemon::PCMQPI
incomingTotal	daemon/daemon/common.h	/^		uint64 incomingTotal;$/;"	m	struct:PCMDaemon::PCMQPI
incrementNumClients	MacMSRDriver/DriverInterface.c	/^kern_return_t incrementNumClients(io_connect_t connect, uint32_t* num_insts)$/;"	f
incrementNumInstances	MacMSRDriver/MSRAccessor.cpp	/^uint32_t MSRAccessor::incrementNumInstances(){$/;"	f	class:MSRAccessor
incrementNumInstances	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^IOReturn PcmMsrDriverClassName::incrementNumInstances(uint32_t* num_insts){$/;"	f	class:PcmMsrDriverClassName
incrementNumInstances	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::incrementNumInstances(uint32_t* num_insts){$/;"	f	class:PcmMsrClientClassName
incrementNumInstances	cpucounters.cpp	/^uint32 PCM::incrementNumInstances()$/;"	f	class:PCM
incrementNumInstances	msr.cpp	/^uint32 MsrHandle::incrementNumInstances()$/;"	f	class:MsrHandle
incrementNumInstances	msr.h	/^    uint32 incrementNumInstances()$/;"	f	class:SafeMsrHandle
increment_index	freegetopt/getopt.cpp	/^static void increment_index()$/;"	f	file:
init	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^bool PcmMsrDriverClassName::init(OSDictionary *dict)$/;"	f	class:PcmMsrDriverClassName
initBuses	cpucounters.cpp	/^void ServerPCICFGUncore::initBuses(uint32 socket_, const PCM * pcm)$/;"	f	class:ServerPCICFGUncore
initCStateSupportTables	cpucounters.cpp	/^void PCM::initCStateSupportTables()$/;"	f	class:PCM
initDirect	cpucounters.cpp	/^void ServerPCICFGUncore::initDirect(uint32 socket_, const PCM * pcm)$/;"	f	class:ServerPCICFGUncore
initEnergyMonitoring	cpucounters.cpp	/^void PCM::initEnergyMonitoring()$/;"	f	class:PCM
initMSR	cpucounters.cpp	/^bool PCM::initMSR()$/;"	f	class:PCM
initMemTest	cpucounters.cpp	/^void ServerPCICFGUncore::initMemTest(ServerPCICFGUncore::MemTestParam & param)$/;"	f	class:ServerPCICFGUncore
initPerf	cpucounters.cpp	/^void ServerPCICFGUncore::initPerf(uint32 socket_, const PCM * pcm)$/;"	f	class:ServerPCICFGUncore
initQOSevent	cpucounters.cpp	/^void PCM::initQOSevent(const uint64 event, const int32 core)$/;"	f	class:PCM
initRMID	cpucounters.cpp	/^void PCM::initRMID()$/;"	f	class:PCM
initRegisterLocations	cpucounters.cpp	/^void ServerPCICFGUncore::initRegisterLocations()$/;"	f	class:ServerPCICFGUncore
initSocket2Bus	cpucounters.cpp	/^void ServerPCICFGUncore::initSocket2Bus(std::vector<std::pair<uint32, uint32> > & socket2bus, uint32 device, uint32 function, const uint32 DEV_IDS[], uint32 devIdsSize)$/;"	f	class:ServerPCICFGUncore
initUncoreObjects	cpucounters.cpp	/^void PCM::initUncoreObjects()$/;"	f	class:PCM
initUncorePMUsDirect	cpucounters.cpp	/^void PCM::initUncorePMUsDirect()$/;"	f	class:PCM
initUncorePMUsPerf	cpucounters.cpp	/^void PCM::initUncorePMUsPerf()$/;"	f	class:PCM
initWinRing0Lib	cpucounters.cpp	/^bool PCM::initWinRing0Lib()$/;"	f	class:PCM
insert_rd	pcm-latency.cpp	/^    double insert_rd;$/;"	m	struct:core_info	file:
instRetHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable instRetHash_;$/;"	m	class:PCMServiceNS::MeasureThread
install_driver	winpmem/winpmem.cpp	/^int WinPmem::install_driver(bool delete_driver) {$/;"	f	class:WinPmem
instance	cpucounters.cpp	/^PCM * PCM::instance = NULL;$/;"	m	class:PCM	file:
instance	cpucounters.h	/^    static PCM * instance;$/;"	m	class:PCM
instructionsPerCycle	daemon/daemon/common.h	/^		double instructionsPerCycle;$/;"	m	struct:PCMDaemon::PCMCoreCounter
instructionsRetired	daemon/daemon/common.h	/^		uint64 instructionsRetired;$/;"	m	struct:PCMDaemon::PCMCoreCounter
int32	daemon/daemon/common.h	/^	typedef int int32;$/;"	t	namespace:PCMDaemon
int32	types.h	/^typedef signed int int32;$/;"	t
int64	daemon/daemon/common.h	/^	typedef long int64;$/;"	t	namespace:PCMDaemon
int64	types.h	/^typedef signed long long int64;$/;"	t
internal_read	width_extender.h	/^    uint64 internal_read()$/;"	f	class:CounterWidthExtender
invert	types.h	/^            uint64 invert : 1;$/;"	m	struct:EventSelectRegister::__anon28::__anon29
invert	types.h	/^            uint64 invert : 1;$/;"	m	struct:IIOPMUCNTCTLRegister::__anon39::__anon40
invert	types.h	/^            uint64 invert : 1;$/;"	m	struct:UncoreEventSelectRegister::__anon32::__anon33
ipcHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable ipcHash_;$/;"	m	class:PCMServiceNS::MeasureThread
isActiveRelativeFrequencyAvailable	cpucounters.h	/^    bool isActiveRelativeFrequencyAvailable() const$/;"	f	class:PCM
isAtom	cpucounters.h	/^    bool isAtom() const$/;"	f	class:PCM
isAtom	cpucounters.h	/^    static bool isAtom(const int32 cpu_model_)$/;"	f	class:PCM
isBlocked	cpucounters.h	/^    bool isBlocked(void) { return blocked; }$/;"	f	class:PCM
isCLX	cpucounters.h	/^    bool isCLX() const \/\/ Cascade Lake-SP$/;"	f	class:PCM
isCPUModelSupported	cpucounters.cpp	/^bool PCM::isCPUModelSupported(int model_)$/;"	f	class:PCM
isCoreCStateResidencySupported	cpucounters.h	/^    bool isCoreCStateResidencySupported(int state)$/;"	f	class:PCM
isCoreOnline	cpucounters.cpp	/^bool PCM::isCoreOnline(int32 os_core_id) const$/;"	f	class:PCM
isForceRTMAbortModeAvailable	cpucounters.cpp	/^bool PCM::isForceRTMAbortModeAvailable() const$/;"	f	class:PCM
isForceRTMAbortModeEnabled	cpucounters.cpp	/^bool PCM::isForceRTMAbortModeEnabled() const$/;"	f	class:PCM
isNMIWatchdogEnabled	cpucounters.cpp	/^bool isNMIWatchdogEnabled()$/;"	f
isPackageCStateResidencySupported	cpucounters.h	/^    bool isPackageCStateResidencySupported(int state)$/;"	f	class:PCM
isSecureBoot	cpucounters.cpp	/^bool PCM::isSecureBoot() const$/;"	f	class:PCM
isSocketOnline	cpucounters.cpp	/^bool PCM::isSocketOnline(int32 socket_id) const$/;"	f	class:PCM
isSomeCoreOfflined	cpucounters.cpp	/^bool PCM::isSomeCoreOfflined()$/;"	f	class:PCM
joulesPerEnergyUnit	cpucounters.h	/^    double joulesPerEnergyUnit;$/;"	m	class:PCM
json_core_data	pmu-query.py	/^        json_core_data=urllib2.urlopen('https:\/\/download.01.org\/perfmon'+core_path)$/;"	v
json_offcore_data	pmu-query.py	/^        json_offcore_data=urllib2.urlopen('https:\/\/download.01.org\/perfmon'+offcore_path)$/;"	v
junk	lspci.h	/^            uint8_t junk;$/;"	m	struct:pci::__anon3::__anon4
kBuildTopology	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kBuildTopology,$/;"	e	enum:__anon24
kCloseDriver	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kCloseDriver,$/;"	e	enum:__anon24
kDecrementNumInstances	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kDecrementNumInstances,$/;"	e	enum:__anon24
kGetNumInstances	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kGetNumInstances,$/;"	e	enum:__anon24
kIncrementNumInstances	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kIncrementNumInstances,$/;"	e	enum:__anon24
kMapMemory	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kMapMemory,$/;"	e	enum:__anon24
kNumberOfMethods	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kNumberOfMethods$/;"	e	enum:__anon24
kOpenDriver	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kOpenDriver,$/;"	e	enum:__anon24
kPcmMsrDriverClassName	MacMSRDriver/MSRKernel.h	16;"	d
kPcmMsrDriverClassName	MacMSRDriver/PcmMsr/UserKernelShared.h	16;"	d
kRead	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kRead,$/;"	e	enum:__anon24
kReadMSR	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kReadMSR,$/;"	e	enum:__anon24
kReadMemory	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kReadMemory,$/;"	e	enum:__anon24
kTopologyEntry	MacMSRDriver/PcmMsr/UserKernelShared.h	/^} kTopologyEntry;$/;"	t	typeref:struct:__anon23
kUnmapMemory	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kUnmapMemory,$/;"	e	enum:__anon24
kWrite	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kWrite,$/;"	e	enum:__anon24
kWriteMSR	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kWriteMSR,$/;"	e	enum:__anon24
k_pcm_msr_data_t	MacMSRDriver/PcmMsr/UserKernelShared.h	/^} k_pcm_msr_data_t;$/;"	t	typeref:struct:__anon21
key	memoptest.cpp	/^    int key[1];$/;"	m	struct:T	file:
key	readmem.cpp	/^    int key[1];$/;"	m	struct:T	file:
key	realtime.cpp	/^    int key[1];$/;"	m	struct:T	file:
l2CacheHitRatio	daemon/daemon/common.h	/^		double l2CacheHitRatio;$/;"	m	struct:PCMDaemon::PCMCoreCounter
l2CacheMPI	daemon/daemon/common.h	/^		double l2CacheMPI;$/;"	m	struct:PCMDaemon::PCMCoreCounter
l2CacheMissHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable l2CacheMissHash_;$/;"	m	class:PCMServiceNS::MeasureThread
l2CacheMisses	daemon/daemon/common.h	/^		uint64 l2CacheMisses;$/;"	m	struct:PCMDaemon::PCMCoreCounter
l3CacheHitRatio	daemon/daemon/common.h	/^		double l3CacheHitRatio;$/;"	m	struct:PCMDaemon::PCMCoreCounter
l3CacheMPI	daemon/daemon/common.h	/^		double l3CacheMPI;$/;"	m	struct:PCMDaemon::PCMCoreCounter
l3CacheMissHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable l3CacheMissHash_;$/;"	m	class:PCMServiceNS::MeasureThread
l3CacheMisses	daemon/daemon/common.h	/^		uint64 l3CacheMisses;$/;"	m	struct:PCMDaemon::PCMCoreCounter
l3CacheOccupancy	daemon/daemon/common.h	/^		uint64 l3CacheOccupancy;$/;"	m	struct:PCMDaemon::PCMCoreCounter
l3CacheOccupancyAvailable	daemon/daemon/common.h	/^		bool l3CacheOccupancyAvailable;$/;"	m	struct:PCMDaemon::PCMCoreCounter
l3CacheReference	daemon/daemon/common.h	/^		uint64 l3CacheReference;$/;"	m	struct:PCMDaemon::PCMCoreCounter
l3cache_occ_format	pcm.cpp	/^std::string l3cache_occ_format(uint64 o)$/;"	f
lastProgrammedCustomCounters	cpucounters.h	/^    std::vector<std::vector<EventSelectRegister> > lastProgrammedCustomCounters;$/;"	m	class:PCM
lastUpdateTscBegin	daemon/daemon/common.h	/^		uint64 lastUpdateTscBegin;$/;"	m	struct:PCMDaemon::SharedPCMState
lastUpdateTscEnd	daemon/daemon/common.h	/^		uint64 lastUpdateTscEnd;$/;"	m	struct:PCMDaemon::SharedPCMState
lastUpdatedClientTsc_	daemon/client/client.h	/^		PCMDaemon::uint64 lastUpdatedClientTsc_;$/;"	m	class:PCMDaemon::Client
lastValue	cpucounters.cpp	/^    uint64 lastValue;$/;"	m	class:PerfVirtualDummyUnitControlRegister	file:
lastValue	cpucounters.cpp	/^    uint64 lastValue;$/;"	m	class:PerfVirtualFilterRegister	file:
last_error	winpmem/winpmem.h	/^  TCHAR last_error[1024];$/;"	m	class:WinPmem
last_raw_value	width_extender.h	/^    uint64 last_raw_value;$/;"	m	class:CounterWidthExtender
latency	pcm-latency.cpp	/^    double latency;$/;"	m	struct:core_info	file:
latency	pcm-latency.cpp	/^    uint64_t latency;$/;"	m	struct:socket_info_pci	file:
length	types.h	/^    unsigned length;$/;"	m	struct:MCFGHeader
link_ctrl	lspci.h	/^            uint16_t link_ctrl;$/;"	m	struct:pci::__anon5::__anon6
link_info	lspci.h	/^        uint32_t link_info;$/;"	m	union:pci::__anon5
link_speed	lspci.h	/^                    uint16_t link_speed : 4;$/;"	m	struct:pci::__anon5::__anon6::__anon7::__anon8
link_sta	lspci.h	/^                uint16_t link_sta;$/;"	m	union:pci::__anon5::__anon6::__anon7
link_trained	lspci.h	/^                    uint16_t link_trained : 1;$/;"	m	struct:pci::__anon5::__anon6::__anon7::__anon8
link_width	lspci.h	/^                    uint16_t link_width : 6;$/;"	m	struct:pci::__anon5::__anon6::__anon7::__anon8
links	daemon/daemon/common.h	/^		PCMQPILinkCounter links[QPI_MAX_LINKS];$/;"	m	struct:PCMDaemon::PCMQPISocketCounter
load_PCIDB	lspci.h	/^void load_PCIDB(PCIDB & pciDB)$/;"	f
load_driver_	mmio.cpp	/^    virtual int load_driver_()$/;"	f	class:PCMPmem
load_events	pcm-iio.cpp	/^vector<struct counter> load_events(const char* fn)$/;"	f
localMemoryAccesses	daemon/daemon/common.h	/^		uint64 localMemoryAccesses;$/;"	m	struct:PCMDaemon::PCMCoreCounter
localMemoryBW	daemon/daemon/common.h	/^		uint64 localMemoryBW;$/;"	m	struct:PCMDaemon::PCMCoreCounter
localMemoryBWAvailable	daemon/daemon/common.h	/^		bool localMemoryBWAvailable;$/;"	m	struct:PCMDaemon::PCMCoreCounter
lock	msr.h	/^    void lock()$/;"	f	class:SafeMsrHandle
lock	mutex.h	/^        void lock()$/;"	f	class:PCM_Util::Mutex
log_	PCM-Service_Win/PCMService.h	/^        System::Diagnostics::EventLog^ log_;$/;"	m	class:PCMServiceNS::MeasureThread
low	types.h	/^        DWORD low;$/;"	m	struct:cvt_ds::__anon41
m	cpuasynchcounter.h	/^    PCM * m;$/;"	m	class:AsynchronCounterState
m	cpucounters.cpp	/^    std::mutex m;$/;"	m	class:CoreTaskQueue	file:
m	mutex.h	/^            Mutex & m;$/;"	m	class:PCM_Util::Mutex::Scope
m2mPMUs	cpucounters.h	/^    std::vector<UncorePMU> m2mPMUs;$/;"	m	class:ServerPCICFGUncore
m_	PCM-Service_Win/PCMService.h	/^        PCM* m_;$/;"	m	class:PCMServiceNS::MeasureThread
main	daemon/client/main.cpp	/^int main(int argc, char *argv[])$/;"	f
main	daemon/daemon/main.cpp	/^int main(int argc, char *argv[])$/;"	f
main	daemon/daemon/test/main.cpp	/^int main()$/;"	f
main	memoptest.cpp	/^int main(int argc, char * argv[])$/;"	f
main	msrtest.cpp	/^int main()$/;"	f
main	pcm-core.cpp	/^int main(int argc, char * argv[])$/;"	f
main	pcm-iio.cpp	/^int main(int argc, char * argv[])$/;"	f
main	pcm-latency.cpp	/^int main(int argc, char * argv[])$/;"	f
main	pcm-lspci.cpp	/^int main(int argc, char * argv[])$/;"	f
main	pcm-memory.cpp	/^int main(int argc, char * argv[])$/;"	f
main	pcm-msr.cpp	/^int main(int argc, char * argv[])$/;"	f
main	pcm-numa.cpp	/^int main(int argc, char * argv[])$/;"	f
main	pcm-pcicfg.cpp	/^int main(int argc, char * argv[])$/;"	f
main	pcm-pcie.cpp	/^int main(int argc, char * argv[])$/;"	f
main	pcm-power.cpp	/^int main(int argc, char * argv[])$/;"	f
main	pcm-sensor.cpp	/^int main()$/;"	f
main	pcm-tsx.cpp	/^int main(int argc, char * argv[])$/;"	f
main	pcm.cpp	/^int main(int argc, char * argv[])$/;"	f
main	pcm.so/c_example.c	/^int main(int argc, const char *argv[])$/;"	f
main	readmem.cpp	/^int main(int argc, char * argv[])$/;"	f
main	realtime.cpp	/^int main(int argc, char * argv[])$/;"	f
mapMemory	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^void* PcmMsrDriverClassName::mapMemory (uint32_t address, UInt8 **virtual_address)$/;"	f	class:PcmMsrDriverClassName
mapMemory	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::mapMemory(const uint64_t* input, uint32_t inputSize, uint64_t* output, uint32_t outputSize)$/;"	f	class:PcmMsrClientClassName
map_dict	pmu-query.py	/^    map_dict = csv.DictReader(map_file_raw)$/;"	v
map_file	pmu-query.py	/^    map_file = []$/;"	v
map_file_raw	pmu-query.py	/^    map_file_raw=urllib2.urlopen('https:\/\/download.01.org\/perfmon\/mapfile.csv')$/;"	v
mask	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    bool mask;$/;"	m	struct:__anon21
match	pcm-core.cpp	/^bool match(const char * subtoken, const char * name, int * result)$/;"	f
match	utils.h	/^    void match(std::istream & istr) const$/;"	f	class:s_expect
maxChannels	cpucounters.h	/^        maxChannels = 8,$/;"	e	enum:ServerUncorePowerState::__anon19
maxControllers	cpucounters.h	/^        maxControllers = 2,$/;"	e	enum:ServerUncorePowerState::__anon19
maxCounters	cpucounters.h	/^        maxCounters = 4$/;"	e	enum:ServerUncorePowerState::__anon19
maxXPILinks	cpucounters.h	/^        maxXPILinks = 3,$/;"	e	enum:ServerUncorePowerState::__anon19
max_cpuid	cpucounters.h	/^    int32 max_cpuid;$/;"	m	class:PCM
max_edc_channels	pcm-memory.cpp	/^const uint32 max_edc_channels = ServerUncorePowerState::maxChannels;$/;"	v
max_imc_channels	pcm-memory.cpp	/^const uint32 max_imc_channels = ServerUncorePowerState::maxChannels;$/;"	v
max_imc_controllers	pcm-memory.cpp	/^const uint32 max_imc_controllers = ServerUncorePowerState::maxControllers;$/;"	v
max_physical_memory_	winpmem/winpmem.h	/^  __int64 max_physical_memory_;$/;"	m	class:WinPmem
max_qpi_speed	cpucounters.h	/^    uint64 max_qpi_speed; \/\/ in GBytes\/second$/;"	m	class:PCM
max_sockets	pcm-iio.cpp	/^const uint8_t max_sockets = 4;$/;"	v
max_sockets	pcm-latency.cpp	/^const uint8_t max_sockets = 64;$/;"	v
max_sockets	pcm-memory.cpp	/^const uint32 max_sockets = 256;$/;"	v
max_sockets	pcm-pcie.cpp	/^const uint32 max_sockets = 4;$/;"	v
mcfgHeader	pci.cpp	/^MCFGHeader PciHandleMM::mcfgHeader;$/;"	m	class:PciHandleMM	file:
mcfgHeader	pci.h	/^    static MCFGHeader mcfgHeader;$/;"	m	class:PciHandleMM
mcfgRecords	pci.cpp	/^std::vector<MCFGRecord> PciHandleMM::mcfgRecords;$/;"	m	class:PciHandleMM	file:
mcfgRecords	pci.h	/^    static std::vector<MCFGRecord> mcfgRecords;$/;"	m	class:PciHandleMM
measure	realtime.cpp	/^void measure(DS & ds, size_t repeat, size_t nelements)$/;"	f
memdata	pcm-memory.cpp	/^typedef struct memdata {$/;"	s	file:
memdata_t	pcm-memory.cpp	/^} memdata_t;$/;"	t	typeref:struct:memdata	file:
memory	daemon/daemon/common.h	/^		PCMMemory memory;$/;"	m	struct:PCMDaemon::SharedPCMCounters
memoryIOTrafficMetricAvailable	cpucounters.h	/^    bool memoryIOTrafficMetricAvailable() const$/;"	f	class:PCM
memoryTrafficMetricsAvailable	cpucounters.h	/^    bool memoryTrafficMetricsAvailable() const$/;"	f	class:PCM
memory_bw_local	cpucounters.h	/^    std::vector<std::shared_ptr<CounterWidthExtender> > memory_bw_local;$/;"	m	class:PCM
memory_bw_total	cpucounters.h	/^    std::vector<std::shared_ptr<CounterWidthExtender> > memory_bw_total;$/;"	m	class:PCM
miss	pcm-pcie.cpp	/^    PCIeEvents_t miss; $/;"	m	struct:__anon43	file:
mmapAddr	mmio.h	/^    char * mmapAddr;$/;"	m	class:MMIORange
mmapAddr	pci.h	/^    char * mmapAddr;$/;"	m	class:PciHandleMM
mmioRange	client_bw.h	/^    std::shared_ptr<MMIORange> mmioRange;$/;"	m	class:ClientBW
mode	cpucounters.h	/^    ProgramMode mode;$/;"	m	class:PCM
mode_	daemon/daemon/daemon.h	/^		Mode mode_;$/;"	m	class:PCMDaemon::Daemon
mrbHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable mrbHash_;$/;"	m	class:PCMServiceNS::MeasureThread
msr	width_extender.h	/^        std::shared_ptr<SafeMsrHandle> msr;$/;"	m	struct:CounterWidthExtender::MBLCounter
msr	width_extender.h	/^        std::shared_ptr<SafeMsrHandle> msr;$/;"	m	struct:CounterWidthExtender::MBTCounter
msr	width_extender.h	/^        std::shared_ptr<SafeMsrHandle> msr;$/;"	m	struct:CounterWidthExtender::MsrHandleCounter
msrLocalPath	PCM_Win/windriver.h	/^    static std::wstring msrLocalPath()$/;"	f	class:Driver
msr_addr	width_extender.h	/^        uint64 msr_addr;$/;"	m	struct:CounterWidthExtender::MsrHandleCounter
msr_address	WinMSRDriver/Win7/msrstruct.h	/^    ULONG64 msr_address;$/;"	m	struct:MSR_Request
msr_num	MacMSRDriver/MSRKernel.h	/^    uint32_t msr_num;$/;"	m	struct:__anon25
msr_num	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t msr_num;$/;"	m	struct:__anon20
msr_num	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t msr_num;$/;"	m	struct:__anon21
msr_value	pcm-core.cpp	/^	uint64 msr_value;$/;"	m	struct:CoreEvent	file:
multiplier	cpucounters.h	/^        int multiplier[4]; \/\/Some IIO event requires transformation to get meaningful output (i.e. DWord to bytes)$/;"	m	struct:PCM::CustomIIOEventDescription
multiplier	lspci.h	/^    int multiplier;$/;"	m	struct:counter
mutex	mmio.cpp	/^PCM_Util::Mutex MMIORange::mutex;$/;"	m	class:MMIORange	file:
mutex	mmio.h	/^    static PCM_Util::Mutex mutex;$/;"	m	class:MMIORange
mutex	msr.h	/^    PCM_Util::Mutex mutex;$/;"	m	class:SafeMsrHandle
mutex_	mutex.h	/^        HANDLE mutex_;$/;"	m	class:PCM_Util::Mutex
mwbHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable mwbHash_;$/;"	m	class:PCMServiceNS::MeasureThread
my_timestamp	memoptest.cpp	/^inline double my_timestamp()$/;"	f
my_timestamp	readmem.cpp	/^inline double my_timestamp()$/;"	f
my_timestamp	realtime.cpp	/^inline double my_timestamp()$/;"	f
nGPCounters	cpucounters.h	/^        uint32 nGPCounters;                   \/\/ number of general purpose counters$/;"	m	struct:PCM::ExtendedCustomCoreEventDescription
name	pcm-core.cpp	/^	char name[256];$/;"	m	struct:CoreEvent	file:
name	pcm-latency.cpp	/^    string name;$/;"	m	struct:res_core	file:
name	pcm-latency.cpp	/^    string name;$/;"	m	struct:res_uncore	file:
name	pcm-tsx.cpp	/^    const char * name;$/;"	m	struct:TSXEvent	file:
name	pmu-query.py	/^    name=raw_input("Event to query (empty enter to quit):")$/;"	v
name	pmu-query.py	/^name=raw_input("Event to query (empty enter to quit):")$/;"	v
nameMap	pcm-iio.cpp	/^map<string,std::pair<h_id,std::map<string,v_id>>> nameMap;$/;"	v
needToRestoreNMIWatchdog	cpucounters.h	/^    bool needToRestoreNMIWatchdog;$/;"	m	class:PCM
nominal_frequency	cpucounters.h	/^    uint64 nominal_frequency;$/;"	m	class:PCM
nonopt	freegetopt/getopt.cpp	/^static int nonopt = 0;                 \/* How many nonopts we've found *\/$/;"	v	file:
nrecords	types.h	/^    unsigned nrecords() const$/;"	f	struct:MCFGHeader
null_stream	utils.h	/^struct null_stream : public std::streambuf$/;"	s
numInstancesSemaphore	cpucounters.h	/^    HANDLE numInstancesSemaphore;     \/\/ global semaphore that counts the number of PCM instances on the system$/;"	m	class:PCM
numInstancesSemaphore	cpucounters.h	/^    sem_t * numInstancesSemaphore;$/;"	m	class:PCM
numOfChannels	daemon/daemon/common.h	/^		uint32 numOfChannels;$/;"	m	struct:PCMDaemon::PCMMemorySocketCounter
numOfCores	daemon/daemon/common.h	/^		uint32 numOfCores;$/;"	m	struct:PCMDaemon::PCMSystem
numOfOnlineCores	daemon/daemon/common.h	/^		uint32 numOfOnlineCores;$/;"	m	struct:PCMDaemon::PCMSystem
numOfOnlineSockets	daemon/daemon/common.h	/^		uint32 numOfOnlineSockets;$/;"	m	struct:PCMDaemon::PCMSystem
numOfQPILinksPerSocket	daemon/daemon/common.h	/^		uint32 numOfQPILinksPerSocket;$/;"	m	struct:PCMDaemon::PCMSystem
numOfSockets	daemon/daemon/common.h	/^		uint32 numOfSockets;$/;"	m	struct:PCMDaemon::PCMSystem
num_clients	MacMSRDriver/PcmMsr/PcmMsr.h	/^    uint32_t num_clients = 0;$/;"	m	class:PcmMsrDriverClassName
num_cores	MacMSRDriver/MSRAccessorPublic.h	/^    uint64_t num_cores;$/;"	m	class:MSRAccessor
num_cores	MacMSRDriver/PcmMsr/PcmMsr.h	/^    uint32_t num_cores;$/;"	m	class:PcmMsrDriverClassName
num_cores	cpucounters.h	/^    int32 num_cores;$/;"	m	class:PCM
num_events	pcm-pcie.cpp	/^uint32 num_events = (sizeof(PCIeEvents_t)\/sizeof(uint64));$/;"	v
num_handles	msr.cpp	/^int MsrHandle::num_handles = 0;$/;"	m	class:MsrHandle	file:
num_imc_channels	cpucounters.h	/^    std::vector<uint32> num_imc_channels; \/\/ number of memory channels in each memory controller$/;"	m	class:ServerPCICFGUncore
num_online_cores	cpucounters.h	/^    int32 num_online_cores;$/;"	m	class:PCM
num_online_sockets	cpucounters.h	/^    int32 num_online_sockets;$/;"	m	class:PCM
num_phys_cores_per_socket	cpucounters.h	/^    int32 num_phys_cores_per_socket;$/;"	m	class:PCM
num_sockets	cpucounters.h	/^    int32 num_sockets;$/;"	m	class:PCM
occ_ctr_rst	types.h	/^            uint64 occ_ctr_rst : 1;$/;"	m	struct:UncoreEventSelectRegister::__anon32::__anon33
occ_rd	pcm-latency.cpp	/^    double occ_rd;$/;"	m	struct:core_info	file:
offcore_events	pmu-query.py	/^        offcore_events=json.load(json_offcore_data)$/;"	v
offcore_events	pmu-query.py	/^offcore_events=[]$/;"	v
offcore_path	pmu-query.py	/^                offcore_path = model['Filename']$/;"	v
offcore_path	pmu-query.py	/^    offcore_path = ''$/;"	v
offset	cpucounters.h	/^    size_t offset;$/;"	m	class:MMIORegister32
offset	cpucounters.h	/^    size_t offset;$/;"	m	class:MMIORegister64
offset	cpucounters.h	/^    size_t offset;$/;"	m	class:MSRRegister
offset	cpucounters.h	/^    size_t offset;$/;"	m	class:PCICFGRegister32
offset	cpucounters.h	/^    size_t offset;$/;"	m	class:PCICFGRegister64
offset_0	lspci.h	/^        uint32_t offset_0;$/;"	m	union:pci::__anon1
offset_18	lspci.h	/^        uint32_t offset_18;$/;"	m	union:pci::__anon3
old_affinity	cpucounters.cpp	/^    cpu_set_t old_affinity;$/;"	m	class:TemporalThreadAffinity	file:
opcodeFieldMap	pcm-iio.cpp	/^map<string,PCM::PerfmonField> opcodeFieldMap;$/;"	v
openConnection	MacMSRDriver/MSRAccessor.cpp	/^kern_return_t MSRAccessor::openConnection(){$/;"	f	class:MSRAccessor
openMSRClient	MacMSRDriver/DriverInterface.c	/^kern_return_t openMSRClient(io_connect_t connect)$/;"	f
openMcfgTable	pci.cpp	/^int PciHandle::openMcfgTable() {$/;"	f	class:PciHandle
openUserClient	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::openUserClient(void)$/;"	f	class:PcmMsrClientClassName
operator ()	width_extender.h	/^        uint64 operator () () { return clientBW->getImcReads(); }$/;"	f	struct:CounterWidthExtender::ClientImcReadsCounter
operator ()	width_extender.h	/^        uint64 operator () () { return clientBW->getImcWrites(); }$/;"	f	struct:CounterWidthExtender::ClientImcWritesCounter
operator ()	width_extender.h	/^        uint64 operator () () { return clientBW->getIoRequests(); }$/;"	f	struct:CounterWidthExtender::ClientIoRequestsCounter
operator ()	width_extender.h	/^        uint64 operator () ()$/;"	f	struct:CounterWidthExtender::MBLCounter
operator ()	width_extender.h	/^        uint64 operator () ()$/;"	f	struct:CounterWidthExtender::MBTCounter
operator ()	width_extender.h	/^        uint64 operator () ()$/;"	f	struct:CounterWidthExtender::MsrHandleCounter
operator +=	cpucounters.h	/^    BasicCounterState & operator += (const BasicCounterState & o)$/;"	f	class:BasicCounterState
operator +=	cpucounters.h	/^    UncoreCounterState & operator += (const UncoreCounterState & o)$/;"	f	class:UncoreCounterState
operator <	lspci.h	/^bool operator < (const bdf &l, const bdf &r) {$/;"	f
operator <<	types.h	/^inline std::ostream & operator << (std::ostream & o, const FixedEventControlRegister & reg)$/;"	f
operator ==	memoptest.cpp	/^    bool operator == (const T & k) const$/;"	f	struct:T
operator ==	readmem.cpp	/^    bool operator == (const T & k) const$/;"	f	struct:T
operator ==	realtime.cpp	/^    bool operator == (const T & k) const$/;"	f	struct:T
operator >>	utils.h	/^inline std::istream & operator >> (std::istream & istr, s_expect && s)$/;"	f
operator >>	utils.h	/^inline std::istream & operator >> (std::istream && istr, s_expect && s)$/;"	f
opt_offset	freegetopt/getopt.cpp	/^static int opt_offset = 0;             \/* Index into compounded "-option" *\/$/;"	v	file:
optarg	freegetopt/getopt.cpp	/^char* optarg = NULL;$/;"	v
opterr	freegetopt/getopt.cpp	/^int opterr = 1;$/;"	v
optind	freegetopt/getopt.cpp	/^int optind = 0;$/;"	v
optopt	freegetopt/getopt.cpp	/^int optopt = '?';$/;"	v
os	types.h	/^            uint64 os : 1;$/;"	m	struct:EventSelectRegister::__anon28::__anon29
os0	types.h	/^            uint64 os0 : 1;$/;"	m	struct:FixedEventControlRegister::__anon30::__anon31
os1	types.h	/^            uint64 os1 : 1;$/;"	m	struct:FixedEventControlRegister::__anon30::__anon31
os2	types.h	/^            uint64 os2 : 1;$/;"	m	struct:FixedEventControlRegister::__anon30::__anon31
os_id	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t os_id;$/;"	m	struct:__anon22
os_id	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t os_id;$/;"	m	struct:__anon23
os_id	cpucounters.h	/^    int32 os_id;$/;"	m	struct:TopologyEntry
out_fd_	winpmem/winpmem.h	/^  HANDLE out_fd_;$/;"	m	class:WinPmem
outfile	cpucounters.h	/^    std::ofstream * outfile;       \/\/ output file stream$/;"	m	class:PCM
outgoing	daemon/daemon/common.h	/^		PCMQPISocketCounter outgoing[MAX_SOCKETS];$/;"	m	struct:PCMDaemon::PCMQPI
outgoingQPIFlits	cpucounters.h	/^    std::vector<std::vector<uint64> > outgoingQPIFlits; \/\/ idle or data\/non-data flits depending on the architecture$/;"	m	class:SystemCounterState
outgoingQPITrafficMetricsAvailable	cpucounters.h	/^    bool outgoingQPITrafficMetricsAvailable() const$/;"	f	class:PCM
outgoingQPITrafficMetricsAvailable	daemon/daemon/common.h	/^		bool outgoingQPITrafficMetricsAvailable;$/;"	m	struct:PCMDaemon::PCMQPI
outgoingTotal	daemon/daemon/common.h	/^		uint64 outgoingTotal;$/;"	m	struct:PCMDaemon::PCMQPI
overflow	utils.h	/^    void overflow(char) { }$/;"	f	struct:null_stream
overflow_enable	types.h	/^            uint64 overflow_enable : 1;$/;"	m	struct:IIOPMUCNTCTLRegister::__anon39::__anon40
p	pmu-query.py	/^        p = subprocess.Popen(['.\/pcm-core.exe -c'],stdout=subprocess.PIPE,shell=True) $/;"	v
p	pmu-query.py	/^        p = subprocess.Popen(['.\/pcm-core.x -c'],stdout=subprocess.PIPE,shell=True)$/;"	v
p	pmu-query.py	/^        p = subprocess.Popen(['pcm-core.exe -c'],stdout=subprocess.PIPE,shell=True)$/;"	v
pHandle	msr.h	/^    std::shared_ptr<MsrHandle> pHandle;$/;"	m	class:SafeMsrHandle
p_status	pmu-query.py	/^    p_status = p.wait()$/;"	v
packageEnergyHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable packageEnergyHash_;$/;"	m	class:PCMServiceNS::MeasureThread
packageEnergyMetricsAvailable	cpucounters.h	/^    bool packageEnergyMetricsAvailable() const$/;"	f	class:PCM
packageEnergyMetricsAvailable	daemon/daemon/common.h	/^		bool packageEnergyMetricsAvailable;$/;"	m	struct:PCMDaemon::PCMCore
packageThermalMetricsAvailable	cpucounters.h	/^    bool packageThermalMetricsAvailable() const$/;"	f	class:PCM
padding	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    char padding[108];$/;"	m	struct:__anon23
padding	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    char padding[115];$/;"	m	struct:__anon21
partialWrite	daemon/daemon/common.h	/^		float partialWrite;$/;"	m	struct:PCMDaemon::PCMMemorySocketCounter
partial_write	pcm-memory.cpp	/^    uint64 partial_write[max_sockets];$/;"	m	struct:memdata	file:
parts	lspci.h	/^        } parts[4]; \/* part 0, 1, 2, 3 *\/$/;"	m	struct:iio_skx::__anon9	typeref:struct:iio_skx::__anon9::__anon10
pbox_init_err	types.h	/^            uint64 pbox_init_err : 1;$/;"	m	struct:BecktonUncorePMUZDPCTLFVCRegister::__anon34::__anon35
pbox_init_err	types.h	/^            uint64 pbox_init_err : 1;$/;"	m	struct:BecktonUncorePMUZDPCTLFVCRegister::__anon34::__anon36
pci	lspci.h	/^struct pci {$/;"	s
pciAddress	pci.h	/^    DWORD pciAddress;$/;"	m	class:PciHandle
pciDevName	cpucounters.h	/^        std::string pciDevName;$/;"	m	struct:PCM::SimplePCIeDevInfo
pci_driver_driverinterface_h	MacMSRDriver/PCIDriverInterface.h	17;"	d
pcm	daemon/daemon/common.h	/^		SharedPCMCounters pcm;$/;"	m	struct:PCMDaemon::SharedPCMState
pcmInstance_	daemon/daemon/daemon.h	/^		PCM* pcmInstance_;$/;"	m	class:PCMDaemon::Daemon
pcm_c_build_core_event	pcm-core.cpp	/^	int pcm_c_build_core_event(uint8_t idx, const char * argv)$/;"	f
pcm_c_build_core_event	pcm.so/c_example.c	/^	int (*pcm_c_build_core_event)(uint8_t id, const char * argv);$/;"	m	struct:__anon26	file:
pcm_c_get_core_event	pcm-core.cpp	/^	uint64_t pcm_c_get_core_event(uint32_t core_id, uint32_t event_id)$/;"	f
pcm_c_get_core_event	pcm.so/c_example.c	/^	uint64_t (*pcm_c_get_core_event)(uint32_t core_id, uint32_t event_id);$/;"	m	struct:__anon26	file:
pcm_c_get_cycles	pcm-core.cpp	/^	uint64_t pcm_c_get_cycles(uint32_t core_id)$/;"	f
pcm_c_get_cycles	pcm.so/c_example.c	/^	uint64_t (*pcm_c_get_cycles)(uint32_t core_id);$/;"	m	struct:__anon26	file:
pcm_c_get_instr	pcm-core.cpp	/^	uint64_t pcm_c_get_instr(uint32_t core_id)$/;"	f
pcm_c_get_instr	pcm.so/c_example.c	/^	uint64_t (*pcm_c_get_instr)(uint32_t core_id);$/;"	m	struct:__anon26	file:
pcm_c_init	pcm-core.cpp	/^	int pcm_c_init()$/;"	f
pcm_c_init	pcm.so/c_example.c	/^	int (*pcm_c_init)();$/;"	m	struct:__anon26	file:
pcm_c_start	pcm-core.cpp	/^	void pcm_c_start()$/;"	f
pcm_c_start	pcm.so/c_example.c	/^	void (*pcm_c_start)();$/;"	m	struct:__anon26	file:
pcm_c_stop	pcm-core.cpp	/^	void pcm_c_stop()$/;"	f
pcm_c_stop	pcm.so/c_example.c	/^	void (*pcm_c_stop)();$/;"	m	struct:__anon26	file:
pcm_cpuid	cpucounters.cpp	/^void pcm_cpuid(const unsigned leaf, const unsigned subleaf, PCM_CPUID_INFO & info)$/;"	f
pcm_cpuid	cpucounters.cpp	/^void pcm_cpuid(int leaf, PCM_CPUID_INFO & info)$/;"	f
pcm_localtime	utils.h	/^inline tm pcm_localtime()$/;"	f
pcm_msr_data_t	MacMSRDriver/MSRKernel.h	/^} pcm_msr_data_t;$/;"	t	typeref:struct:__anon25
pcm_msr_data_t	MacMSRDriver/PcmMsr/UserKernelShared.h	/^} pcm_msr_data_t;$/;"	t	typeref:struct:__anon20
pcm_sscanf	utils.h	/^typedef std::istringstream pcm_sscanf;$/;"	t
pcuPMUs	cpucounters.h	/^    std::vector<UncorePMU> pcuPMUs;$/;"	m	class:PCM
perfEventHandle	cpucounters.h	/^    std::vector<std::vector<int> > perfEventHandle;$/;"	m	class:PCM
perfmon_config_anythread	cpucounters.h	/^    int32 perfmon_config_anythread;$/;"	m	class:PCM
perfmon_version	cpucounters.h	/^    uint32 perfmon_version;$/;"	m	class:PCM
permute_argv_once	freegetopt/getopt.cpp	/^static int permute_argv_once()$/;"	f	file:
pin_control	types.h	/^            uint64 pin_control : 1;$/;"	m	struct:EventSelectRegister::__anon28::__anon29
pkgCStateMsr	cpucounters.h	/^    uint64 * pkgCStateMsr;     \/\/ MSR addresses of package C-state free-running counters$/;"	m	class:PCM
pkgMaximumPower	cpucounters.h	/^    int32 pkgThermalSpecPower, pkgMinimumPower, pkgMaximumPower;$/;"	m	class:PCM
pkgMinimumPower	cpucounters.h	/^    int32 pkgThermalSpecPower, pkgMinimumPower, pkgMaximumPower;$/;"	m	class:PCM
pkgThermalSpecPower	cpucounters.h	/^    int32 pkgThermalSpecPower, pkgMinimumPower, pkgMaximumPower;$/;"	m	class:PCM
pmem	mmio.cpp	/^std::shared_ptr<WinPmem> MMIORange::pmem;$/;"	m	class:MMIORange	file:
pmem	mmio.h	/^    static std::shared_ptr<WinPmem> pmem;$/;"	m	class:MMIORange
pmi_en	types.h	/^            uint64 pmi_en : 1;$/;"	m	struct:BecktonUncorePMUCNTCTLRegister::__anon37::__anon38
pmuID	cpucounters.cpp	/^    int pmuID;$/;"	m	class:PerfVirtualControlRegister	file:
pollIntervalMs_	daemon/client/client.h	/^		int pollIntervalMs_;$/;"	m	class:PCMDaemon::Client
pollIntervalMs_	daemon/daemon/daemon.h	/^		uint32 pollIntervalMs_;$/;"	m	class:PCMDaemon::Daemon
pollMs	daemon/daemon/common.h	/^		uint32 pollMs;$/;"	m	struct:PCMDaemon::SharedPCMState
populatePerfPMUs	cpucounters.cpp	/^void populatePerfPMUs(unsigned socket_, const std::vector<int> & ids, std::vector<UncorePMU> & pmus, bool fixed, bool filter0, bool filter1)$/;"	f
post_cleanup_callback	utils.cpp	/^void (*post_cleanup_callback)(void) = NULL;$/;"	v
prepare_data	pcm-iio.cpp	/^vector<struct data> prepare_data(const vector<uint64_t> &values, const vector<string> &headers)$/;"	f
prev_argc	freegetopt/getopt.cpp	/^static int prev_argc = 0;              \/*    tell if getopt params change *\/$/;"	v	file:
prev_argv	freegetopt/getopt.cpp	/^static char** prev_argv = NULL;        \/* Keep a copy of argv and argc to *\/$/;"	v	file:
primary_bus_number	lspci.h	/^            uint8_t primary_bus_number;$/;"	m	struct:pci::__anon3::__anon4
print	types.h	/^    void print()$/;"	f	struct:MCFGHeader
print	types.h	/^    void print()$/;"	f	struct:MCFGRecord
printExampleUsageAndExit	daemon/daemon/daemon.cpp	/^	void Daemon::printExampleUsageAndExit(char *argv[])$/;"	f	class:PCMDaemon::Daemon
printSocketBWFooter	pcm-memory.cpp	/^void printSocketBWFooter(uint32 no_columns, uint32 skt, const memdata_t *md)$/;"	f
printSocketBWHeader	pcm-memory.cpp	/^void printSocketBWHeader(uint32 no_columns, uint32 skt, const bool show_channel_output)$/;"	f
printSocketChannelBW	pcm-memory.cpp	/^void printSocketChannelBW(PCM *m, memdata_t *md, uint32 no_columns, uint32 skt)$/;"	f
printSocketChannelBW	pcm-memory.cpp	/^void printSocketChannelBW(uint32 no_columns, uint32 skt, uint32 num_imc_channels, const ServerUncorePowerState * uncState1, const ServerUncorePowerState * uncState2, uint64 elapsedTime, int rankA, int rankB)$/;"	f
printSocketRankBWHeader	pcm-memory.cpp	/^void printSocketRankBWHeader(uint32 no_columns, uint32 skt)$/;"	f
printSystemTopology	cpucounters.cpp	/^void PCM::printSystemTopology() const$/;"	f	class:PCM
printTitle	daemon/client/main.cpp	/^void printTitle(std::string title)$/;"	f
print_all_stats	pcm-latency.cpp	/^void print_all_stats(PCM *m, bool enable_pmm, bool enable_verbose)$/;"	f
print_basic_metrics	pcm.cpp	/^void print_basic_metrics(const PCM * m, const State & state1, const State & state2)$/;"	f
print_basic_metrics_csv	pcm.cpp	/^void print_basic_metrics_csv(const PCM * m, const State & state1, const State & state2, const bool print_last_semicolon = true)$/;"	f
print_basic_metrics_csv_header	pcm.cpp	/^void print_basic_metrics_csv_header(const PCM * m)$/;"	f
print_basic_metrics_csv_semicolons	pcm.cpp	/^void print_basic_metrics_csv_semicolons(const PCM * m)$/;"	f
print_basic_stats	pcm-tsx.cpp	/^void print_basic_stats(const StateType & BeforeState, const StateType & AfterState, bool csv)$/;"	f
print_core_stats	pcm-latency.cpp	/^void print_core_stats(PCM *m, unsigned int core_size_per_socket, vector<vector<vector<struct core_info >>> &sk_th)$/;"	f
print_cpu_details	utils.cpp	/^void print_cpu_details()$/;"	f
print_csv	pcm.cpp	/^void print_csv(PCM * m,$/;"	f
print_csv_header	pcm.cpp	/^void print_csv_header(PCM * m,$/;"	f
print_custom_stats	pcm-core.cpp	/^void print_custom_stats(const StateType & BeforeState, const StateType & AfterState ,bool csv, uint64 txn_rate)$/;"	f
print_custom_stats	pcm-tsx.cpp	/^void print_custom_stats(const StateType & BeforeState, const StateType & AfterState, bool csv)$/;"	f
print_ddr	pcm-latency.cpp	/^void print_ddr(PCM *m, int ddr_ip)$/;"	f
print_events	pcm-pcie.cpp	/^void print_events()$/;"	f
print_help	pcm-memory.cpp	/^void print_help(const string prog_name)$/;"	f
print_help	pcm.cpp	/^void print_help(const string prog_name)$/;"	f
print_help_force_rtm_abort_mode	utils.cpp	/^void print_help_force_rtm_abort_mode(const int alignment)$/;"	f
print_mcfg	cpucounters.cpp	/^void print_mcfg(const char * path)$/;"	f
print_nameMap	pcm-iio.cpp	/^void print_nameMap() {$/;"	f
print_other_metrics	pcm.cpp	/^void print_other_metrics(const PCM * m, const State & state1, const State & state2)$/;"	f
print_other_metrics_csv	pcm.cpp	/^void print_other_metrics_csv(const PCM * m, const State & state1, const State & state2)$/;"	f
print_output	pcm.cpp	/^void print_output(PCM * m,$/;"	f
print_pci	lspci.h	/^void print_pci(struct pci p, const PCIDB & pciDB)$/;"	f
print_stats	pcm-numa.cpp	/^void print_stats(const StateType & BeforeState, const StateType & AfterState, bool csv)$/;"	f
print_usage	pcm-core.cpp	/^void print_usage(const string progname)$/;"	f
print_usage	pcm-latency.cpp	/^void print_usage()$/;"	f
print_usage	pcm-msr.cpp	/^void print_usage(const char * progname)$/;"	f
print_usage	pcm-numa.cpp	/^void print_usage(const string progname)$/;"	f
print_usage	pcm-pcicfg.cpp	/^void print_usage(const char * progname)$/;"	f
print_usage	pcm-pcie.cpp	/^void print_usage(const string progname)$/;"	f
print_usage	pcm-power.cpp	/^void print_usage(const string progname)$/;"	f
print_usage	pcm-tsx.cpp	/^void print_usage(const string progname)$/;"	f
print_verbose	pcm-latency.cpp	/^void print_verbose(PCM *m, int ddr_ip)$/;"	f
probe_capability_pci_express	lspci.h	/^void probe_capability_pci_express(struct pci *p, uint32_t cap_ptr)$/;"	f
probe_pci	lspci.h	/^void probe_pci(struct pci *p)$/;"	f
processIntanceMutex	cpucounters.cpp	/^pthread_mutex_t processIntanceMutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
program	cpucounters.cpp	/^PCM::ErrorCode PCM::program(const PCM::ProgramMode mode_, const void * parameter_)$/;"	f	class:PCM
program	cpucounters.cpp	/^void ServerPCICFGUncore::program()$/;"	f	class:ServerPCICFGUncore
programBecktonUncore	cpucounters.cpp	/^void PCM::programBecktonUncore(int32 core)$/;"	f	class:PCM
programCbo	cpucounters.cpp	/^void PCM::programCbo(const uint64 * events, const uint32 opCode, const uint32 nc_, const uint32 tid_)$/;"	f	class:PCM
programCboOpcodeFilter	cpucounters.cpp	/^void PCM::programCboOpcodeFilter(const uint32 opc0, UncorePMU & pmu, const uint32 nc_, const uint32 opc1)$/;"	f	class:PCM
programCoreCounters	cpucounters.cpp	/^PCM::ErrorCode PCM::programCoreCounters(const int i \/* core *\/,$/;"	f	class:PCM
programEDC	cpucounters.cpp	/^void ServerPCICFGUncore::programEDC(const uint32 * EDCCntConfig)$/;"	f	class:ServerPCICFGUncore
programIIOCounters	cpucounters.cpp	/^void PCM::programIIOCounters(IIOPMUCNTCTLRegister rawEvents[4], int IIOStack)$/;"	f	class:PCM
programIMC	cpucounters.cpp	/^void ServerPCICFGUncore::programIMC(const uint32 * MCCntConfig)$/;"	f	class:ServerPCICFGUncore
programLLCReadMissLatencyEvents	cpucounters.cpp	/^void PCM::programLLCReadMissLatencyEvents()$/;"	f	class:PCM
programM2M	cpucounters.cpp	/^void ServerPCICFGUncore::programM2M()$/;"	f	class:ServerPCICFGUncore
programNehalemEPUncore	cpucounters.cpp	/^void PCM::programNehalemEPUncore(int32 core)$/;"	f	class:PCM
programPCIeCounters	cpucounters.cpp	/^void PCM::programPCIeCounters(const PCM::PCIeEventCode event_, const uint32 tid_, const uint32 miss_, const uint32 q_, const uint32 nc_)$/;"	f	class:PCM
programPCIeMissCounters	cpucounters.cpp	/^void PCM::programPCIeMissCounters(const PCM::PCIeEventCode event_, const uint32 tid_, const uint32 q_, const uint32 nc_)$/;"	f	class:PCM
programServerUncoreLatencyMetrics	cpucounters.cpp	/^PCM::ErrorCode PCM::programServerUncoreLatencyMetrics(bool enable_pmm)$/;"	f	class:PCM
programServerUncoreMemoryMetrics	cpucounters.cpp	/^PCM::ErrorCode PCM::programServerUncoreMemoryMetrics(int rankA, int rankB, bool PMM)$/;"	f	class:PCM
programServerUncoreMemoryMetrics	cpucounters.cpp	/^void ServerPCICFGUncore::programServerUncoreMemoryMetrics(int rankA, int rankB, bool PMM)$/;"	f	class:ServerPCICFGUncore
programServerUncorePowerMetrics	cpucounters.cpp	/^PCM::ErrorCode PCM::programServerUncorePowerMetrics(int mc_profile, int pcu_profile, int * freq_bands)$/;"	f	class:PCM
programXPI	cpucounters.cpp	/^void ServerPCICFGUncore::programXPI(const uint32 * event)$/;"	f	class:ServerPCICFGUncore
program_power_metrics	cpucounters.cpp	/^void ServerPCICFGUncore::program_power_metrics(int mc_profile)$/;"	f	class:ServerPCICFGUncore
programmed_pmu	cpucounters.h	/^    bool programmed_pmu;$/;"	m	class:PCM
push	cpucounters.cpp	/^    void push(std::packaged_task<void()> & task)$/;"	f	class:CoreTaskQueue
qpi	PCM-Service_Win/PCMService.h	/^        bool qpi;$/;"	m	struct:PCMServiceNS::CollectionInformation
qpi	daemon/daemon/common.h	/^		PCMQPI qpi;$/;"	m	struct:PCMDaemon::SharedPCMCounters
qpiHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable qpiHash_;$/;"	m	class:PCMServiceNS::MeasureThread
qpiUtilizationMetricsAvailable	cpucounters.h	/^    bool qpiUtilizationMetricsAvailable() const$/;"	f	class:PCM
qpi_speed	cpucounters.h	/^    std::vector<uint64> qpi_speed;$/;"	m	class:ServerPCICFGUncore
raw_counter	width_extender.h	/^    AbstractRawCounter * raw_counter;$/;"	m	class:CounterWidthExtender
rdmsr	MacMSRDriver/PcmMsr/PcmMsr.cpp	23;"	d	file:
read	MacMSRDriver/MSRAccessor.cpp	/^int32_t MSRAccessor::read(uint32_t core_num, uint64_t msr_num, uint64_t * value){$/;"	f	class:MSRAccessor
read	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^uint32_t PcmMsrDriverClassName::read(uint32_t pci_address)$/;"	f	class:PcmMsrDriverClassName
read	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::read(const uint64_t* input, uint32_t inputSize, uint64_t* output, uint32_t outputSize)$/;"	f	class:PcmMsrClientClassName
read	daemon/client/client.cpp	/^	PCMDaemon::SharedPCMState& Client::read()$/;"	f	class:PCMDaemon::Client
read	daemon/daemon/common.h	/^		float read;$/;"	m	struct:PCMDaemon::PCMMemoryChannelCounter
read	daemon/daemon/common.h	/^		float read;$/;"	m	struct:PCMDaemon::PCMMemorySocketCounter
read	daemon/daemon/common.h	/^		float read;$/;"	m	struct:PCMDaemon::PCMMemorySystemCounter
read	msr.cpp	/^int32 MsrHandle::read(uint64 msr_number, uint64 * value)$/;"	f	class:MsrHandle
read	msr.h	/^    int32 read(uint64 msr_number, uint64 * value)$/;"	f	class:SafeMsrHandle
read	width_extender.h	/^    uint64 read() \/\/ read extended value$/;"	f	class:CounterWidthExtender
read	winpmem/winpmem.h	/^  void read(__int64 start, T & result)$/;"	f	class:WinPmem
read32	mmio.cpp	/^uint32 MMIORange::read32(uint64 offset)$/;"	f	class:MMIORange
read32	mmio.h	/^    uint32 read32(uint64 offset)$/;"	f	class:MMIORange
read32	pci.cpp	/^int32 PciHandle::read32(uint64 offset, uint32 * value)$/;"	f	class:PciHandle
read32	pci.cpp	/^int32 PciHandleM::read32(uint64 offset, uint32 * value)$/;"	f	class:PciHandleM
read32	pci.cpp	/^int32 PciHandleMM::read32(uint64 offset, uint32 * value)$/;"	f	class:PciHandleMM
read64	mmio.cpp	/^uint64 MMIORange::read64(uint64 offset)$/;"	f	class:MMIORange
read64	mmio.h	/^    uint64 read64(uint64 offset)$/;"	f	class:MMIORange
read64	pci.cpp	/^int32 PciHandle::read64(uint64 offset, uint64 * value)$/;"	f	class:PciHandle
read64	pci.cpp	/^int32 PciHandleM::read64(uint64 offset, uint64 * value)$/;"	f	class:PciHandleM
read64	pci.cpp	/^int32 PciHandleMM::read64(uint64 offset, uint64 * value)$/;"	f	class:PciHandleMM
readAndAggregate	cpucounters.cpp	/^void BasicCounterState::readAndAggregate(std::shared_ptr<SafeMsrHandle> msr)$/;"	f	class:BasicCounterState
readAndAggregate	cpucounters.cpp	/^void UncoreCounterState::readAndAggregate(std::shared_ptr<SafeMsrHandle> msr)$/;"	f	class:UncoreCounterState
readAndAggregate	cpucounters.h	/^    void readAndAggregate(std::shared_ptr<SafeMsrHandle> handle)$/;"	f	class:SocketCounterState
readAndAggregate	cpucounters.h	/^    void readAndAggregate(std::shared_ptr<SafeMsrHandle> handle)$/;"	f	class:SystemCounterState
readAndAggregateEnergyCounters	cpucounters.cpp	/^void PCM::readAndAggregateEnergyCounters(const uint32 socket, CounterStateType & result)$/;"	f	class:PCM
readAndAggregateMemoryBWCounters	cpucounters.cpp	/^void PCM::readAndAggregateMemoryBWCounters(const uint32 core, CounterStateType & result)$/;"	f	class:PCM
readAndAggregatePackageCStateResidencies	cpucounters.cpp	/^void PCM::readAndAggregatePackageCStateResidencies(std::shared_ptr<SafeMsrHandle> msr, CounterStateType & result)$/;"	f	class:PCM
readAndAggregateTSC	cpucounters.cpp	/^void BasicCounterState::readAndAggregateTSC(std::shared_ptr<SafeMsrHandle> msr)$/;"	f	class:BasicCounterState
readAndAggregateUncoreMCCounters	cpucounters.cpp	/^void PCM::readAndAggregateUncoreMCCounters(const uint32 socket, CounterStateType & result)$/;"	f	class:PCM
readApplicationArguments	daemon/daemon/daemon.cpp	/^	void Daemon::readApplicationArguments(int argc, char *argv[])$/;"	f	class:PCMDaemon::Daemon
readCPUMicrocodeLevel	cpucounters.cpp	/^void PCM::readCPUMicrocodeLevel()$/;"	f	class:PCM
readCoreCounterConfig	cpucounters.cpp	/^void PCM::readCoreCounterConfig()$/;"	f	class:PCM
readInternal	mmio.h	/^    void readInternal(uint64 offset, T & res)$/;"	f	class:MMIORange
readMCFG	pci.cpp	/^void PciHandleMM::readMCFG()$/;"	f	class:PciHandleMM
readMSR	MacMSRDriver/DriverInterface.c	/^kern_return_t readMSR(io_connect_t connect, pcm_msr_data_t* idata, size_t* idata_size,pcm_msr_data_t* odata, size_t* odata_size)$/;"	f
readMSR	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^IOReturn PcmMsrDriverClassName::readMSR(pcm_msr_data_t* idatas,pcm_msr_data_t* odatas){$/;"	f	class:PcmMsrDriverClassName
readMSR	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::readMSR(pcm_msr_data_t* idata, pcm_msr_data_t* odata)$/;"	f	class:PcmMsrClientClassName
readMaxFromSysFS	cpucounters.cpp	/^int readMaxFromSysFS(const char * path)$/;"	f
readMemory	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::readMemory(const uint64_t* input, uint32_t inputSize, uint64_t* output, uint32_t outputSize)$/;"	f	class:PcmMsrClientClassName
readPackageThermalHeadroom	cpucounters.cpp	/^void PCM::readPackageThermalHeadroom(const uint32 socket, CounterStateType & result)$/;"	f	class:PCM
readPerfData	cpucounters.cpp	/^void PCM::readPerfData(uint32 core, std::vector<uint64> & outData)$/;"	f	class:PCM
readQPICounters	cpucounters.cpp	/^void PCM::readQPICounters(SystemCounterState & result)$/;"	f	class:PCM
readSysFS	cpucounters.cpp	/^std::string readSysFS(const char * path, bool silent = false)$/;"	f
read_intensive_task	memoptest.cpp	/^void read_intensive_task(Y * p, Y * e, int value)$/;"	f
read_number	pcm-msr.cpp	/^uint64 read_number(char * str)$/;"	f
read_number	pcm-pcicfg.cpp	/^uint64 read_number(char * str)$/;"	f
readonly	mmio.h	/^    const bool readonly;$/;"	m	class:MMIORange
reg	WinMSRDriver/Win7/msrstruct.h	/^    ULONG bus, dev, func, reg, bytes;$/;"	m	struct:PCICFG_Request
reg	cpucounters.cpp	/^    struct { unsigned int eax, ebx, ecx, edx; } reg;$/;"	m	union:PCM_CPUID_INFO	typeref:struct:PCM_CPUID_INFO::__anon1	file:
regs	pcm-core.cpp	/^	EventSelectRegister regs[PERF_MAX_COUNTERS];$/;"	v
relFreqHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable relFreqHash_;$/;"	m	class:PCMServiceNS::MeasureThread
relativeFrequency	daemon/daemon/common.h	/^		double relativeFrequency;$/;"	m	struct:PCMDaemon::PCMCoreCounter
remoteMemoryAccesses	daemon/daemon/common.h	/^		uint64 remoteMemoryAccesses;$/;"	m	struct:PCMDaemon::PCMCoreCounter
remoteMemoryBW	daemon/daemon/common.h	/^		uint64 remoteMemoryBW;$/;"	m	struct:PCMDaemon::PCMCoreCounter
remoteMemoryBWAvailable	daemon/daemon/common.h	/^		bool remoteMemoryBWAvailable;$/;"	m	struct:PCMDaemon::PCMCoreCounter
removeNullTerminator	PCM_Win/windriver.h	/^    static void removeNullTerminator(std::wstring& s)$/;"	f	class:Driver
reportQPISpeed	cpucounters.cpp	/^void PCM::reportQPISpeed() const$/;"	f	class:PCM
reportQPISpeed	cpucounters.cpp	/^void ServerPCICFGUncore::reportQPISpeed() const$/;"	f	class:ServerPCICFGUncore
res_core	pcm-latency.cpp	/^struct res_core$/;"	s	file:
res_uncore	pcm-latency.cpp	/^struct res_uncore$/;"	s	file:
reserved	types.h	/^    char reserved[4];$/;"	m	struct:MCFGRecord
reserved	types.h	/^    char reserved[8];$/;"	m	struct:MCFGHeader
reserved1	types.h	/^            uint64 reserved1 : 1;$/;"	m	struct:IIOPMUCNTCTLRegister::__anon39::__anon40
reserved1	types.h	/^            uint64 reserved1 : 1;$/;"	m	struct:UncoreEventSelectRegister::__anon32::__anon33
reserved1	types.h	/^            uint64 reserved1 : 52;$/;"	m	struct:FixedEventControlRegister::__anon30::__anon31
reserved2	types.h	/^            uint64 reserved2 : 1;$/;"	m	struct:IIOPMUCNTCTLRegister::__anon39::__anon40
reserved2	types.h	/^            uint64 reserved2 : 1;$/;"	m	struct:UncoreEventSelectRegister::__anon32::__anon33
reserved3	types.h	/^            uint64 reserved3 : 1;$/;"	m	struct:UncoreEventSelectRegister::__anon32::__anon33
reservedX	types.h	/^            uint64 reservedX : 17;$/;"	m	struct:IIOPMUCNTCTLRegister::__anon39::__anon40
reservedX	types.h	/^            uint64 reservedX : 30;$/;"	m	struct:EventSelectRegister::__anon28::__anon29
reservedx	types.h	/^            uint64 reservedx : 32;$/;"	m	struct:UncoreEventSelectRegister::__anon32::__anon33
reset	types.h	/^            uint64 reset : 1;$/;"	m	struct:IIOPMUCNTCTLRegister::__anon39::__anon40
reset	width_extender.h	/^    void reset()$/;"	f	class:CounterWidthExtender
resetPMU	cpucounters.cpp	/^void PCM::resetPMU()$/;"	f	class:PCM
resolveGroupName	daemon/daemon/daemon.cpp	/^	gid_t Daemon::resolveGroupName(const std::string& groupName)$/;"	f	class:PCMDaemon::Daemon
resp	types.h	/^            uint64 resp : 3;$/;"	m	struct:BecktonUncorePMUZDPCTLFVCRegister::__anon34::__anon35
resp	types.h	/^            uint64 resp : 3;$/;"	m	struct:BecktonUncorePMUZDPCTLFVCRegister::__anon34::__anon36
restoreOutput	cpucounters.cpp	/^void PCM::restoreOutput()$/;"	f	class:PCM
restore_signal_handlers	utils.cpp	/^void restore_signal_handlers(void)$/;"	f
restrictDriverAccess	PCM_Win/restrictDriverAccess.cpp	/^void restrictDriverAccess(LPCWSTR path)$/;"	f
result_content	lspci.h	/^typedef std::vector<stack_content> result_content;$/;"	t
revision	types.h	/^    unsigned char revision;$/;"	m	struct:MCFGHeader
rinsert	pcm-latency.cpp	/^    double rinsert;$/;"	m	struct:socket_info_uncore	file:
rlatency	pcm-latency.cpp	/^    double rlatency;$/;"	m	struct:socket_info_uncore	file:
roccupancy	pcm-latency.cpp	/^    double roccupancy;$/;"	m	struct:socket_info_uncore	file:
root_pci_dev	lspci.h	/^            struct pci root_pci_dev;   \/* single device represent root port *\/$/;"	m	struct:iio_skx::__anon9::__anon10	typeref:struct:iio_skx::__anon9::__anon10::pci
rsv1	types.h	/^            uint64 rsv1 : 1;$/;"	m	struct:BecktonUncorePMUCNTCTLRegister::__anon37::__anon38
rsv2	types.h	/^            uint64 rsv2 : 5;$/;"	m	struct:BecktonUncorePMUCNTCTLRegister::__anon37::__anon38
run	daemon/daemon/daemon.cpp	/^	int Daemon::run()$/;"	f	class:PCMDaemon::Daemon
run_state	cpucounters.h	/^    int run_state;                 \/\/ either running (1) or sleeping (0)$/;"	m	class:PCM
sBuildTopology	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sBuildTopology(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* args){$/;"	f	class:PcmMsrClientClassName
sCloseDriver	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sCloseDriver(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* arguments)$/;"	f	class:PcmMsrClientClassName
sDecrementNumInstances	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sDecrementNumInstances(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* args){$/;"	f	class:PcmMsrClientClassName
sGetNumInstances	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sGetNumInstances(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* args){$/;"	f	class:PcmMsrClientClassName
sIncrementNumInstances	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sIncrementNumInstances(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* args){$/;"	f	class:PcmMsrClientClassName
sMapMemory	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sMapMemory(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* arguments) {$/;"	f	class:PcmMsrClientClassName
sMethods	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^const IOExternalMethodDispatch PcmMsrClientClassName::sMethods[kNumberOfMethods] = {$/;"	m	class:PcmMsrClientClassName	file:
sMethods	MacMSRDriver/PcmMsr/PcmMsrClient.h	/^    static const IOExternalMethodDispatch   sMethods[kNumberOfMethods];$/;"	m	class:PcmMsrClientClassName
sOpenDriver	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sOpenDriver(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* arguments)$/;"	f	class:PcmMsrClientClassName
sRead	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sRead(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* arguments) {$/;"	f	class:PcmMsrClientClassName
sReadMSR	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sReadMSR(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* arguments){$/;"	f	class:PcmMsrClientClassName
sReadMemory	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sReadMemory(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* arguments) {$/;"	f	class:PcmMsrClientClassName
sUnmapMemory	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sUnmapMemory(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* arguments) {$/;"	f	class:PcmMsrClientClassName
sWrite	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sWrite(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* arguments) {$/;"	f	class:PcmMsrClientClassName
sWriteMSR	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sWriteMSR(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* arguments){$/;"	f	class:PcmMsrClientClassName
s_expect	utils.h	/^    explicit s_expect(const char * s) : std::string(s) {}$/;"	f	class:s_expect
s_expect	utils.h	/^    explicit s_expect(const std::string & s) : std::string(s) {}$/;"	f	class:s_expect
s_expect	utils.h	/^class s_expect : public std::string$/;"	c
sampleRate_	PCM-Service_Win/PCMService.h	/^        const int sampleRate_;$/;"	m	class:PCMServiceNS::MeasureThread
sample_t	pcm-pcie.cpp	/^}sample_t;$/;"	t	typeref:struct:__anon43	file:
scanBus	pcm-lspci.cpp	/^void scanBus(int bus, const PCIDB & pciDB)$/;"	f
secondary_bus_number	lspci.h	/^            uint8_t secondary_bus_number;$/;"	m	struct:pci::__anon3::__anon4
serverUncorePowerStatesAfter_	daemon/daemon/daemon.h	/^		ServerUncorePowerState* serverUncorePowerStatesAfter_;$/;"	m	class:PCMDaemon::Daemon
serverUncorePowerStatesBefore_	daemon/daemon/daemon.h	/^		ServerUncorePowerState* serverUncorePowerStatesBefore_;$/;"	m	class:PCMDaemon::Daemon
server_pcicfg_uncore	cpucounters.h	/^    std::vector<std::shared_ptr<ServerPCICFGUncore> > server_pcicfg_uncore;$/;"	m	class:PCM
service	MacMSRDriver/MSRAccessor.h	/^    io_service_t service;$/;"	m	class:MSRAccessor
serviceInstaller1	PCM-Service_Win/PCMInstaller.h	/^    private: System::ServiceProcess::ServiceInstaller^  serviceInstaller1;$/;"	m	class:PMUService::ProjectInstaller
serviceProcessInstaller1	PCM-Service_Win/PCMInstaller.h	/^    private: System::ServiceProcess::ServiceProcessInstaller^  serviceProcessInstaller1;$/;"	m	class:PMUService::ProjectInstaller
service_name	winpmem/winpmem.h	/^  TCHAR *service_name;$/;"	m	class:WinPmem
setBlocked	cpucounters.h	/^    void setBlocked(const bool new_blocked) { blocked = new_blocked; }$/;"	f	class:PCM
setConfigValue	PCM_Win/windriver.h	/^    static std::wstring setConfigValue(const LPCWSTR key, const std::wstring& defaultValue)$/;"	f	class:Driver
setOutput	cpucounters.cpp	/^void PCM::setOutput(const std::string filename)$/;"	f	class:PCM
setPollInterval	daemon/client/client.cpp	/^	void Client::setPollInterval(int pollMs)$/;"	f	class:PCMDaemon::Client
setRunState	cpucounters.h	/^    void setRunState(int new_state) { run_state = new_state; }$/;"	f	class:PCM
setSharedMemoryIdLocation	daemon/client/client.cpp	/^	void Client::setSharedMemoryIdLocation(const std::string& location)$/;"	f	class:PCMDaemon::Client
set_acquisition_mode	winpmem/winpmem.cpp	/^int WinPmem::set_acquisition_mode(__int32 mode) {$/;"	f	class:WinPmem
set_flag_sel	types.h	/^            uint64 set_flag_sel : 3;$/;"	m	struct:BecktonUncorePMUCNTCTLRegister::__anon37::__anon38
set_post_cleanup_callback	utils.cpp	/^void set_post_cleanup_callback(void(*cb)(void))$/;"	f
set_signal_handlers	utils.cpp	/^void set_signal_handlers(void)$/;"	f
setupCustomCoreEventsForNuma	cpucounters.cpp	/^void PCM::setupCustomCoreEventsForNuma(PCM::ExtendedCustomCoreEventDescription& conf) const$/;"	f	class:PCM
setupPCM	daemon/daemon/daemon.cpp	/^	void Daemon::setupPCM()$/;"	f	class:PCMDaemon::Daemon
setupSharedMemory	daemon/client/client.cpp	/^	void Client::setupSharedMemory()$/;"	f	class:PCMDaemon::Client
setupSharedMemory	daemon/daemon/daemon.cpp	/^	void Daemon::setupSharedMemory()$/;"	f	class:PCMDaemon::Daemon
sharedMemoryId_	daemon/daemon/daemon.cpp	/^	int Daemon::sharedMemoryId_;$/;"	m	class:PCMDaemon::Daemon	file:
sharedMemoryId_	daemon/daemon/daemon.h	/^		static int sharedMemoryId_;$/;"	m	class:PCMDaemon::Daemon
sharedPCMState_	daemon/client/client.h	/^		PCMDaemon::SharedPCMState* sharedPCMState_;$/;"	m	class:PCMDaemon::Client
sharedPCMState_	daemon/daemon/daemon.cpp	/^	SharedPCMState* Daemon::sharedPCMState_;$/;"	m	class:PCMDaemon::Daemon	file:
sharedPCMState_	daemon/daemon/daemon.h	/^		static SharedPCMState* sharedPCMState_;$/;"	m	class:PCMDaemon::Daemon
shmAttached_	daemon/client/client.h	/^		bool shmAttached_;$/;"	m	class:PCMDaemon::Client
shmIdLocation_	daemon/client/client.h	/^		std::string shmIdLocation_;$/;"	m	class:PCMDaemon::Client
shmIdLocation_	daemon/daemon/daemon.cpp	/^	std::string Daemon::shmIdLocation_;$/;"	m	class:PCMDaemon::Daemon	file:
shmIdLocation_	daemon/daemon/daemon.h	/^		static std::string shmIdLocation_;$/;"	m	class:PCMDaemon::Daemon
showSpecControlMSRs	cpucounters.cpp	/^void PCM::showSpecControlMSRs()$/;"	f	class:PCM
sigCONT_handler	utils.cpp	/^void sigCONT_handler(int signum)$/;"	f
sigHUP_handler	utils.cpp	/^void sigHUP_handler(int signum)$/;"	f
sigINT_handler	utils.cpp	/^BOOL sigINT_handler(DWORD fdwCtrlType)$/;"	f
sigINT_handler	utils.cpp	/^void sigINT_handler(int signum)$/;"	f
sigSTOP_handler	utils.cpp	/^void sigSTOP_handler(int signum)$/;"	f
sigUSR_handler	utils.cpp	/^void sigUSR_handler(int signum)$/;"	f
signature	types.h	/^    char signature[4];$/;"	m	struct:MCFGHeader
size	mmio.h	/^    const uint64 size;$/;"	m	class:MMIORange
skstates1	cpuasynchcounter.h	/^    SocketCounterState * skstates1, * skstates2;$/;"	m	class:AsynchronCounterState
skstates2	cpuasynchcounter.h	/^    SocketCounterState * skstates1, * skstates2;$/;"	m	class:AsynchronCounterState
skt	pcm-latency.cpp	/^    vector<struct socket_info_uncore> skt;$/;"	m	struct:res_uncore	file:
socket	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t socket;$/;"	m	struct:__anon22
socket	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t socket;$/;"	m	struct:__anon23
socket	PCM-Service_Win/PCMService.h	/^        bool socket;$/;"	m	struct:PCMServiceNS::CollectionInformation
socket	cpucounters.cpp	/^    int socket;$/;"	m	class:PerfVirtualControlRegister	file:
socket	cpucounters.h	/^    int32 socket;$/;"	m	struct:TopologyEntry
socket	pcm-latency.cpp	/^    int socket;$/;"	m	struct:core_info	file:
socket	pcm-latency.cpp	/^    vector<struct core_info> socket;$/;"	m	struct:res_core	file:
socket2M2Mbus	cpucounters.cpp	/^std::vector<std::pair<uint32,uint32> > ServerPCICFGUncore::socket2M2Mbus;$/;"	m	class:ServerPCICFGUncore	file:
socket2M2Mbus	cpucounters.h	/^    static std::vector<std::pair<uint32, uint32> > socket2M2Mbus;$/;"	m	class:ServerPCICFGUncore
socket2UPIbus	cpucounters.cpp	/^std::vector<std::pair<uint32,uint32> > ServerPCICFGUncore::socket2UPIbus;$/;"	m	class:ServerPCICFGUncore	file:
socket2UPIbus	cpucounters.h	/^    static std::vector<std::pair<uint32, uint32> > socket2UPIbus;$/;"	m	class:ServerPCICFGUncore
socket2busMutex	cpucounters.cpp	/^PCM_Util::Mutex ServerPCICFGUncore::socket2busMutex;$/;"	m	class:ServerPCICFGUncore	file:
socket2busMutex	cpucounters.h	/^    static PCM_Util::Mutex socket2busMutex;$/;"	m	class:ServerPCICFGUncore
socket2iMCbus	cpucounters.cpp	/^std::vector<std::pair<uint32,uint32> > ServerPCICFGUncore::socket2iMCbus;$/;"	m	class:ServerPCICFGUncore	file:
socket2iMCbus	cpucounters.h	/^    static std::vector<std::pair<uint32, uint32> > socket2iMCbus;$/;"	m	class:ServerPCICFGUncore
socketId	daemon/daemon/common.h	/^		int32 socketId;$/;"	m	struct:PCMDaemon::PCMCoreCounter
socketId	daemon/daemon/common.h	/^		uint64 socketId;$/;"	m	struct:PCMDaemon::PCMMemorySocketCounter
socketId	daemon/daemon/common.h	/^		uint64 socketId;$/;"	m	struct:PCMDaemon::PCMQPISocketCounter
socketRefCore	cpucounters.h	/^    std::vector<int32> socketRefCore;$/;"	m	class:PCM
socketStatesAfter_	daemon/daemon/daemon.h	/^		std::vector<SocketCounterState> socketStatesBefore_, socketStatesAfter_;$/;"	m	class:PCMDaemon::Daemon
socketStatesBefore_	daemon/daemon/daemon.h	/^		std::vector<SocketCounterState> socketStatesBefore_, socketStatesAfter_;$/;"	m	class:PCMDaemon::Daemon
socket_id	lspci.h	/^    uint32_t socket_id;$/;"	m	struct:iio_skx
socket_id	pcm-latency.cpp	/^    int socket_id;$/;"	m	struct:socket_info_pci	file:
socket_id	pcm-latency.cpp	/^    int socket_id;$/;"	m	struct:socket_info_uncore	file:
socket_info_pci	pcm-latency.cpp	/^struct socket_info_pci$/;"	s	file:
socket_info_uncore	pcm-latency.cpp	/^struct socket_info_uncore$/;"	s	file:
sockets	daemon/daemon/common.h	/^		PCMMemorySocketCounter sockets[MAX_SOCKETS];$/;"	m	struct:PCMDaemon::PCMMemory
ss	PCM_Win/windriver.h	/^    SERVICE_STATUS ss;$/;"	m	class:Driver
sstate1	cpuasynchcounter.h	/^    SystemCounterState sstate1, sstate2;$/;"	m	class:AsynchronCounterState
sstate2	cpuasynchcounter.h	/^    SystemCounterState sstate1, sstate2;$/;"	m	class:AsynchronCounterState
stack_content	lspci.h	/^typedef std::vector<ctr_data> stack_content;$/;"	t
stack_name	lspci.h	/^        std::string stack_name;$/;"	m	struct:iio_skx::__anon9
stacks	lspci.h	/^    } stacks[6]; \/* iio stack 0, 1, 2, 3, 4, 5 *\/$/;"	m	struct:iio_skx	typeref:struct:iio_skx::__anon9
start	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^bool PcmMsrDriverClassName::start(IOService* provider){$/;"	f	class:PcmMsrDriverClassName
start	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^bool PcmMsrClientClassName::start(IOService* provider)$/;"	f	class:PcmMsrClientClassName
start	PCM_Win/windriver.h	/^    bool start()$/;"	f	class:Driver
startAddr	mmio.h	/^    uint64 startAddr;$/;"	m	class:MMIORange
startBusNumber	types.h	/^    unsigned char startBusNumber;$/;"	m	struct:MCFGRecord
std	width_extender.h	/^namespace std {$/;"	n
stop	PCM_Win/windriver.h	/^    void stop()$/;"	f	class:Driver
storage_mode	types.h	/^            uint64 storage_mode : 2;$/;"	m	struct:BecktonUncorePMUCNTCTLRegister::__anon37::__anon38
store_latency_core	pcm-latency.cpp	/^void store_latency_core(PCM *m)$/;"	f
store_latency_uncore	pcm-latency.cpp	/^void store_latency_uncore(PCM *m, bool ddr, int delay_ms)$/;"	f
stream_write_task	memoptest.cpp	/^void stream_write_task(Y * p, Y * e, int value)$/;"	f
strtok_r	pcm-core.cpp	22;"	d	file:
subordinate_bus_number	lspci.h	/^            uint8_t subordinate_bus_number;$/;"	m	struct:pci::__anon3::__anon4
subscribers_	daemon/daemon/daemon.h	/^		std::map<std::string, uint32> subscribers_;$/;"	m	class:PCMDaemon::Daemon
super	MacMSRDriver/PcmMsr/PcmMsr.cpp	83;"	d	file:
super	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	20;"	d	file:
supportNHLECountBasicStat	pcm-tsx.cpp	/^bool supportNHLECountBasicStat = true;$/;"	v
supported	cpucounters.cpp	/^    bool supported() const { return false;  }$/;"	f	class:TemporalThreadAffinity
supported	cpucounters.cpp	/^    bool supported() const { return true; }$/;"	f	class:TemporalThreadAffinity
supportsHLE	cpucounters.cpp	/^bool PCM::supportsHLE() const$/;"	f	class:PCM
supportsRTM	cpucounters.cpp	/^bool PCM::supportsRTM() const$/;"	f	class:PCM
suppress_output	winpmem/winpmem.h	/^  int suppress_output;$/;"	m	class:WinPmem
swapPCMBeforeAfterState	daemon/daemon/daemon.cpp	/^	void Daemon::swapPCMBeforeAfterState()$/;"	f	class:PCMDaemon::Daemon
system	daemon/daemon/common.h	/^		PCMMemorySystemCounter system;$/;"	m	struct:PCMDaemon::PCMMemory
system	daemon/daemon/common.h	/^		PCMSystem system;$/;"	m	struct:PCMDaemon::SharedPCMCounters
systemStatesAfter_	daemon/daemon/daemon.h	/^		SystemCounterState systemStatesBefore_, systemStatesForQPIBefore_, systemStatesAfter_;$/;"	m	class:PCMDaemon::Daemon
systemStatesBefore_	daemon/daemon/daemon.h	/^		SystemCounterState systemStatesBefore_, systemStatesForQPIBefore_, systemStatesAfter_;$/;"	m	class:PCMDaemon::Daemon
systemStatesForQPIBefore_	daemon/daemon/daemon.h	/^		SystemCounterState systemStatesBefore_, systemStatesForQPIBefore_, systemStatesAfter_;$/;"	m	class:PCMDaemon::Daemon
temp_format	pcm.cpp	/^std::string temp_format(int32 t)$/;"	f
thermalHeadroom	daemon/daemon/common.h	/^		int32 thermalHeadroom;$/;"	m	struct:PCMDaemon::PCMCoreCounter
thermalHeadroomHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable thermalHeadroomHash_;$/;"	m	class:PCMServiceNS::MeasureThread
thread	pcm-latency.cpp	/^    int thread;$/;"	m	struct:core_info	file:
thread_id	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t thread_id;$/;"	m	struct:__anon22
thread_id	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t thread_id;$/;"	m	struct:__anon23
thread_id	cpucounters.h	/^    int32 thread_id;$/;"	m	struct:TopologyEntry
threads_per_core	cpucounters.h	/^    int32 threads_per_core;$/;"	m	class:PCM
thresh	types.h	/^            uint64 thresh : 12;$/;"	m	struct:IIOPMUCNTCTLRegister::__anon39::__anon40
ticksHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable ticksHash_;$/;"	m	class:PCMServiceNS::MeasureThread
tile_id	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t tile_id;$/;"	m	struct:__anon22
tile_id	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t tile_id;$/;"	m	struct:__anon23
tile_id	cpucounters.h	/^    int32 tile_id; \/\/ tile is a constalation of 1 or more cores sharing salem L2 cache. Unique for entire system$/;"	m	struct:TopologyEntry
timestamp	daemon/daemon/common.h	/^		uint64 timestamp;$/;"	m	struct:PCMDaemon::SharedPCMState
toggle_write_mode	winpmem/winpmem.cpp	/^int WinPmem::toggle_write_mode() {$/;"	f	class:WinPmem
topologies	MacMSRDriver/PcmMsr/PcmMsr.h	/^    kTopologyEntry *topologies;$/;"	m	class:PcmMsrDriverClassName
topology	cpucounters.h	/^    std::vector<TopologyEntry> topology;$/;"	m	class:PCM
topologyEntry	MacMSRDriver/PcmMsr/UserKernelShared.h	/^} topologyEntry;$/;"	t	typeref:struct:__anon22
total	daemon/daemon/common.h	/^		float total;$/;"	m	struct:PCMDaemon::PCMMemoryChannelCounter
total	daemon/daemon/common.h	/^		float total;$/;"	m	struct:PCMDaemon::PCMMemorySocketCounter
total	daemon/daemon/common.h	/^		float total;$/;"	m	struct:PCMDaemon::PCMMemorySystemCounter
total	daemon/daemon/common.h	/^		uint64 total;$/;"	m	struct:PCMDaemon::PCMQPISocketCounter
total	pcm-pcie.cpp	/^    PCIeEvents_t total; $/;"	m	struct:__anon43	file:
uboxPMUs	cpucounters.h	/^    std::vector<UncorePMU> uboxPMUs;$/;"	m	class:PCM
ui32	types.h	/^    } ui32;$/;"	m	union:cvt_ds	typeref:struct:cvt_ds::__anon41
ui64	types.h	/^    UINT64 ui64;$/;"	m	union:cvt_ds
uint32	daemon/daemon/common.h	/^	typedef unsigned int uint32;$/;"	t	namespace:PCMDaemon
uint32	types.h	/^typedef unsigned int uint32;$/;"	t
uint64	daemon/daemon/common.h	/^	typedef unsigned long uint64;$/;"	t	namespace:PCMDaemon
uint64	types.h	/^typedef unsigned long long uint64;$/;"	t
umask	pcm-tsx.cpp	/^    unsigned char umask;$/;"	m	struct:TSXEvent	file:
umask	types.h	/^            uint64 umask : 8;$/;"	m	struct:EventSelectRegister::__anon28::__anon29
umask	types.h	/^            uint64 umask : 8;$/;"	m	struct:IIOPMUCNTCTLRegister::__anon39::__anon40
umask	types.h	/^            uint64 umask : 8;$/;"	m	struct:UncoreEventSelectRegister::__anon32::__anon33
umask_value	cpucounters.h	/^        int32 event_number, umask_value;$/;"	m	struct:PCM::CustomCoreEventDescription
uncoreTSC	cpucounters.h	/^    uint64 uncoreTSC;$/;"	m	class:SystemCounterState
uncore_event	pcm-latency.cpp	/^} uncore_event[10];$/;"	v	typeref:struct:res_uncore
uncore_fixed_counter_num_max	cpucounters.h	/^    uint32 uncore_fixed_counter_num_max;$/;"	m	class:PCM
uncore_fixed_counter_num_used	cpucounters.h	/^    uint32 uncore_fixed_counter_num_used;$/;"	m	class:PCM
uncore_fixed_counter_width	cpucounters.h	/^    uint32 uncore_fixed_counter_width;$/;"	m	class:PCM
uncore_gen_counter_num_max	cpucounters.h	/^    uint32 uncore_gen_counter_num_max;$/;"	m	class:PCM
uncore_gen_counter_num_used	cpucounters.h	/^    uint32 uncore_gen_counter_num_used;$/;"	m	class:PCM
uncore_gen_counter_width	cpucounters.h	/^    uint32 uncore_gen_counter_width;$/;"	m	class:PCM
undefined	lspci.h	/^                    uint16_t undefined : 1;$/;"	m	struct:pci::__anon5::__anon6::__anon7::__anon8
unfreezeCounters	cpucounters.cpp	/^void ServerPCICFGUncore::unfreezeCounters()$/;"	f	class:ServerPCICFGUncore
unfreezeServerUncoreCounters	cpucounters.cpp	/^void PCM::unfreezeServerUncoreCounters()$/;"	f	class:PCM
unhandled_exception_handler	utils.cpp	/^LONG unhandled_exception_handler(LPEXCEPTION_POINTERS p)$/;"	f
uninstall	PCM_Win/windriver.h	/^    void uninstall()$/;"	f	class:Driver
uninstall_driver	winpmem/winpmem.cpp	/^int WinPmem::uninstall_driver() {$/;"	f	class:WinPmem
unitControl	cpucounters.h	/^    HWRegisterPtr unitControl;$/;"	m	class:UncorePMU
unit_format	utils.h	/^inline std::string unit_format(IntType n)$/;"	f
unlock	msr.h	/^    void unlock()$/;"	f	class:SafeMsrHandle
unlock	mutex.h	/^        void unlock()$/;"	f	class:PCM_Util::Mutex
unmapMemory	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^void PcmMsrDriverClassName::unmapMemory (void *memory_map)$/;"	f	class:PcmMsrDriverClassName
unmapMemory	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::unmapMemory(const uint64_t* input, uint32_t inputSize)$/;"	f	class:PcmMsrClientClassName
updatePCMState	daemon/daemon/daemon.cpp	/^	void Daemon::updatePCMState(SystemCounterState* systemStates, std::vector<SocketCounterState>* socketStates, std::vector<CoreCounterState>* coreStates)$/;"	f	class:PCMDaemon::Daemon
useLinuxPerfForUncore	cpucounters.cpp	/^bool PCM::useLinuxPerfForUncore() const$/;"	f	class:PCM
useSkylakeEvents	cpucounters.h	/^    bool useSkylakeEvents() const$/;"	f	class:PCM
usr	types.h	/^            uint64 usr : 1;$/;"	m	struct:EventSelectRegister::__anon28::__anon29
usr0	types.h	/^            uint64 usr0 : 1;$/;"	m	struct:FixedEventControlRegister::__anon30::__anon31
usr1	types.h	/^            uint64 usr1 : 1;$/;"	m	struct:FixedEventControlRegister::__anon30::__anon31
usr2	types.h	/^            uint64 usr2 : 1;$/;"	m	struct:FixedEventControlRegister::__anon30::__anon31
utilization	daemon/daemon/common.h	/^		double utilization;$/;"	m	struct:PCMDaemon::PCMQPILinkCounter
v_event_name	lspci.h	/^  std::string v_event_name;$/;"	m	struct:counter
v_id	lspci.h	/^    uint32_t v_id;$/;"	m	struct:counter
v_id	lspci.h	/^typedef uint32_t v_id;$/;"	t
value	MacMSRDriver/MSRKernel.h	/^    uint64_t value;$/;"	m	struct:__anon25
value	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint64_t value;$/;"	m	struct:__anon20
value	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint64_t value;$/;"	m	struct:__anon21
value	pcm-core.cpp	/^	uint64 value;$/;"	m	struct:CoreEvent	file:
value	pcm-iio.cpp	/^    uint64_t value;$/;"	m	struct:data	file:
value	types.h	/^        uint64 value;$/;"	m	union:BecktonUncorePMUCNTCTLRegister::__anon37
value	types.h	/^        uint64 value;$/;"	m	union:BecktonUncorePMUZDPCTLFVCRegister::__anon34
value	types.h	/^        uint64 value;$/;"	m	union:EventSelectRegister::__anon28
value	types.h	/^        uint64 value;$/;"	m	union:FixedEventControlRegister::__anon30
value	types.h	/^        uint64 value;$/;"	m	union:IIOPMUCNTCTLRegister::__anon39
value	types.h	/^        uint64 value;$/;"	m	union:UncoreEventSelectRegister::__anon32
values	lspci.h	/^        std::vector<uint64_t> values;$/;"	m	struct:iio_skx::__anon9
vector	cpucounters.h	/^template class PCM_API std::vector<CounterWidthExtender *>;$/;"	m	class:std	typeref:class:std::
vector	cpucounters.h	/^template class PCM_API std::vector<TopologyEntry>;$/;"	m	class:std	typeref:class:std::
vector	cpucounters.h	/^template class PCM_API std::vector<uint32>;$/;"	m	class:std	typeref:class:std::
vendor_id	lspci.h	/^            uint16_t vendor_id;$/;"	m	struct:pci::__anon1::__anon2
version	daemon/daemon/common.h	/^		char version[VERSION_SIZE];$/;"	m	struct:PCMDaemon::SharedPCMState
version	winpmem/winpmem.h	/^static TCHAR version[] = TEXT("1.3. Built ") TEXT(__DATE__);$/;"	v
wQueue	cpucounters.cpp	/^    std::queue<std::packaged_task<void()> > wQueue;$/;"	m	class:CoreTaskQueue	file:
waitForChild	utils.cpp	/^void waitForChild(void * proc_id)$/;"	f
watchdog_delay_ms	width_extender.h	/^    uint32 watchdog_delay_ms;$/;"	m	class:CounterWidthExtender
what	exceptions/unsupported_processor_exception.hpp	/^	virtual const char* what() const throw()$/;"	f	class:UnsupportedProcessorException
width	cpucounters.h	/^        enum PCIeWidthMode width;$/;"	m	struct:PCM::SimplePCIeDevInfo	typeref:enum:PCM::SimplePCIeDevInfo::PCIeWidthMode
width	pcm-iio.cpp	/^    uint32_t width;$/;"	m	struct:data	file:
win_usleep	utils.h	/^inline void win_usleep(int delay_us)$/;"	f
winsert	pcm-latency.cpp	/^    double winsert;$/;"	m	struct:socket_info_uncore	file:
wlatency	pcm-latency.cpp	/^    double wlatency;$/;"	m	struct:socket_info_uncore	file:
woccupancy	pcm-latency.cpp	/^    double woccupancy;$/;"	m	struct:socket_info_uncore	file:
worker	cpucounters.cpp	/^    std::thread worker;$/;"	m	class:CoreTaskQueue	file:
workerThread_	PCM-Service_Win/PCMService.h	/^        System::Threading::Thread^ workerThread_;$/;"	m	class:PCMServiceNS::PCMService
wrap_mode	types.h	/^            uint64 wrap_mode : 1;$/;"	m	struct:BecktonUncorePMUCNTCTLRegister::__anon37::__anon38
write	MacMSRDriver/MSRAccessor.cpp	/^int32_t MSRAccessor::write(uint32_t core_num, uint64_t msr_num, uint64_t value){$/;"	f	class:MSRAccessor
write	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^void PcmMsrDriverClassName::write(uint32_t pci_address, uint32_t value)$/;"	f	class:PcmMsrDriverClassName
write	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::write(const uint64_t* input, uint32_t inputSize)$/;"	f	class:PcmMsrClientClassName
write	daemon/daemon/common.h	/^		float write;$/;"	m	struct:PCMDaemon::PCMMemoryChannelCounter
write	daemon/daemon/common.h	/^		float write;$/;"	m	struct:PCMDaemon::PCMMemorySocketCounter
write	daemon/daemon/common.h	/^		float write;$/;"	m	struct:PCMDaemon::PCMMemorySystemCounter
write	msr.cpp	/^int32 MsrHandle::write(uint64 msr_number, uint64 value)$/;"	f	class:MsrHandle
write	msr.h	/^    int32 write(uint64 msr_number, uint64 value)$/;"	f	class:SafeMsrHandle
write	winpmem/winpmem.h	/^  void write(__int64 start, T val)$/;"	f	class:WinPmem
write32	mmio.cpp	/^void MMIORange::write32(uint64 offset, uint32 val)$/;"	f	class:MMIORange
write32	mmio.h	/^    void write32(uint64 offset, uint32 val)$/;"	f	class:MMIORange
write32	pci.cpp	/^int32 PciHandle::write32(uint64 offset, uint32 value)$/;"	f	class:PciHandle
write32	pci.cpp	/^int32 PciHandleM::write32(uint64 offset, uint32 value)$/;"	f	class:PciHandleM
write32	pci.cpp	/^int32 PciHandleMM::write32(uint64 offset, uint32 value)$/;"	f	class:PciHandleMM
write64	mmio.cpp	/^void MMIORange::write64(uint64 offset, uint64 val)$/;"	f	class:MMIORange
write64	mmio.h	/^    void write64(uint64 offset, uint64 val)$/;"	f	class:MMIORange
writeAllUnitControl	cpucounters.cpp	/^void ServerPCICFGUncore::writeAllUnitControl(const uint32 value)$/;"	f	class:ServerPCICFGUncore
writeInternal	mmio.h	/^    void writeInternal(uint64 offset, T val)$/;"	f	class:MMIORange
writeMSR	MacMSRDriver/DriverInterface.c	/^kern_return_t writeMSR(io_connect_t connect, pcm_msr_data_t* data, size_t* idata_size)$/;"	f
writeMSR	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^IOReturn PcmMsrDriverClassName::writeMSR(pcm_msr_data_t* idata){$/;"	f	class:PcmMsrDriverClassName
writeMSR	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::writeMSR(pcm_msr_data_t* data)$/;"	f	class:PcmMsrClientClassName
writeSupported	mmio.cpp	/^bool MMIORange::writeSupported;$/;"	m	class:MMIORange	file:
writeSupported	mmio.h	/^    static bool writeSupported;$/;"	m	class:MMIORange
writeSysFS	cpucounters.cpp	/^bool writeSysFS(const char * path, const std::string & value, bool silent = false)$/;"	f
write_crashdump_header_	mmio.cpp	/^    virtual int write_crashdump_header_(struct PmemMemoryInfo * info)$/;"	f	class:PCMPmem
write_intensive_task	memoptest.cpp	/^void write_intensive_task(Y * p, Y * e, int value)$/;"	f
write_value	WinMSRDriver/Win7/msrstruct.h	/^    ULONG64 write_value;     \/* value to write if write requet$/;"	m	struct:MSR_Request
write_value	WinMSRDriver/Win7/msrstruct.h	/^    ULONG64 write_value;$/;"	m	struct:PCICFG_Request
wrmsr	MacMSRDriver/PcmMsr/PcmMsr.cpp	21;"	d	file:
xPI	cpucounters.h	/^    const char * xPI() const$/;"	f	class:PCM
xpiPMUs	cpucounters.h	/^    std::vector<UncorePMU> xpiPMUs;$/;"	m	class:ServerPCICFGUncore
~AbstractRawCounter	width_extender.h	/^        virtual ~AbstractRawCounter() { }$/;"	f	struct:CounterWidthExtender::AbstractRawCounter
~AsynchronCounterState	cpuasynchcounter.h	/^    ~AsynchronCounterState()$/;"	f	class:AsynchronCounterState
~BasicCounterState	cpucounters.h	/^    virtual ~BasicCounterState() { }$/;"	f	class:BasicCounterState
~CounterWidthExtender	cpucounters.cpp	/^CounterWidthExtender::~CounterWidthExtender()$/;"	f	class:CounterWidthExtender
~Daemon	daemon/daemon/daemon.cpp	/^	Daemon::~Daemon()$/;"	f	class:PCMDaemon::Daemon
~HWRegister	cpucounters.h	/^    virtual ~HWRegister() {}$/;"	f	class:HWRegister
~InstanceLock	cpucounters.cpp	/^    ~InstanceLock()$/;"	f	class:InstanceLock
~MMIORange	mmio.cpp	/^MMIORange::~MMIORange()$/;"	f	class:MMIORange
~MSRAccessor	MacMSRDriver/MSRAccessor.cpp	/^MSRAccessor::~MSRAccessor(){$/;"	f	class:MSRAccessor
~MsrHandle	msr.cpp	/^MsrHandle::~MsrHandle()$/;"	f	class:MsrHandle
~Mutex	mutex.h	/^        virtual ~Mutex()$/;"	f	class:PCM_Util::Mutex
~PCM	cpucounters.cpp	/^PCM::~PCM()$/;"	f	class:PCM
~PCMService	PCM-Service_Win/PCMService.h	/^        ~PCMService()$/;"	f	class:PCMServiceNS::PCMService
~PciHandle	pci.cpp	/^PciHandle::~PciHandle()$/;"	f	class:PciHandle
~PciHandleM	pci.cpp	/^PciHandleM::~PciHandleM()$/;"	f	class:PciHandleM
~PciHandleMM	pci.cpp	/^PciHandleMM::~PciHandleMM()$/;"	f	class:PciHandleMM
~PerfVirtualControlRegister	cpucounters.cpp	/^    ~PerfVirtualControlRegister()$/;"	f	class:PerfVirtualControlRegister
~ProjectInstaller	PCM-Service_Win/PCMInstaller.h	/^		~ProjectInstaller()$/;"	f	class:PMUService::ProjectInstaller
~SafeMsrHandle	msr.h	/^    virtual ~SafeMsrHandle()$/;"	f	class:SafeMsrHandle
~Scope	mutex.h	/^            ~Scope() {$/;"	f	class:PCM_Util::Mutex::Scope
~ServerPCICFGUncore	cpucounters.cpp	/^ServerPCICFGUncore::~ServerPCICFGUncore()$/;"	f	class:ServerPCICFGUncore
~SimpleCounterState	cpucounters.h	/^    virtual ~SimpleCounterState() { }$/;"	f	class:SimpleCounterState
~TemporalThreadAffinity	cpucounters.cpp	/^    ~TemporalThreadAffinity()$/;"	f	class:TemporalThreadAffinity
~ThreadGroupTempAffinity	utils.cpp	/^ThreadGroupTempAffinity::~ThreadGroupTempAffinity()$/;"	f	class:ThreadGroupTempAffinity
~UncoreCounterState	cpucounters.h	/^    virtual ~UncoreCounterState() { }$/;"	f	class:UncoreCounterState
~UncorePMU	cpucounters.h	/^    virtual ~UncorePMU() {}$/;"	f	class:UncorePMU
~WinPmem	winpmem/winpmem.cpp	/^WinPmem::~WinPmem() {$/;"	f	class:WinPmem
